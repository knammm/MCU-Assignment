
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ffc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800518c  0800518c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800518c  0800518c  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800518c  0800518c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08005194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200000b4  08005248  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005248  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ff7  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5e  00000000  00000000  000380d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  0003bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198dc  00000000  00000000  0003ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012603  00000000  00000000  00056324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4bd  00000000  00000000  00068927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3de4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  000f3e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	080050f0 	.word	0x080050f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	080050f0 	.word	0x080050f0

0800014c <fsm_automatic_run>:
 *      Author: olkmphy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af00      	add	r7, sp, #0
	char str[50];
	switch(status){
 8000152:	4bb6      	ldr	r3, [pc, #728]	; (800042c <fsm_automatic_run+0x2e0>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	3b01      	subs	r3, #1
 8000158:	2b17      	cmp	r3, #23
 800015a:	f200 81e9 	bhi.w	8000530 <fsm_automatic_run+0x3e4>
 800015e:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	080001c5 	.word	0x080001c5
 8000168:	08000531 	.word	0x08000531
 800016c:	08000531 	.word	0x08000531
 8000170:	08000531 	.word	0x08000531
 8000174:	08000531 	.word	0x08000531
 8000178:	08000531 	.word	0x08000531
 800017c:	08000531 	.word	0x08000531
 8000180:	08000531 	.word	0x08000531
 8000184:	08000531 	.word	0x08000531
 8000188:	08000531 	.word	0x08000531
 800018c:	08000531 	.word	0x08000531
 8000190:	08000531 	.word	0x08000531
 8000194:	08000531 	.word	0x08000531
 8000198:	08000531 	.word	0x08000531
 800019c:	08000531 	.word	0x08000531
 80001a0:	08000531 	.word	0x08000531
 80001a4:	08000531 	.word	0x08000531
 80001a8:	08000531 	.word	0x08000531
 80001ac:	08000531 	.word	0x08000531
 80001b0:	08000531 	.word	0x08000531
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	0800029b 	.word	0x0800029b
 80001bc:	08000371 	.word	0x08000371
 80001c0:	0800045d 	.word	0x0800045d
	case INIT:
		//TODO
		status = RED_GREEN;
 80001c4:	4b99      	ldr	r3, [pc, #612]	; (800042c <fsm_automatic_run+0x2e0>)
 80001c6:	2215      	movs	r2, #21
 80001c8:	601a      	str	r2, [r3, #0]
		setTimer(0, durationGREEN);
 80001ca:	4b99      	ldr	r3, [pc, #612]	; (8000430 <fsm_automatic_run+0x2e4>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4619      	mov	r1, r3
 80001d0:	2000      	movs	r0, #0
 80001d2:	f001 fb81 	bl	80018d8 <setTimer>
		setTimerSecond(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f001 fb61 	bl	80018a0 <setTimerSecond>
		break;
 80001de:	e1b0      	b.n	8000542 <fsm_automatic_run+0x3f6>
	case RED_GREEN:
		//TODO
		Traffic_setColor(1, OFF_LED);
 80001e0:	2105      	movs	r1, #5
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 fd6e 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, OFF_LED);
 80001e8:	2105      	movs	r1, #5
 80001ea:	2002      	movs	r0, #2
 80001ec:	f000 fd6a 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(1, AUTO_RED);
 80001f0:	2102      	movs	r1, #2
 80001f2:	2001      	movs	r0, #1
 80001f4:	f000 fd66 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, AUTO_GREEN);
 80001f8:	2103      	movs	r1, #3
 80001fa:	2002      	movs	r0, #2
 80001fc:	f000 fd62 	bl	8000cc4 <Traffic_setColor>
		if (timerSecond == 1){
 8000200:	4b8c      	ldr	r3, [pc, #560]	; (8000434 <fsm_automatic_run+0x2e8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d139      	bne.n	800027c <fsm_automatic_run+0x130>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
 8000208:	4b8b      	ldr	r3, [pc, #556]	; (8000438 <fsm_automatic_run+0x2ec>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	498b      	ldr	r1, [pc, #556]	; (800043c <fsm_automatic_run+0x2f0>)
 8000210:	4618      	mov	r0, r3
 8000212:	f004 fb33 	bl	800487c <siprintf>
 8000216:	4603      	mov	r3, r0
 8000218:	b29a      	uxth	r2, r3
 800021a:	1d39      	adds	r1, r7, #4
 800021c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000220:	4887      	ldr	r0, [pc, #540]	; (8000440 <fsm_automatic_run+0x2f4>)
 8000222:	f003 fd25 	bl	8003c70 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
 8000226:	4b87      	ldr	r3, [pc, #540]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4986      	ldr	r1, [pc, #536]	; (8000448 <fsm_automatic_run+0x2fc>)
 800022e:	4618      	mov	r0, r3
 8000230:	f004 fb24 	bl	800487c <siprintf>
 8000234:	4603      	mov	r3, r0
 8000236:	b29a      	uxth	r2, r3
 8000238:	1d39      	adds	r1, r7, #4
 800023a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800023e:	4880      	ldr	r0, [pc, #512]	; (8000440 <fsm_automatic_run+0x2f4>)
 8000240:	f003 fd16 	bl	8003c70 <HAL_UART_Transmit>
			setTimerSecond(1000);
 8000244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000248:	f001 fb2a 	bl	80018a0 <setTimerSecond>
			timerTraffic1--;
 800024c:	4b7a      	ldr	r3, [pc, #488]	; (8000438 <fsm_automatic_run+0x2ec>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	4a79      	ldr	r2, [pc, #484]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000254:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 8000256:	4b7b      	ldr	r3, [pc, #492]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	3b01      	subs	r3, #1
 800025c:	4a79      	ldr	r2, [pc, #484]	; (8000444 <fsm_automatic_run+0x2f8>)
 800025e:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationYELLOW / 1000;
 8000260:	4b78      	ldr	r3, [pc, #480]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dc09      	bgt.n	800027c <fsm_automatic_run+0x130>
 8000268:	4b78      	ldr	r3, [pc, #480]	; (800044c <fsm_automatic_run+0x300>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a78      	ldr	r2, [pc, #480]	; (8000450 <fsm_automatic_run+0x304>)
 800026e:	fb82 1203 	smull	r1, r2, r2, r3
 8000272:	1192      	asrs	r2, r2, #6
 8000274:	17db      	asrs	r3, r3, #31
 8000276:	1ad3      	subs	r3, r2, r3
 8000278:	4a72      	ldr	r2, [pc, #456]	; (8000444 <fsm_automatic_run+0x2f8>)
 800027a:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 800027c:	4b75      	ldr	r3, [pc, #468]	; (8000454 <fsm_automatic_run+0x308>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	f040 8157 	bne.w	8000534 <fsm_automatic_run+0x3e8>
			setTimer(0, durationYELLOW);
 8000286:	4b71      	ldr	r3, [pc, #452]	; (800044c <fsm_automatic_run+0x300>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4619      	mov	r1, r3
 800028c:	2000      	movs	r0, #0
 800028e:	f001 fb23 	bl	80018d8 <setTimer>
			status = RED_YELLOW;
 8000292:	4b66      	ldr	r3, [pc, #408]	; (800042c <fsm_automatic_run+0x2e0>)
 8000294:	2216      	movs	r2, #22
 8000296:	601a      	str	r2, [r3, #0]
		}
		break;
 8000298:	e14c      	b.n	8000534 <fsm_automatic_run+0x3e8>
	case RED_YELLOW:
		//TODO
		Traffic_setColor(1, OFF_LED);
 800029a:	2105      	movs	r1, #5
 800029c:	2001      	movs	r0, #1
 800029e:	f000 fd11 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, OFF_LED);
 80002a2:	2105      	movs	r1, #5
 80002a4:	2002      	movs	r0, #2
 80002a6:	f000 fd0d 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(1, AUTO_RED);
 80002aa:	2102      	movs	r1, #2
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 fd09 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, AUTO_YELLOW);
 80002b2:	2104      	movs	r1, #4
 80002b4:	2002      	movs	r0, #2
 80002b6:	f000 fd05 	bl	8000cc4 <Traffic_setColor>
		if (timerSecond == 1){
 80002ba:	4b5e      	ldr	r3, [pc, #376]	; (8000434 <fsm_automatic_run+0x2e8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d147      	bne.n	8000352 <fsm_automatic_run+0x206>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
 80002c2:	4b5d      	ldr	r3, [pc, #372]	; (8000438 <fsm_automatic_run+0x2ec>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	495c      	ldr	r1, [pc, #368]	; (800043c <fsm_automatic_run+0x2f0>)
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 fad6 	bl	800487c <siprintf>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	1d39      	adds	r1, r7, #4
 80002d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002da:	4859      	ldr	r0, [pc, #356]	; (8000440 <fsm_automatic_run+0x2f4>)
 80002dc:	f003 fcc8 	bl	8003c70 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
 80002e0:	4b58      	ldr	r3, [pc, #352]	; (8000444 <fsm_automatic_run+0x2f8>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4958      	ldr	r1, [pc, #352]	; (8000448 <fsm_automatic_run+0x2fc>)
 80002e8:	4618      	mov	r0, r3
 80002ea:	f004 fac7 	bl	800487c <siprintf>
 80002ee:	4603      	mov	r3, r0
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	1d39      	adds	r1, r7, #4
 80002f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002f8:	4851      	ldr	r0, [pc, #324]	; (8000440 <fsm_automatic_run+0x2f4>)
 80002fa:	f003 fcb9 	bl	8003c70 <HAL_UART_Transmit>
			setTimerSecond(1000);
 80002fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000302:	f001 facd 	bl	80018a0 <setTimerSecond>
			timerTraffic1--;
 8000306:	4b4c      	ldr	r3, [pc, #304]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3b01      	subs	r3, #1
 800030c:	4a4a      	ldr	r2, [pc, #296]	; (8000438 <fsm_automatic_run+0x2ec>)
 800030e:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationGREEN / 1000;
 8000310:	4b49      	ldr	r3, [pc, #292]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dc09      	bgt.n	800032c <fsm_automatic_run+0x1e0>
 8000318:	4b45      	ldr	r3, [pc, #276]	; (8000430 <fsm_automatic_run+0x2e4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a4c      	ldr	r2, [pc, #304]	; (8000450 <fsm_automatic_run+0x304>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1192      	asrs	r2, r2, #6
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a43      	ldr	r2, [pc, #268]	; (8000438 <fsm_automatic_run+0x2ec>)
 800032a:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800032c:	4b45      	ldr	r3, [pc, #276]	; (8000444 <fsm_automatic_run+0x2f8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3b01      	subs	r3, #1
 8000332:	4a44      	ldr	r2, [pc, #272]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000334:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationRED / 1000;
 8000336:	4b43      	ldr	r3, [pc, #268]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	dc09      	bgt.n	8000352 <fsm_automatic_run+0x206>
 800033e:	4b46      	ldr	r3, [pc, #280]	; (8000458 <fsm_automatic_run+0x30c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a43      	ldr	r2, [pc, #268]	; (8000450 <fsm_automatic_run+0x304>)
 8000344:	fb82 1203 	smull	r1, r2, r2, r3
 8000348:	1192      	asrs	r2, r2, #6
 800034a:	17db      	asrs	r3, r3, #31
 800034c:	1ad3      	subs	r3, r2, r3
 800034e:	4a3d      	ldr	r2, [pc, #244]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000350:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 8000352:	4b40      	ldr	r3, [pc, #256]	; (8000454 <fsm_automatic_run+0x308>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	f040 80ee 	bne.w	8000538 <fsm_automatic_run+0x3ec>
			setTimer(0, durationGREEN);
 800035c:	4b34      	ldr	r3, [pc, #208]	; (8000430 <fsm_automatic_run+0x2e4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	2000      	movs	r0, #0
 8000364:	f001 fab8 	bl	80018d8 <setTimer>
			status = GREEN_RED;
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <fsm_automatic_run+0x2e0>)
 800036a:	2217      	movs	r2, #23
 800036c:	601a      	str	r2, [r3, #0]
		}
		break;
 800036e:	e0e3      	b.n	8000538 <fsm_automatic_run+0x3ec>
	case GREEN_RED:
		Traffic_setColor(1, OFF_LED);
 8000370:	2105      	movs	r1, #5
 8000372:	2001      	movs	r0, #1
 8000374:	f000 fca6 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, OFF_LED);
 8000378:	2105      	movs	r1, #5
 800037a:	2002      	movs	r0, #2
 800037c:	f000 fca2 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(1, AUTO_GREEN);
 8000380:	2103      	movs	r1, #3
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fc9e 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 8000388:	2102      	movs	r1, #2
 800038a:	2002      	movs	r0, #2
 800038c:	f000 fc9a 	bl	8000cc4 <Traffic_setColor>
		if (timerSecond == 1){
 8000390:	4b28      	ldr	r3, [pc, #160]	; (8000434 <fsm_automatic_run+0x2e8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d139      	bne.n	800040c <fsm_automatic_run+0x2c0>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
 8000398:	4b27      	ldr	r3, [pc, #156]	; (8000438 <fsm_automatic_run+0x2ec>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4927      	ldr	r1, [pc, #156]	; (800043c <fsm_automatic_run+0x2f0>)
 80003a0:	4618      	mov	r0, r3
 80003a2:	f004 fa6b 	bl	800487c <siprintf>
 80003a6:	4603      	mov	r3, r0
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	1d39      	adds	r1, r7, #4
 80003ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003b0:	4823      	ldr	r0, [pc, #140]	; (8000440 <fsm_automatic_run+0x2f4>)
 80003b2:	f003 fc5d 	bl	8003c70 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <fsm_automatic_run+0x2f8>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4922      	ldr	r1, [pc, #136]	; (8000448 <fsm_automatic_run+0x2fc>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f004 fa5c 	bl	800487c <siprintf>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	1d39      	adds	r1, r7, #4
 80003ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003ce:	481c      	ldr	r0, [pc, #112]	; (8000440 <fsm_automatic_run+0x2f4>)
 80003d0:	f003 fc4e 	bl	8003c70 <HAL_UART_Transmit>
			setTimerSecond(1000);
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f001 fa62 	bl	80018a0 <setTimerSecond>
			timerTraffic1--;
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <fsm_automatic_run+0x2ec>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <fsm_automatic_run+0x2ec>)
 80003e4:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationYELLOW / 1000;
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <fsm_automatic_run+0x2ec>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dc09      	bgt.n	8000402 <fsm_automatic_run+0x2b6>
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <fsm_automatic_run+0x300>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a17      	ldr	r2, [pc, #92]	; (8000450 <fsm_automatic_run+0x304>)
 80003f4:	fb82 1203 	smull	r1, r2, r2, r3
 80003f8:	1192      	asrs	r2, r2, #6
 80003fa:	17db      	asrs	r3, r3, #31
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000400:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3b01      	subs	r3, #1
 8000408:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <fsm_automatic_run+0x2f8>)
 800040a:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <fsm_automatic_run+0x308>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	f040 8093 	bne.w	800053c <fsm_automatic_run+0x3f0>
			setTimer(0, durationYELLOW);
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <fsm_automatic_run+0x300>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4619      	mov	r1, r3
 800041c:	2000      	movs	r0, #0
 800041e:	f001 fa5b 	bl	80018d8 <setTimer>
			status = YELLOW_RED;
 8000422:	4b02      	ldr	r3, [pc, #8]	; (800042c <fsm_automatic_run+0x2e0>)
 8000424:	2218      	movs	r2, #24
 8000426:	601a      	str	r2, [r3, #0]
		}
		break;
 8000428:	e088      	b.n	800053c <fsm_automatic_run+0x3f0>
 800042a:	bf00      	nop
 800042c:	20000018 	.word	0x20000018
 8000430:	20000024 	.word	0x20000024
 8000434:	20000200 	.word	0x20000200
 8000438:	200000d8 	.word	0x200000d8
 800043c:	08005108 	.word	0x08005108
 8000440:	200002d8 	.word	0x200002d8
 8000444:	200000dc 	.word	0x200000dc
 8000448:	08005118 	.word	0x08005118
 800044c:	20000020 	.word	0x20000020
 8000450:	10624dd3 	.word	0x10624dd3
 8000454:	20000208 	.word	0x20000208
 8000458:	2000001c 	.word	0x2000001c
	case YELLOW_RED:
		Traffic_setColor(1, OFF_LED);
 800045c:	2105      	movs	r1, #5
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fc30 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, OFF_LED);
 8000464:	2105      	movs	r1, #5
 8000466:	2002      	movs	r0, #2
 8000468:	f000 fc2c 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(1, AUTO_YELLOW);
 800046c:	2104      	movs	r1, #4
 800046e:	2001      	movs	r0, #1
 8000470:	f000 fc28 	bl	8000cc4 <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 8000474:	2102      	movs	r1, #2
 8000476:	2002      	movs	r0, #2
 8000478:	f000 fc24 	bl	8000cc4 <Traffic_setColor>
		if (timerSecond == 1){
 800047c:	4b65      	ldr	r3, [pc, #404]	; (8000614 <fsm_automatic_run+0x4c8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d147      	bne.n	8000514 <fsm_automatic_run+0x3c8>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
 8000484:	4b64      	ldr	r3, [pc, #400]	; (8000618 <fsm_automatic_run+0x4cc>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	4964      	ldr	r1, [pc, #400]	; (800061c <fsm_automatic_run+0x4d0>)
 800048c:	4618      	mov	r0, r3
 800048e:	f004 f9f5 	bl	800487c <siprintf>
 8000492:	4603      	mov	r3, r0
 8000494:	b29a      	uxth	r2, r3
 8000496:	1d39      	adds	r1, r7, #4
 8000498:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800049c:	4860      	ldr	r0, [pc, #384]	; (8000620 <fsm_automatic_run+0x4d4>)
 800049e:	f003 fbe7 	bl	8003c70 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
 80004a2:	4b60      	ldr	r3, [pc, #384]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	495f      	ldr	r1, [pc, #380]	; (8000628 <fsm_automatic_run+0x4dc>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 f9e6 	bl	800487c <siprintf>
 80004b0:	4603      	mov	r3, r0
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	1d39      	adds	r1, r7, #4
 80004b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004ba:	4859      	ldr	r0, [pc, #356]	; (8000620 <fsm_automatic_run+0x4d4>)
 80004bc:	f003 fbd8 	bl	8003c70 <HAL_UART_Transmit>
			setTimerSecond(1000);
 80004c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c4:	f001 f9ec 	bl	80018a0 <setTimerSecond>
			timerTraffic1--;
 80004c8:	4b53      	ldr	r3, [pc, #332]	; (8000618 <fsm_automatic_run+0x4cc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a52      	ldr	r2, [pc, #328]	; (8000618 <fsm_automatic_run+0x4cc>)
 80004d0:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationRED / 1000;
 80004d2:	4b51      	ldr	r3, [pc, #324]	; (8000618 <fsm_automatic_run+0x4cc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dc09      	bgt.n	80004ee <fsm_automatic_run+0x3a2>
 80004da:	4b54      	ldr	r3, [pc, #336]	; (800062c <fsm_automatic_run+0x4e0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a54      	ldr	r2, [pc, #336]	; (8000630 <fsm_automatic_run+0x4e4>)
 80004e0:	fb82 1203 	smull	r1, r2, r2, r3
 80004e4:	1192      	asrs	r2, r2, #6
 80004e6:	17db      	asrs	r3, r3, #31
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	4a4b      	ldr	r2, [pc, #300]	; (8000618 <fsm_automatic_run+0x4cc>)
 80004ec:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 80004ee:	4b4d      	ldr	r3, [pc, #308]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a4b      	ldr	r2, [pc, #300]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004f6:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationGREEN / 1000;
 80004f8:	4b4a      	ldr	r3, [pc, #296]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	dc09      	bgt.n	8000514 <fsm_automatic_run+0x3c8>
 8000500:	4b4c      	ldr	r3, [pc, #304]	; (8000634 <fsm_automatic_run+0x4e8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a4a      	ldr	r2, [pc, #296]	; (8000630 <fsm_automatic_run+0x4e4>)
 8000506:	fb82 1203 	smull	r1, r2, r2, r3
 800050a:	1192      	asrs	r2, r2, #6
 800050c:	17db      	asrs	r3, r3, #31
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	4a44      	ldr	r2, [pc, #272]	; (8000624 <fsm_automatic_run+0x4d8>)
 8000512:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 8000514:	4b48      	ldr	r3, [pc, #288]	; (8000638 <fsm_automatic_run+0x4ec>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d111      	bne.n	8000540 <fsm_automatic_run+0x3f4>
			setTimer(0, durationGREEN);
 800051c:	4b45      	ldr	r3, [pc, #276]	; (8000634 <fsm_automatic_run+0x4e8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	2000      	movs	r0, #0
 8000524:	f001 f9d8 	bl	80018d8 <setTimer>
			status = RED_GREEN;
 8000528:	4b44      	ldr	r3, [pc, #272]	; (800063c <fsm_automatic_run+0x4f0>)
 800052a:	2215      	movs	r2, #21
 800052c:	601a      	str	r2, [r3, #0]
		}
		break;
 800052e:	e007      	b.n	8000540 <fsm_automatic_run+0x3f4>
	default:
		break;
 8000530:	bf00      	nop
 8000532:	e006      	b.n	8000542 <fsm_automatic_run+0x3f6>
		break;
 8000534:	bf00      	nop
 8000536:	e004      	b.n	8000542 <fsm_automatic_run+0x3f6>
		break;
 8000538:	bf00      	nop
 800053a:	e002      	b.n	8000542 <fsm_automatic_run+0x3f6>
		break;
 800053c:	bf00      	nop
 800053e:	e000      	b.n	8000542 <fsm_automatic_run+0x3f6>
		break;
 8000540:	bf00      	nop
	}
	// MODE BUTTON
	if(isButtonPressed(1) == 1){
 8000542:	2001      	movs	r0, #1
 8000544:	f000 fd60 	bl	8001008 <isButtonPressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d148      	bne.n	80005e0 <fsm_automatic_run+0x494>
		if(status == RED_GREEN || status == RED_YELLOW || status == GREEN_RED || status == YELLOW_RED){
 800054e:	4b3b      	ldr	r3, [pc, #236]	; (800063c <fsm_automatic_run+0x4f0>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b15      	cmp	r3, #21
 8000554:	d00b      	beq.n	800056e <fsm_automatic_run+0x422>
 8000556:	4b39      	ldr	r3, [pc, #228]	; (800063c <fsm_automatic_run+0x4f0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b16      	cmp	r3, #22
 800055c:	d007      	beq.n	800056e <fsm_automatic_run+0x422>
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <fsm_automatic_run+0x4f0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b17      	cmp	r3, #23
 8000564:	d003      	beq.n	800056e <fsm_automatic_run+0x422>
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <fsm_automatic_run+0x4f0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b18      	cmp	r3, #24
 800056c:	d134      	bne.n	80005d8 <fsm_automatic_run+0x48c>
			status = MOD_RED;
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <fsm_automatic_run+0x4f0>)
 8000570:	220b      	movs	r2, #11
 8000572:	601a      	str	r2, [r3, #0]
			setTimer(1, 10); // timer for blinky
 8000574:	210a      	movs	r1, #10
 8000576:	2001      	movs	r0, #1
 8000578:	f001 f9ae 	bl	80018d8 <setTimer>
			Traffic_setColor(1, AUTO_RED);
 800057c:	2102      	movs	r1, #2
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fba0 	bl	8000cc4 <Traffic_setColor>
			Traffic_setColor(2, AUTO_RED);
 8000584:	2102      	movs	r1, #2
 8000586:	2002      	movs	r0, #2
 8000588:	f000 fb9c 	bl	8000cc4 <Traffic_setColor>
			RED_sec = durationRED / 1000;
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <fsm_automatic_run+0x4e0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <fsm_automatic_run+0x4e4>)
 8000592:	fb82 1203 	smull	r1, r2, r2, r3
 8000596:	1192      	asrs	r2, r2, #6
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a28      	ldr	r2, [pc, #160]	; (8000640 <fsm_automatic_run+0x4f4>)
 800059e:	6013      	str	r3, [r2, #0]
			YELLOW_sec = durationYELLOW / 1000;
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <fsm_automatic_run+0x4f8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a22      	ldr	r2, [pc, #136]	; (8000630 <fsm_automatic_run+0x4e4>)
 80005a6:	fb82 1203 	smull	r1, r2, r2, r3
 80005aa:	1192      	asrs	r2, r2, #6
 80005ac:	17db      	asrs	r3, r3, #31
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	4a25      	ldr	r2, [pc, #148]	; (8000648 <fsm_automatic_run+0x4fc>)
 80005b2:	6013      	str	r3, [r2, #0]
			GREEN_sec = durationGREEN / 1000;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <fsm_automatic_run+0x4e8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <fsm_automatic_run+0x4e4>)
 80005ba:	fb82 1203 	smull	r1, r2, r2, r3
 80005be:	1192      	asrs	r2, r2, #6
 80005c0:	17db      	asrs	r3, r3, #31
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <fsm_automatic_run+0x500>)
 80005c6:	6013      	str	r3, [r2, #0]
			timerTraffic1 = RED_sec;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <fsm_automatic_run+0x4f4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <fsm_automatic_run+0x4cc>)
 80005ce:	6013      	str	r3, [r2, #0]
			timerTraffic2 = 2;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <fsm_automatic_run+0x4d8>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
		setTimer(2, 10000); // 10 secs
		setTimer(3, 100);
		setTimer(4, 100);
	}

}
 80005d6:	e019      	b.n	800060c <fsm_automatic_run+0x4c0>
		else setBackButtonFlag(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 fd37 	bl	800104c <setBackButtonFlag>
}
 80005de:	e015      	b.n	800060c <fsm_automatic_run+0x4c0>
	else if(isButtonPressed(0) == 1){
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fd11 	bl	8001008 <isButtonPressed>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d10f      	bne.n	800060c <fsm_automatic_run+0x4c0>
		pedestrianFlag = 1;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <fsm_automatic_run+0x504>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
		setTimer(2, 10000); // 10 secs
 80005f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80005f6:	2002      	movs	r0, #2
 80005f8:	f001 f96e 	bl	80018d8 <setTimer>
		setTimer(3, 100);
 80005fc:	2164      	movs	r1, #100	; 0x64
 80005fe:	2003      	movs	r0, #3
 8000600:	f001 f96a 	bl	80018d8 <setTimer>
		setTimer(4, 100);
 8000604:	2164      	movs	r1, #100	; 0x64
 8000606:	2004      	movs	r0, #4
 8000608:	f001 f966 	bl	80018d8 <setTimer>
}
 800060c:	bf00      	nop
 800060e:	3738      	adds	r7, #56	; 0x38
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000200 	.word	0x20000200
 8000618:	200000d8 	.word	0x200000d8
 800061c:	08005108 	.word	0x08005108
 8000620:	200002d8 	.word	0x200002d8
 8000624:	200000dc 	.word	0x200000dc
 8000628:	08005118 	.word	0x08005118
 800062c:	2000001c 	.word	0x2000001c
 8000630:	10624dd3 	.word	0x10624dd3
 8000634:	20000024 	.word	0x20000024
 8000638:	20000208 	.word	0x20000208
 800063c:	20000018 	.word	0x20000018
 8000640:	20000244 	.word	0x20000244
 8000644:	20000020 	.word	0x20000020
 8000648:	20000240 	.word	0x20000240
 800064c:	2000023c 	.word	0x2000023c
 8000650:	200000d0 	.word	0x200000d0

08000654 <fsm_manual_run>:
 *  Created on: Nov 29, 2023
 *      Author: olkmphy
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	switch(status){
 800065a:	4ba4      	ldr	r3, [pc, #656]	; (80008ec <fsm_manual_run+0x298>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b0d      	cmp	r3, #13
 8000660:	f000 80be 	beq.w	80007e0 <fsm_manual_run+0x18c>
 8000664:	2b0d      	cmp	r3, #13
 8000666:	f300 8135 	bgt.w	80008d4 <fsm_manual_run+0x280>
 800066a:	2b0b      	cmp	r3, #11
 800066c:	d002      	beq.n	8000674 <fsm_manual_run+0x20>
 800066e:	2b0c      	cmp	r3, #12
 8000670:	d055      	beq.n	800071e <fsm_manual_run+0xca>
				setTimerSecond(1000);
				led_index = 0;
			}
			break;
		default:
			break;
 8000672:	e12f      	b.n	80008d4 <fsm_manual_run+0x280>
			if(timerFlag[1] == 1){
 8000674:	4b9e      	ldr	r3, [pc, #632]	; (80008f0 <fsm_manual_run+0x29c>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10b      	bne.n	8000694 <fsm_manual_run+0x40>
				setTimer(1, 250); // blink every 0.25s
 800067c:	21fa      	movs	r1, #250	; 0xfa
 800067e:	2001      	movs	r0, #1
 8000680:	f001 f92a 	bl	80018d8 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_RED);
 8000684:	2102      	movs	r1, #2
 8000686:	2007      	movs	r0, #7
 8000688:	f000 fa8a 	bl	8000ba0 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_RED);
 800068c:	2102      	movs	r1, #2
 800068e:	2008      	movs	r0, #8
 8000690:	f000 fa86 	bl	8000ba0 <blinkLEDs>
			if(isButtonPressed(2) == 1){
 8000694:	2002      	movs	r0, #2
 8000696:	f000 fcb7 	bl	8001008 <isButtonPressed>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d114      	bne.n	80006ca <fsm_manual_run+0x76>
				RED_sec++;
 80006a0:	4b94      	ldr	r3, [pc, #592]	; (80008f4 <fsm_manual_run+0x2a0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <fsm_manual_run+0x2a0>)
 80006a8:	6013      	str	r3, [r2, #0]
				if(RED_sec >= 100) {
 80006aa:	4b92      	ldr	r3, [pc, #584]	; (80008f4 <fsm_manual_run+0x2a0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b63      	cmp	r3, #99	; 0x63
 80006b0:	dd06      	ble.n	80006c0 <fsm_manual_run+0x6c>
					RED_sec = 1;
 80006b2:	4b90      	ldr	r3, [pc, #576]	; (80008f4 <fsm_manual_run+0x2a0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 80006b8:	4b8f      	ldr	r3, [pc, #572]	; (80008f8 <fsm_manual_run+0x2a4>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	e004      	b.n	80006ca <fsm_manual_run+0x76>
				else timerTraffic1++;
 80006c0:	4b8d      	ldr	r3, [pc, #564]	; (80008f8 <fsm_manual_run+0x2a4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a8c      	ldr	r2, [pc, #560]	; (80008f8 <fsm_manual_run+0x2a4>)
 80006c8:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1) durationRED = RED_sec * 1000;
 80006ca:	2003      	movs	r0, #3
 80006cc:	f000 fc9c 	bl	8001008 <isButtonPressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d107      	bne.n	80006e6 <fsm_manual_run+0x92>
 80006d6:	4b87      	ldr	r3, [pc, #540]	; (80008f4 <fsm_manual_run+0x2a0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	4a86      	ldr	r2, [pc, #536]	; (80008fc <fsm_manual_run+0x2a8>)
 80006e4:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fc8e 	bl	8001008 <isButtonPressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	f040 80f2 	bne.w	80008d8 <fsm_manual_run+0x284>
				setTimer(1, 10);
 80006f4:	210a      	movs	r1, #10
 80006f6:	2001      	movs	r0, #1
 80006f8:	f001 f8ee 	bl	80018d8 <setTimer>
				status = MOD_YELLOW;
 80006fc:	4b7b      	ldr	r3, [pc, #492]	; (80008ec <fsm_manual_run+0x298>)
 80006fe:	220c      	movs	r2, #12
 8000700:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationYELLOW / 1000;
 8000702:	4b7f      	ldr	r3, [pc, #508]	; (8000900 <fsm_manual_run+0x2ac>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a7f      	ldr	r2, [pc, #508]	; (8000904 <fsm_manual_run+0x2b0>)
 8000708:	fb82 1203 	smull	r1, r2, r2, r3
 800070c:	1192      	asrs	r2, r2, #6
 800070e:	17db      	asrs	r3, r3, #31
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	4a79      	ldr	r2, [pc, #484]	; (80008f8 <fsm_manual_run+0x2a4>)
 8000714:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 3;
 8000716:	4b7c      	ldr	r3, [pc, #496]	; (8000908 <fsm_manual_run+0x2b4>)
 8000718:	2203      	movs	r2, #3
 800071a:	601a      	str	r2, [r3, #0]
			break;
 800071c:	e0dc      	b.n	80008d8 <fsm_manual_run+0x284>
			if(timerFlag[1] == 1){
 800071e:	4b74      	ldr	r3, [pc, #464]	; (80008f0 <fsm_manual_run+0x29c>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10b      	bne.n	800073e <fsm_manual_run+0xea>
				setTimer(1, 250); // blink every 0.25s
 8000726:	21fa      	movs	r1, #250	; 0xfa
 8000728:	2001      	movs	r0, #1
 800072a:	f001 f8d5 	bl	80018d8 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_YELLOW);
 800072e:	2104      	movs	r1, #4
 8000730:	2007      	movs	r0, #7
 8000732:	f000 fa35 	bl	8000ba0 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_YELLOW);
 8000736:	2104      	movs	r1, #4
 8000738:	2008      	movs	r0, #8
 800073a:	f000 fa31 	bl	8000ba0 <blinkLEDs>
			if(isButtonPressed(2) == 1){
 800073e:	2002      	movs	r0, #2
 8000740:	f000 fc62 	bl	8001008 <isButtonPressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d114      	bne.n	8000774 <fsm_manual_run+0x120>
				YELLOW_sec++;
 800074a:	4b70      	ldr	r3, [pc, #448]	; (800090c <fsm_manual_run+0x2b8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a6e      	ldr	r2, [pc, #440]	; (800090c <fsm_manual_run+0x2b8>)
 8000752:	6013      	str	r3, [r2, #0]
				if(YELLOW_sec >= 100) {
 8000754:	4b6d      	ldr	r3, [pc, #436]	; (800090c <fsm_manual_run+0x2b8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b63      	cmp	r3, #99	; 0x63
 800075a:	dd06      	ble.n	800076a <fsm_manual_run+0x116>
					YELLOW_sec = 1;
 800075c:	4b6b      	ldr	r3, [pc, #428]	; (800090c <fsm_manual_run+0x2b8>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 8000762:	4b65      	ldr	r3, [pc, #404]	; (80008f8 <fsm_manual_run+0x2a4>)
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	e004      	b.n	8000774 <fsm_manual_run+0x120>
				else timerTraffic1++;
 800076a:	4b63      	ldr	r3, [pc, #396]	; (80008f8 <fsm_manual_run+0x2a4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a61      	ldr	r2, [pc, #388]	; (80008f8 <fsm_manual_run+0x2a4>)
 8000772:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 8000774:	2003      	movs	r0, #3
 8000776:	f000 fc47 	bl	8001008 <isButtonPressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d113      	bne.n	80007a8 <fsm_manual_run+0x154>
				int prevDurationYELLOW = durationYELLOW;
 8000780:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <fsm_manual_run+0x2ac>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	607b      	str	r3, [r7, #4]
				durationYELLOW = YELLOW_sec * 1000;
 8000786:	4b61      	ldr	r3, [pc, #388]	; (800090c <fsm_manual_run+0x2b8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800078e:	fb02 f303 	mul.w	r3, r2, r3
 8000792:	4a5b      	ldr	r2, [pc, #364]	; (8000900 <fsm_manual_run+0x2ac>)
 8000794:	6013      	str	r3, [r2, #0]
				if(durationYELLOW > durationRED) durationYELLOW = prevDurationYELLOW; // Check the logic
 8000796:	4b5a      	ldr	r3, [pc, #360]	; (8000900 <fsm_manual_run+0x2ac>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b58      	ldr	r3, [pc, #352]	; (80008fc <fsm_manual_run+0x2a8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dd02      	ble.n	80007a8 <fsm_manual_run+0x154>
 80007a2:	4a57      	ldr	r2, [pc, #348]	; (8000900 <fsm_manual_run+0x2ac>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fc2d 	bl	8001008 <isButtonPressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	f040 8093 	bne.w	80008dc <fsm_manual_run+0x288>
				setTimer(1, 10);
 80007b6:	210a      	movs	r1, #10
 80007b8:	2001      	movs	r0, #1
 80007ba:	f001 f88d 	bl	80018d8 <setTimer>
				status = MOD_GREEN;
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <fsm_manual_run+0x298>)
 80007c0:	220d      	movs	r2, #13
 80007c2:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationGREEN / 1000;
 80007c4:	4b52      	ldr	r3, [pc, #328]	; (8000910 <fsm_manual_run+0x2bc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a4e      	ldr	r2, [pc, #312]	; (8000904 <fsm_manual_run+0x2b0>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	1192      	asrs	r2, r2, #6
 80007d0:	17db      	asrs	r3, r3, #31
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	4a48      	ldr	r2, [pc, #288]	; (80008f8 <fsm_manual_run+0x2a4>)
 80007d6:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 4;
 80007d8:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <fsm_manual_run+0x2b4>)
 80007da:	2204      	movs	r2, #4
 80007dc:	601a      	str	r2, [r3, #0]
			break;
 80007de:	e07d      	b.n	80008dc <fsm_manual_run+0x288>
			if(timerFlag[1] == 1){
 80007e0:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <fsm_manual_run+0x29c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d10b      	bne.n	8000800 <fsm_manual_run+0x1ac>
				setTimer(1, 250); // blink every 0.25s
 80007e8:	21fa      	movs	r1, #250	; 0xfa
 80007ea:	2001      	movs	r0, #1
 80007ec:	f001 f874 	bl	80018d8 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_GREEN);
 80007f0:	2103      	movs	r1, #3
 80007f2:	2007      	movs	r0, #7
 80007f4:	f000 f9d4 	bl	8000ba0 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_GREEN);
 80007f8:	2103      	movs	r1, #3
 80007fa:	2008      	movs	r0, #8
 80007fc:	f000 f9d0 	bl	8000ba0 <blinkLEDs>
			if(isButtonPressed(2) == 1){
 8000800:	2002      	movs	r0, #2
 8000802:	f000 fc01 	bl	8001008 <isButtonPressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	d114      	bne.n	8000836 <fsm_manual_run+0x1e2>
				GREEN_sec++;
 800080c:	4b41      	ldr	r3, [pc, #260]	; (8000914 <fsm_manual_run+0x2c0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a40      	ldr	r2, [pc, #256]	; (8000914 <fsm_manual_run+0x2c0>)
 8000814:	6013      	str	r3, [r2, #0]
				if(GREEN_sec >= 100){
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <fsm_manual_run+0x2c0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b63      	cmp	r3, #99	; 0x63
 800081c:	dd06      	ble.n	800082c <fsm_manual_run+0x1d8>
					GREEN_sec = 1;
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <fsm_manual_run+0x2c0>)
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 8000824:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <fsm_manual_run+0x2a4>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	e004      	b.n	8000836 <fsm_manual_run+0x1e2>
				else timerTraffic1++;
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <fsm_manual_run+0x2a4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <fsm_manual_run+0x2a4>)
 8000834:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 8000836:	2003      	movs	r0, #3
 8000838:	f000 fbe6 	bl	8001008 <isButtonPressed>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d114      	bne.n	800086c <fsm_manual_run+0x218>
				durationGREEN = GREEN_sec * 1000;
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <fsm_manual_run+0x2c0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <fsm_manual_run+0x2bc>)
 8000850:	6013      	str	r3, [r2, #0]
				if(durationGREEN < durationRED) durationYELLOW = durationRED - durationGREEN;
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <fsm_manual_run+0x2bc>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <fsm_manual_run+0x2a8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	da06      	bge.n	800086c <fsm_manual_run+0x218>
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <fsm_manual_run+0x2a8>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <fsm_manual_run+0x2bc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	4a25      	ldr	r2, [pc, #148]	; (8000900 <fsm_manual_run+0x2ac>)
 800086a:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 800086c:	2001      	movs	r0, #1
 800086e:	f000 fbcb 	bl	8001008 <isButtonPressed>
 8000872:	4603      	mov	r3, r0
 8000874:	2b01      	cmp	r3, #1
 8000876:	d133      	bne.n	80008e0 <fsm_manual_run+0x28c>
				status = RED_GREEN;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <fsm_manual_run+0x298>)
 800087a:	2215      	movs	r2, #21
 800087c:	601a      	str	r2, [r3, #0]
				durationGREEN = durationRED - durationYELLOW;
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <fsm_manual_run+0x2a8>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <fsm_manual_run+0x2ac>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <fsm_manual_run+0x2bc>)
 800088a:	6013      	str	r3, [r2, #0]
				timerTraffic1 = durationRED / 1000;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <fsm_manual_run+0x2a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <fsm_manual_run+0x2b0>)
 8000892:	fb82 1203 	smull	r1, r2, r2, r3
 8000896:	1192      	asrs	r2, r2, #6
 8000898:	17db      	asrs	r3, r3, #31
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <fsm_manual_run+0x2a4>)
 800089e:	6013      	str	r3, [r2, #0]
				timerTraffic2 = durationGREEN / 1000;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <fsm_manual_run+0x2bc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <fsm_manual_run+0x2b0>)
 80008a6:	fb82 1203 	smull	r1, r2, r2, r3
 80008aa:	1192      	asrs	r2, r2, #6
 80008ac:	17db      	asrs	r3, r3, #31
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	4a15      	ldr	r2, [pc, #84]	; (8000908 <fsm_manual_run+0x2b4>)
 80008b2:	6013      	str	r3, [r2, #0]
				updateBuffer();
 80008b4:	f000 fad6 	bl	8000e64 <updateBuffer>
				setTimer(0, durationGREEN);
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <fsm_manual_run+0x2bc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	2000      	movs	r0, #0
 80008c0:	f001 f80a 	bl	80018d8 <setTimer>
				setTimerSecond(1000);
 80008c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c8:	f000 ffea 	bl	80018a0 <setTimerSecond>
				led_index = 0;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <fsm_manual_run+0x2c4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
			break;
 80008d2:	e005      	b.n	80008e0 <fsm_manual_run+0x28c>
			break;
 80008d4:	bf00      	nop
 80008d6:	e004      	b.n	80008e2 <fsm_manual_run+0x28e>
			break;
 80008d8:	bf00      	nop
 80008da:	e002      	b.n	80008e2 <fsm_manual_run+0x28e>
			break;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <fsm_manual_run+0x28e>
			break;
 80008e0:	bf00      	nop
	}
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000018 	.word	0x20000018
 80008f0:	20000208 	.word	0x20000208
 80008f4:	20000244 	.word	0x20000244
 80008f8:	200000d8 	.word	0x200000d8
 80008fc:	2000001c 	.word	0x2000001c
 8000900:	20000020 	.word	0x20000020
 8000904:	10624dd3 	.word	0x10624dd3
 8000908:	200000dc 	.word	0x200000dc
 800090c:	20000240 	.word	0x20000240
 8000910:	20000024 	.word	0x20000024
 8000914:	2000023c 	.word	0x2000023c
 8000918:	200000e0 	.word	0x200000e0

0800091c <buzzerProcess>:
int pedestrianStatus = INIT;
int speed[5] = {400, 300, 200, 100, 50};
int indexForSpeed = 0;

// Function to handle the buzzer process
void buzzerProcess(int value) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    buzzer_value = value;
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <buzzerProcess+0x1c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
    buzzer();
 800092a:	f001 f9d1 	bl	8001cd0 <buzzer>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000f4 	.word	0x200000f4

0800093c <fsm_pedestrian_run>:

void fsm_pedestrian_run() {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
    int needMore = 5 - (durationYELLOW / 1000);
 8000942:	4b8e      	ldr	r3, [pc, #568]	; (8000b7c <fsm_pedestrian_run+0x240>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a8e      	ldr	r2, [pc, #568]	; (8000b80 <fsm_pedestrian_run+0x244>)
 8000948:	fb82 1203 	smull	r1, r2, r2, r3
 800094c:	1192      	asrs	r2, r2, #6
 800094e:	17db      	asrs	r3, r3, #31
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	3305      	adds	r3, #5
 8000954:	607b      	str	r3, [r7, #4]
    switch (pedestrianStatus) {
 8000956:	4b8b      	ldr	r3, [pc, #556]	; (8000b84 <fsm_pedestrian_run+0x248>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d039      	beq.n	80009d2 <fsm_pedestrian_run+0x96>
 800095e:	2b03      	cmp	r3, #3
 8000960:	f300 8100 	bgt.w	8000b64 <fsm_pedestrian_run+0x228>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d003      	beq.n	8000970 <fsm_pedestrian_run+0x34>
 8000968:	2b02      	cmp	r3, #2
 800096a:	f000 80d6 	beq.w	8000b1a <fsm_pedestrian_run+0x1de>
                pedestrianStatus = AUTO_GREEN;
            }
            break;

        default:
            break;
 800096e:	e0f9      	b.n	8000b64 <fsm_pedestrian_run+0x228>
            buzzerProcess(0);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff ffd3 	bl	800091c <buzzerProcess>
            indexForSpeed = 0;
 8000976:	4b84      	ldr	r3, [pc, #528]	; (8000b88 <fsm_pedestrian_run+0x24c>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
            setTimer(3, 10);
 800097c:	210a      	movs	r1, #10
 800097e:	2003      	movs	r0, #3
 8000980:	f000 ffaa 	bl	80018d8 <setTimer>
            setTimer(4, 10);
 8000984:	210a      	movs	r1, #10
 8000986:	2004      	movs	r0, #4
 8000988:	f000 ffa6 	bl	80018d8 <setTimer>
            Pedestrian_setColor(OFF_LED);
 800098c:	2005      	movs	r0, #5
 800098e:	f000 fa2d 	bl	8000dec <Pedestrian_setColor>
            if (pedestrianFlag == 1) {
 8000992:	4b7e      	ldr	r3, [pc, #504]	; (8000b8c <fsm_pedestrian_run+0x250>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	f040 80e6 	bne.w	8000b68 <fsm_pedestrian_run+0x22c>
                if (status == RED_GREEN || status == RED_YELLOW) {
 800099c:	4b7c      	ldr	r3, [pc, #496]	; (8000b90 <fsm_pedestrian_run+0x254>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b15      	cmp	r3, #21
 80009a2:	d003      	beq.n	80009ac <fsm_pedestrian_run+0x70>
 80009a4:	4b7a      	ldr	r3, [pc, #488]	; (8000b90 <fsm_pedestrian_run+0x254>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b16      	cmp	r3, #22
 80009aa:	d103      	bne.n	80009b4 <fsm_pedestrian_run+0x78>
                    pedestrianStatus = AUTO_GREEN;
 80009ac:	4b75      	ldr	r3, [pc, #468]	; (8000b84 <fsm_pedestrian_run+0x248>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e00a      	b.n	80009ca <fsm_pedestrian_run+0x8e>
                } else if (status == YELLOW_RED || status == GREEN_RED) {
 80009b4:	4b76      	ldr	r3, [pc, #472]	; (8000b90 <fsm_pedestrian_run+0x254>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b18      	cmp	r3, #24
 80009ba:	d003      	beq.n	80009c4 <fsm_pedestrian_run+0x88>
 80009bc:	4b74      	ldr	r3, [pc, #464]	; (8000b90 <fsm_pedestrian_run+0x254>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b17      	cmp	r3, #23
 80009c2:	d102      	bne.n	80009ca <fsm_pedestrian_run+0x8e>
                    pedestrianStatus = AUTO_RED;
 80009c4:	4b6f      	ldr	r3, [pc, #444]	; (8000b84 <fsm_pedestrian_run+0x248>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	601a      	str	r2, [r3, #0]
                pedestrianFlag = 0; // Make sure to restart the flag
 80009ca:	4b70      	ldr	r3, [pc, #448]	; (8000b8c <fsm_pedestrian_run+0x250>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
            break;
 80009d0:	e0ca      	b.n	8000b68 <fsm_pedestrian_run+0x22c>
            Pedestrian_setColor(AUTO_GREEN);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f000 fa0a 	bl	8000dec <Pedestrian_setColor>
            if (timerFlag[2] == 1) pedestrianStatus = INIT;
 80009d8:	4b6e      	ldr	r3, [pc, #440]	; (8000b94 <fsm_pedestrian_run+0x258>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d103      	bne.n	80009e8 <fsm_pedestrian_run+0xac>
 80009e0:	4b68      	ldr	r3, [pc, #416]	; (8000b84 <fsm_pedestrian_run+0x248>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e00a      	b.n	80009fe <fsm_pedestrian_run+0xc2>
            else if (status == YELLOW_RED || status == GREEN_RED) pedestrianStatus = AUTO_RED;
 80009e8:	4b69      	ldr	r3, [pc, #420]	; (8000b90 <fsm_pedestrian_run+0x254>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b18      	cmp	r3, #24
 80009ee:	d003      	beq.n	80009f8 <fsm_pedestrian_run+0xbc>
 80009f0:	4b67      	ldr	r3, [pc, #412]	; (8000b90 <fsm_pedestrian_run+0x254>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b17      	cmp	r3, #23
 80009f6:	d102      	bne.n	80009fe <fsm_pedestrian_run+0xc2>
 80009f8:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <fsm_pedestrian_run+0x248>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	601a      	str	r2, [r3, #0]
            if (durationYELLOW < 5000) {
 80009fe:	4b5f      	ldr	r3, [pc, #380]	; (8000b7c <fsm_pedestrian_run+0x240>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a06:	4293      	cmp	r3, r2
 8000a08:	dc55      	bgt.n	8000ab6 <fsm_pedestrian_run+0x17a>
                if (status == RED_GREEN && timerTraffic2 <= needMore) {
 8000a0a:	4b61      	ldr	r3, [pc, #388]	; (8000b90 <fsm_pedestrian_run+0x254>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b15      	cmp	r3, #21
 8000a10:	d12a      	bne.n	8000a68 <fsm_pedestrian_run+0x12c>
 8000a12:	4b61      	ldr	r3, [pc, #388]	; (8000b98 <fsm_pedestrian_run+0x25c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	db25      	blt.n	8000a68 <fsm_pedestrian_run+0x12c>
                    indexForSpeed = needMore - timerTraffic2;
 8000a1c:	4b5e      	ldr	r3, [pc, #376]	; (8000b98 <fsm_pedestrian_run+0x25c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	4a58      	ldr	r2, [pc, #352]	; (8000b88 <fsm_pedestrian_run+0x24c>)
 8000a26:	6013      	str	r3, [r2, #0]
                    if (timerFlag[3] == 1) {
 8000a28:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <fsm_pedestrian_run+0x258>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d113      	bne.n	8000a58 <fsm_pedestrian_run+0x11c>
                        buzzerProcess(128 * (1 + indexForSpeed));
 8000a30:	4b55      	ldr	r3, [pc, #340]	; (8000b88 <fsm_pedestrian_run+0x24c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	01db      	lsls	r3, r3, #7
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff6f 	bl	800091c <buzzerProcess>
                        setTimer(3, speed[indexForSpeed]); // Set the speed through array
 8000a3e:	4b52      	ldr	r3, [pc, #328]	; (8000b88 <fsm_pedestrian_run+0x24c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a56      	ldr	r2, [pc, #344]	; (8000b9c <fsm_pedestrian_run+0x260>)
 8000a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	f000 ff44 	bl	80018d8 <setTimer>
                        setTimer(4, 100); // Set delay for turn off buzzer
 8000a50:	2164      	movs	r1, #100	; 0x64
 8000a52:	2004      	movs	r0, #4
 8000a54:	f000 ff40 	bl	80018d8 <setTimer>
                    if (timerFlag[4] == 1) {
 8000a58:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <fsm_pedestrian_run+0x258>)
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d15b      	bne.n	8000b18 <fsm_pedestrian_run+0x1dc>
                        buzzerProcess(0);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff5b 	bl	800091c <buzzerProcess>
                    if (timerFlag[4] == 1) {
 8000a66:	e057      	b.n	8000b18 <fsm_pedestrian_run+0x1dc>
                } else if (status == RED_YELLOW) {
 8000a68:	4b49      	ldr	r3, [pc, #292]	; (8000b90 <fsm_pedestrian_run+0x254>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b16      	cmp	r3, #22
 8000a6e:	d17d      	bne.n	8000b6c <fsm_pedestrian_run+0x230>
                    if (timerFlag[3] == 1) {
 8000a70:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <fsm_pedestrian_run+0x258>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d116      	bne.n	8000aa6 <fsm_pedestrian_run+0x16a>
                        buzzerProcess(128 * (5 - timerTraffic2 + 1));
 8000a78:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <fsm_pedestrian_run+0x25c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1c3 0306 	rsb	r3, r3, #6
 8000a80:	01db      	lsls	r3, r3, #7
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff4a 	bl	800091c <buzzerProcess>
                        setTimer(3, speed[5 - timerTraffic2]);
 8000a88:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <fsm_pedestrian_run+0x25c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1c3 0305 	rsb	r3, r3, #5
 8000a90:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <fsm_pedestrian_run+0x260>)
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	4619      	mov	r1, r3
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 ff1d 	bl	80018d8 <setTimer>
                        setTimer(4, 100);
 8000a9e:	2164      	movs	r1, #100	; 0x64
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f000 ff19 	bl	80018d8 <setTimer>
                    if (timerFlag[4] == 1) {
 8000aa6:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <fsm_pedestrian_run+0x258>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d15e      	bne.n	8000b6c <fsm_pedestrian_run+0x230>
                        buzzerProcess(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff34 	bl	800091c <buzzerProcess>
            break;
 8000ab4:	e05a      	b.n	8000b6c <fsm_pedestrian_run+0x230>
            } else if (durationYELLOW >= 5000 && status == RED_YELLOW && timerTraffic2 <= 5) {
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <fsm_pedestrian_run+0x240>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f241 3287 	movw	r2, #4999	; 0x1387
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	dd54      	ble.n	8000b6c <fsm_pedestrian_run+0x230>
 8000ac2:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <fsm_pedestrian_run+0x254>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b16      	cmp	r3, #22
 8000ac8:	d150      	bne.n	8000b6c <fsm_pedestrian_run+0x230>
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <fsm_pedestrian_run+0x25c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	dc4c      	bgt.n	8000b6c <fsm_pedestrian_run+0x230>
                if (timerFlag[3] == 1) {
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <fsm_pedestrian_run+0x258>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d116      	bne.n	8000b08 <fsm_pedestrian_run+0x1cc>
                    buzzerProcess(128 * (5 - timerTraffic2 + 1));
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <fsm_pedestrian_run+0x25c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f1c3 0306 	rsb	r3, r3, #6
 8000ae2:	01db      	lsls	r3, r3, #7
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff19 	bl	800091c <buzzerProcess>
                    setTimer(3, speed[5 - timerTraffic2]);
 8000aea:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <fsm_pedestrian_run+0x25c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f1c3 0305 	rsb	r3, r3, #5
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <fsm_pedestrian_run+0x260>)
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	4619      	mov	r1, r3
 8000afa:	2003      	movs	r0, #3
 8000afc:	f000 feec 	bl	80018d8 <setTimer>
                    setTimer(4, 100);
 8000b00:	2164      	movs	r1, #100	; 0x64
 8000b02:	2004      	movs	r0, #4
 8000b04:	f000 fee8 	bl	80018d8 <setTimer>
                if (timerFlag[4] == 1) {
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <fsm_pedestrian_run+0x258>)
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d12d      	bne.n	8000b6c <fsm_pedestrian_run+0x230>
                    buzzerProcess(0);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff ff03 	bl	800091c <buzzerProcess>
            break;
 8000b16:	e029      	b.n	8000b6c <fsm_pedestrian_run+0x230>
 8000b18:	e028      	b.n	8000b6c <fsm_pedestrian_run+0x230>
            buzzerProcess(0);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fefe 	bl	800091c <buzzerProcess>
            indexForSpeed = 0;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <fsm_pedestrian_run+0x24c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
            setTimer(3, 10);
 8000b26:	210a      	movs	r1, #10
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 fed5 	bl	80018d8 <setTimer>
            setTimer(4, 10);
 8000b2e:	210a      	movs	r1, #10
 8000b30:	2004      	movs	r0, #4
 8000b32:	f000 fed1 	bl	80018d8 <setTimer>
            Pedestrian_setColor(AUTO_RED);
 8000b36:	2002      	movs	r0, #2
 8000b38:	f000 f958 	bl	8000dec <Pedestrian_setColor>
            if (timerFlag[2] == 1) {
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <fsm_pedestrian_run+0x258>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d103      	bne.n	8000b4c <fsm_pedestrian_run+0x210>
                pedestrianStatus = INIT;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <fsm_pedestrian_run+0x248>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
            break;
 8000b4a:	e011      	b.n	8000b70 <fsm_pedestrian_run+0x234>
            } else if (status == RED_GREEN || status == RED_YELLOW) {
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <fsm_pedestrian_run+0x254>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b15      	cmp	r3, #21
 8000b52:	d003      	beq.n	8000b5c <fsm_pedestrian_run+0x220>
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <fsm_pedestrian_run+0x254>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b16      	cmp	r3, #22
 8000b5a:	d109      	bne.n	8000b70 <fsm_pedestrian_run+0x234>
                pedestrianStatus = AUTO_GREEN;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <fsm_pedestrian_run+0x248>)
 8000b5e:	2203      	movs	r2, #3
 8000b60:	601a      	str	r2, [r3, #0]
            break;
 8000b62:	e005      	b.n	8000b70 <fsm_pedestrian_run+0x234>
            break;
 8000b64:	bf00      	nop
 8000b66:	e004      	b.n	8000b72 <fsm_pedestrian_run+0x236>
            break;
 8000b68:	bf00      	nop
 8000b6a:	e002      	b.n	8000b72 <fsm_pedestrian_run+0x236>
            break;
 8000b6c:	bf00      	nop
 8000b6e:	e000      	b.n	8000b72 <fsm_pedestrian_run+0x236>
            break;
 8000b70:	bf00      	nop
    }
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000020 	.word	0x20000020
 8000b80:	10624dd3 	.word	0x10624dd3
 8000b84:	20000000 	.word	0x20000000
 8000b88:	200000d4 	.word	0x200000d4
 8000b8c:	200000d0 	.word	0x200000d0
 8000b90:	20000018 	.word	0x20000018
 8000b94:	20000208 	.word	0x20000208
 8000b98:	200000dc 	.word	0x200000dc
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <blinkLEDs>:
 */
#include "handle_leds.h"
int blinkFlag1 = 0;
int blinkFlag2 = 0;

void blinkLEDs(int traffic, int color){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	// set flag for blinking
	if(traffic == TRAFFIC_1){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b07      	cmp	r3, #7
 8000bae:	d13c      	bne.n	8000c2a <blinkLEDs+0x8a>
		blinkFlag1 = 1 - blinkFlag1;
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <blinkLEDs+0x11c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f1c3 0301 	rsb	r3, r3, #1
 8000bb8:	4a40      	ldr	r2, [pc, #256]	; (8000cbc <blinkLEDs+0x11c>)
 8000bba:	6013      	str	r3, [r2, #0]
		switch(color){
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d017      	beq.n	8000bf2 <blinkLEDs+0x52>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	dc70      	bgt.n	8000caa <blinkLEDs+0x10a>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d003      	beq.n	8000bd6 <blinkLEDs+0x36>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d01c      	beq.n	8000c0e <blinkLEDs+0x6e>
			case AUTO_GREEN:
				if(blinkFlag1) Traffic_setColor(1, AUTO_GREEN);
				else Traffic_setColor(1, OFF_LED);
				break;
			default:
				break;
 8000bd4:	e069      	b.n	8000caa <blinkLEDs+0x10a>
				if(blinkFlag1) Traffic_setColor(1, AUTO_RED);
 8000bd6:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <blinkLEDs+0x11c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d004      	beq.n	8000be8 <blinkLEDs+0x48>
 8000bde:	2102      	movs	r1, #2
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 f86f 	bl	8000cc4 <Traffic_setColor>
				break;
 8000be6:	e065      	b.n	8000cb4 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 8000be8:	2105      	movs	r1, #5
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 f86a 	bl	8000cc4 <Traffic_setColor>
				break;
 8000bf0:	e060      	b.n	8000cb4 <blinkLEDs+0x114>
				if(blinkFlag1) Traffic_setColor(1, AUTO_YELLOW);
 8000bf2:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <blinkLEDs+0x11c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d004      	beq.n	8000c04 <blinkLEDs+0x64>
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 f861 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c02:	e057      	b.n	8000cb4 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 8000c04:	2105      	movs	r1, #5
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 f85c 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c0c:	e052      	b.n	8000cb4 <blinkLEDs+0x114>
				if(blinkFlag1) Traffic_setColor(1, AUTO_GREEN);
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <blinkLEDs+0x11c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d004      	beq.n	8000c20 <blinkLEDs+0x80>
 8000c16:	2103      	movs	r1, #3
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 f853 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c1e:	e049      	b.n	8000cb4 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 8000c20:	2105      	movs	r1, #5
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 f84e 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c28:	e044      	b.n	8000cb4 <blinkLEDs+0x114>
		}
	}
	else if(traffic == TRAFFIC_2){
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d13e      	bne.n	8000cae <blinkLEDs+0x10e>
		blinkFlag2 = 1 - blinkFlag2;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <blinkLEDs+0x120>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1c3 0301 	rsb	r3, r3, #1
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <blinkLEDs+0x120>)
 8000c3a:	6013      	str	r3, [r2, #0]
		switch(color){
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d017      	beq.n	8000c72 <blinkLEDs+0xd2>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	dc34      	bgt.n	8000cb2 <blinkLEDs+0x112>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d003      	beq.n	8000c56 <blinkLEDs+0xb6>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d01c      	beq.n	8000c8e <blinkLEDs+0xee>
			case AUTO_GREEN:
				if(blinkFlag2) Traffic_setColor(2, AUTO_GREEN);
				else Traffic_setColor(2, OFF_LED);
				break;
			default:
				break;
 8000c54:	e02d      	b.n	8000cb2 <blinkLEDs+0x112>
				if(blinkFlag2) Traffic_setColor(2, AUTO_RED);
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <blinkLEDs+0x120>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d004      	beq.n	8000c68 <blinkLEDs+0xc8>
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2002      	movs	r0, #2
 8000c62:	f000 f82f 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c66:	e025      	b.n	8000cb4 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000c68:	2105      	movs	r1, #5
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f000 f82a 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c70:	e020      	b.n	8000cb4 <blinkLEDs+0x114>
				if(blinkFlag2) Traffic_setColor(2, AUTO_YELLOW);
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <blinkLEDs+0x120>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <blinkLEDs+0xe4>
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f000 f821 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c82:	e017      	b.n	8000cb4 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000c84:	2105      	movs	r1, #5
 8000c86:	2002      	movs	r0, #2
 8000c88:	f000 f81c 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c8c:	e012      	b.n	8000cb4 <blinkLEDs+0x114>
				if(blinkFlag2) Traffic_setColor(2, AUTO_GREEN);
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <blinkLEDs+0x120>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <blinkLEDs+0x100>
 8000c96:	2103      	movs	r1, #3
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 f813 	bl	8000cc4 <Traffic_setColor>
				break;
 8000c9e:	e009      	b.n	8000cb4 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f000 f80e 	bl	8000cc4 <Traffic_setColor>
				break;
 8000ca8:	e004      	b.n	8000cb4 <blinkLEDs+0x114>
				break;
 8000caa:	bf00      	nop
 8000cac:	e002      	b.n	8000cb4 <blinkLEDs+0x114>
		}
	}
 8000cae:	bf00      	nop
 8000cb0:	e000      	b.n	8000cb4 <blinkLEDs+0x114>
				break;
 8000cb2:	bf00      	nop
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000f8 	.word	0x200000f8
 8000cc0:	200000fc 	.word	0x200000fc

08000cc4 <Traffic_setColor>:

void Traffic_setColor(int option, int color){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	if(option == 1){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d13f      	bne.n	8000d54 <Traffic_setColor+0x90>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	3b02      	subs	r3, #2
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d879      	bhi.n	8000dd0 <Traffic_setColor+0x10c>
 8000cdc:	a201      	add	r2, pc, #4	; (adr r2, 8000ce4 <Traffic_setColor+0x20>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000cf5 	.word	0x08000cf5
 8000ce8:	08000d25 	.word	0x08000d25
 8000cec:	08000d0d 	.word	0x08000d0d
 8000cf0:	08000d3d 	.word	0x08000d3d
		switch(color){
			case AUTO_RED:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfa:	483a      	ldr	r0, [pc, #232]	; (8000de4 <Traffic_setColor+0x120>)
 8000cfc:	f001 fbdb 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2108      	movs	r1, #8
 8000d04:	4838      	ldr	r0, [pc, #224]	; (8000de8 <Traffic_setColor+0x124>)
 8000d06:	f001 fbd6 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000d0a:	e066      	b.n	8000dda <Traffic_setColor+0x116>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <Traffic_setColor+0x120>)
 8000d14:	f001 fbcf 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d18:	2210      	movs	r2, #16
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	4832      	ldr	r0, [pc, #200]	; (8000de8 <Traffic_setColor+0x124>)
 8000d1e:	f001 fbca 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000d22:	e05a      	b.n	8000dda <Traffic_setColor+0x116>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2a:	482e      	ldr	r0, [pc, #184]	; (8000de4 <Traffic_setColor+0x120>)
 8000d2c:	f001 fbc3 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d30:	2210      	movs	r2, #16
 8000d32:	2108      	movs	r1, #8
 8000d34:	482c      	ldr	r0, [pc, #176]	; (8000de8 <Traffic_setColor+0x124>)
 8000d36:	f001 fbbe 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000d3a:	e04e      	b.n	8000dda <Traffic_setColor+0x116>
			case OFF_LED:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	4828      	ldr	r0, [pc, #160]	; (8000de4 <Traffic_setColor+0x120>)
 8000d44:	f001 fbb7 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	4826      	ldr	r0, [pc, #152]	; (8000de8 <Traffic_setColor+0x124>)
 8000d4e:	f001 fbb2 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000d52:	e042      	b.n	8000dda <Traffic_setColor+0x116>
			default:
				break;
		}
	}
	else if(option == 2){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d13c      	bne.n	8000dd4 <Traffic_setColor+0x110>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d83a      	bhi.n	8000dd8 <Traffic_setColor+0x114>
 8000d62:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <Traffic_setColor+0xa4>)
 8000d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d68:	08000d79 	.word	0x08000d79
 8000d6c:	08000da5 	.word	0x08000da5
 8000d70:	08000d8f 	.word	0x08000d8f
 8000d74:	08000dbb 	.word	0x08000dbb
		switch(color){
			case AUTO_RED:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000d78:	2210      	movs	r2, #16
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	481a      	ldr	r0, [pc, #104]	; (8000de8 <Traffic_setColor+0x124>)
 8000d7e:	f001 fb9a 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <Traffic_setColor+0x124>)
 8000d88:	f001 fb95 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000d8c:	e025      	b.n	8000dda <Traffic_setColor+0x116>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000d8e:	2210      	movs	r2, #16
 8000d90:	2120      	movs	r1, #32
 8000d92:	4815      	ldr	r0, [pc, #84]	; (8000de8 <Traffic_setColor+0x124>)
 8000d94:	f001 fb8f 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000d98:	2210      	movs	r2, #16
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <Traffic_setColor+0x124>)
 8000d9e:	f001 fb8a 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000da2:	e01a      	b.n	8000dda <Traffic_setColor+0x116>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2120      	movs	r1, #32
 8000da8:	480f      	ldr	r0, [pc, #60]	; (8000de8 <Traffic_setColor+0x124>)
 8000daa:	f001 fb84 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000dae:	2210      	movs	r2, #16
 8000db0:	2110      	movs	r1, #16
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <Traffic_setColor+0x124>)
 8000db4:	f001 fb7f 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000db8:	e00f      	b.n	8000dda <Traffic_setColor+0x116>
			case OFF_LED:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	480a      	ldr	r0, [pc, #40]	; (8000de8 <Traffic_setColor+0x124>)
 8000dc0:	f001 fb79 	bl	80024b6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <Traffic_setColor+0x124>)
 8000dca:	f001 fb74 	bl	80024b6 <HAL_GPIO_WritePin>
				break;
 8000dce:	e004      	b.n	8000dda <Traffic_setColor+0x116>
				break;
 8000dd0:	bf00      	nop
 8000dd2:	e002      	b.n	8000dda <Traffic_setColor+0x116>
			default:
				break;
		}
	}
 8000dd4:	bf00      	nop
 8000dd6:	e000      	b.n	8000dda <Traffic_setColor+0x116>
				break;
 8000dd8:	bf00      	nop
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40010c00 	.word	0x40010c00

08000dec <Pedestrian_setColor>:

void Pedestrian_setColor(int color){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if(color == AUTO_RED){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d10c      	bne.n	8000e14 <Pedestrian_setColor+0x28>
		// RED LED
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000dfa:	2210      	movs	r2, #16
 8000dfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <Pedestrian_setColor+0x70>)
 8000e02:	f001 fb58 	bl	80024b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0c:	4814      	ldr	r0, [pc, #80]	; (8000e60 <Pedestrian_setColor+0x74>)
 8000e0e:	f001 fb52 	bl	80024b6 <HAL_GPIO_WritePin>
	else if(color == OFF_LED){
		// OFF LED
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
	}
}
 8000e12:	e01e      	b.n	8000e52 <Pedestrian_setColor+0x66>
	else if(color == AUTO_GREEN){
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d10c      	bne.n	8000e34 <Pedestrian_setColor+0x48>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e20:	480e      	ldr	r0, [pc, #56]	; (8000e5c <Pedestrian_setColor+0x70>)
 8000e22:	f001 fb48 	bl	80024b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000e26:	2210      	movs	r2, #16
 8000e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <Pedestrian_setColor+0x74>)
 8000e2e:	f001 fb42 	bl	80024b6 <HAL_GPIO_WritePin>
}
 8000e32:	e00e      	b.n	8000e52 <Pedestrian_setColor+0x66>
	else if(color == OFF_LED){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	d10b      	bne.n	8000e52 <Pedestrian_setColor+0x66>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <Pedestrian_setColor+0x70>)
 8000e42:	f001 fb38 	bl	80024b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <Pedestrian_setColor+0x74>)
 8000e4e:	f001 fb32 	bl	80024b6 <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40010800 	.word	0x40010800

08000e64 <updateBuffer>:

void updateBuffer(){
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	led_buffer[0] = timerTraffic1 / 10;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <updateBuffer+0x70>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <updateBuffer+0x74>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1092      	asrs	r2, r2, #2
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <updateBuffer+0x78>)
 8000e7a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timerTraffic1 % 10;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <updateBuffer+0x70>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <updateBuffer+0x74>)
 8000e82:	fb83 2301 	smull	r2, r3, r3, r1
 8000e86:	109a      	asrs	r2, r3, #2
 8000e88:	17cb      	asrs	r3, r1, #31
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	1aca      	subs	r2, r1, r3
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <updateBuffer+0x78>)
 8000e98:	605a      	str	r2, [r3, #4]
	led_buffer[2] = timerTraffic2 / 10;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <updateBuffer+0x7c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <updateBuffer+0x74>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1092      	asrs	r2, r2, #2
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <updateBuffer+0x78>)
 8000eac:	6093      	str	r3, [r2, #8]
	led_buffer[3] = timerTraffic2 % 10;;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <updateBuffer+0x7c>)
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <updateBuffer+0x74>)
 8000eb4:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb8:	109a      	asrs	r2, r3, #2
 8000eba:	17cb      	asrs	r3, r1, #31
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	1aca      	subs	r2, r1, r3
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <updateBuffer+0x78>)
 8000eca:	60da      	str	r2, [r3, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	200000d8 	.word	0x200000d8
 8000ed8:	66666667 	.word	0x66666667
 8000edc:	200000e4 	.word	0x200000e4
 8000ee0:	200000dc 	.word	0x200000dc

08000ee4 <button_reading>:
int buttonTimeOut[NO_OF_BUTTONS] = {0};

uint16_t pins[NO_OF_BUTTONS] = {A0_Pin, A1_Pin, A2_Pin, A3_Pin};
GPIO_TypeDef* ports[NO_OF_BUTTONS] = {A0_GPIO_Port, A1_GPIO_Port, A2_GPIO_Port, A3_GPIO_Port};

void button_reading(){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e073      	b.n	8000fd8 <button_reading+0xf4>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000ef0:	4a3d      	ldr	r2, [pc, #244]	; (8000fe8 <button_reading+0x104>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	7819      	ldrb	r1, [r3, #0]
 8000ef8:	4a3c      	ldr	r2, [pc, #240]	; (8000fec <button_reading+0x108>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	460a      	mov	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000f02:	4a3b      	ldr	r2, [pc, #236]	; (8000ff0 <button_reading+0x10c>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	4a37      	ldr	r2, [pc, #220]	; (8000fe8 <button_reading+0x104>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	460a      	mov	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(ports[i], pins[i]);
 8000f14:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <button_reading+0x110>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f1c:	4936      	ldr	r1, [pc, #216]	; (8000ff8 <button_reading+0x114>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f001 faae 	bl	8002488 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4a2f      	ldr	r2, [pc, #188]	; (8000ff0 <button_reading+0x10c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	460a      	mov	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 8000f3a:	4a2c      	ldr	r2, [pc, #176]	; (8000fec <button_reading+0x108>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	4929      	ldr	r1, [pc, #164]	; (8000fe8 <button_reading+0x104>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	440b      	add	r3, r1
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d141      	bne.n	8000fd2 <button_reading+0xee>
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <button_reading+0x104>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4926      	ldr	r1, [pc, #152]	; (8000ff0 <button_reading+0x10c>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	440b      	add	r3, r1
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d137      	bne.n	8000fd2 <button_reading+0xee>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 8000f62:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <button_reading+0x10c>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	4924      	ldr	r1, [pc, #144]	; (8000ffc <button_reading+0x118>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	440b      	add	r3, r1
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d019      	beq.n	8000faa <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <button_reading+0x10c>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	7819      	ldrb	r1, [r3, #0]
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <button_reading+0x118>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	460a      	mov	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <button_reading+0x118>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d11e      	bne.n	8000fd2 <button_reading+0xee>
					buttonFlag[i] = 1;
 8000f94:	4a1a      	ldr	r2, [pc, #104]	; (8001000 <button_reading+0x11c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonTimeOut[i] = 100;
 8000f9e:	4a19      	ldr	r2, [pc, #100]	; (8001004 <button_reading+0x120>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2164      	movs	r1, #100	; 0x64
 8000fa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000fa8:	e013      	b.n	8000fd2 <button_reading+0xee>
				}
			}
			else{
				buttonTimeOut[i]--;
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <button_reading+0x120>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	4913      	ldr	r1, [pc, #76]	; (8001004 <button_reading+0x120>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 8000fbc:	4a11      	ldr	r2, [pc, #68]	; (8001004 <button_reading+0x120>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dc04      	bgt.n	8000fd2 <button_reading+0xee>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <button_reading+0x118>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	dd88      	ble.n	8000ef0 <button_reading+0xc>
				}
			}
		}
	}
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000104 	.word	0x20000104
 8000fec:	20000108 	.word	0x20000108
 8000ff0:	20000100 	.word	0x20000100
 8000ff4:	20000034 	.word	0x20000034
 8000ff8:	2000002c 	.word	0x2000002c
 8000ffc:	20000028 	.word	0x20000028
 8001000:	2000010c 	.word	0x2000010c
 8001004:	2000011c 	.word	0x2000011c

08001008 <isButtonPressed>:

int isButtonPressed(int button_index){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	if(button_index >= NO_OF_BUTTONS || button_index < 0) return 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b03      	cmp	r3, #3
 8001014:	dc02      	bgt.n	800101c <isButtonPressed+0x14>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da01      	bge.n	8001020 <isButtonPressed+0x18>
 800101c:	2300      	movs	r3, #0
 800101e:	e00d      	b.n	800103c <isButtonPressed+0x34>
	if(buttonFlag[button_index] == 1){
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <isButtonPressed+0x40>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d106      	bne.n	800103a <isButtonPressed+0x32>
		buttonFlag[button_index] = 0;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <isButtonPressed+0x40>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2100      	movs	r1, #0
 8001032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <isButtonPressed+0x34>
	}
	return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000010c 	.word	0x2000010c

0800104c <setBackButtonFlag>:

void setBackButtonFlag(int index){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	buttonFlag[index] = 1;
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <setBackButtonFlag+0x1c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2101      	movs	r1, #1
 800105a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	2000010c 	.word	0x2000010c

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fe64 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f860 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 f98c 	bl	8001394 <MX_GPIO_Init>
  MX_TIM2_Init();
 800107c:	f000 f89e 	bl	80011bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001080:	f000 f8e8 	bl	8001254 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001084:	f000 f95c 	bl	8001340 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <main+0xa4>)
 800108a:	f001 fe8b 	bl	8002da4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	4820      	ldr	r0, [pc, #128]	; (8001114 <main+0xa8>)
 8001092:	f001 ff31 	bl	8002ef8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 10);
 8001096:	210a      	movs	r1, #10
 8001098:	2000      	movs	r0, #0
 800109a:	f000 fc1d 	bl	80018d8 <setTimer>
  setTimer(1, 10);
 800109e:	210a      	movs	r1, #10
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 fc19 	bl	80018d8 <setTimer>
  setTimer(2, 10);
 80010a6:	210a      	movs	r1, #10
 80010a8:	2002      	movs	r0, #2
 80010aa:	f000 fc15 	bl	80018d8 <setTimer>
  setTimer(3, 10);
 80010ae:	210a      	movs	r1, #10
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 fc11 	bl	80018d8 <setTimer>
   SCH_Init();
 80010b6:	f000 f9eb 	bl	8001490 <SCH_Init>
   //blinkLEDs(TRAFFIC_1, AUTO_RED);
   SCH_Add_Task(timerRun, 0, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2100      	movs	r1, #0
 80010be:	4816      	ldr	r0, [pc, #88]	; (8001118 <main+0xac>)
 80010c0:	f000 fa4c 	bl	800155c <SCH_Add_Task>
   SCH_Add_Task(timerRunSecond, 0, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2100      	movs	r1, #0
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <main+0xb0>)
 80010ca:	f000 fa47 	bl	800155c <SCH_Add_Task>
   SCH_Add_Task(timerRun7SEG, 0, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2100      	movs	r1, #0
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <main+0xb4>)
 80010d4:	f000 fa42 	bl	800155c <SCH_Add_Task>
   SCH_Add_Task(button_reading, 0, 1);
 80010d8:	2201      	movs	r2, #1
 80010da:	2100      	movs	r1, #0
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <main+0xb8>)
 80010de:	f000 fa3d 	bl	800155c <SCH_Add_Task>
   //SCH_Add_Task(update7SEG, 1, 25);
   SCH_Add_Task(updateBuffer, 1,10);
 80010e2:	220a      	movs	r2, #10
 80010e4:	2101      	movs	r1, #1
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <main+0xbc>)
 80010e8:	f000 fa38 	bl	800155c <SCH_Add_Task>
   SCH_Add_Task(fsm_automatic_run, 0, 1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2100      	movs	r1, #0
 80010f0:	480e      	ldr	r0, [pc, #56]	; (800112c <main+0xc0>)
 80010f2:	f000 fa33 	bl	800155c <SCH_Add_Task>
   SCH_Add_Task(fsm_manual_run, 0, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2100      	movs	r1, #0
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <main+0xc4>)
 80010fc:	f000 fa2e 	bl	800155c <SCH_Add_Task>
   SCH_Add_Task(fsm_pedestrian_run, 0, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	2100      	movs	r1, #0
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <main+0xc8>)
 8001106:	f000 fa29 	bl	800155c <SCH_Add_Task>
   while (1)
   {
    /* USER CODE END WHILE */
	   SCH_Dispatch_Tasks();
 800110a:	f000 fb91 	bl	8001830 <SCH_Dispatch_Tasks>
   {
 800110e:	e7fc      	b.n	800110a <main+0x9e>
 8001110:	20000290 	.word	0x20000290
 8001114:	20000248 	.word	0x20000248
 8001118:	08001919 	.word	0x08001919
 800111c:	08001979 	.word	0x08001979
 8001120:	080019ad 	.word	0x080019ad
 8001124:	08000ee5 	.word	0x08000ee5
 8001128:	08000e65 	.word	0x08000e65
 800112c:	0800014d 	.word	0x0800014d
 8001130:	08000655 	.word	0x08000655
 8001134:	0800093d 	.word	0x0800093d

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b090      	sub	sp, #64	; 0x40
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0318 	add.w	r3, r7, #24
 8001142:	2228      	movs	r2, #40	; 0x28
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fb90 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001162:	2310      	movs	r3, #16
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001166:	2302      	movs	r3, #2
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800116a:	2300      	movs	r3, #0
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800116e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	4618      	mov	r0, r3
 800117a:	f001 f9b5 	bl	80024e8 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001184:	f000 f97e 	bl	8001484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2102      	movs	r1, #2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fc20 	bl	80029e8 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011ae:	f000 f969 	bl	8001484 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	; 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM2_Init+0x94>)
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_TIM2_Init+0x94>)
 80011e2:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80011e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_TIM2_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f0:	2263      	movs	r2, #99	; 0x63
 80011f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM2_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM2_Init+0x94>)
 8001202:	f001 fd7f 	bl	8002d04 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800120c:	f000 f93a 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_TIM2_Init+0x94>)
 800121e:	f002 f8d7 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 f92c 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM2_Init+0x94>)
 800123a:	f002 fc59 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001244:	f000 f91e 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000290 	.word	0x20000290

08001254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <MX_TIM3_Init+0xe4>)
 8001286:	4a2d      	ldr	r2, [pc, #180]	; (800133c <MX_TIM3_Init+0xe8>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <MX_TIM3_Init+0xe4>)
 800128c:	223f      	movs	r2, #63	; 0x3f
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <MX_TIM3_Init+0xe4>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <MX_TIM3_Init+0xe4>)
 8001298:	f240 32e7 	movw	r2, #999	; 0x3e7
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <MX_TIM3_Init+0xe4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <MX_TIM3_Init+0xe4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012aa:	4823      	ldr	r0, [pc, #140]	; (8001338 <MX_TIM3_Init+0xe4>)
 80012ac:	f001 fd2a 	bl	8002d04 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012b6:	f000 f8e5 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c4:	4619      	mov	r1, r3
 80012c6:	481c      	ldr	r0, [pc, #112]	; (8001338 <MX_TIM3_Init+0xe4>)
 80012c8:	f002 f882 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012d2:	f000 f8d7 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012d6:	4818      	ldr	r0, [pc, #96]	; (8001338 <MX_TIM3_Init+0xe4>)
 80012d8:	f001 fdb6 	bl	8002e48 <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012e2:	f000 f8cf 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	4619      	mov	r1, r3
 80012f4:	4810      	ldr	r0, [pc, #64]	; (8001338 <MX_TIM3_Init+0xe4>)
 80012f6:	f002 fbfb 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001300:	f000 f8c0 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	2360      	movs	r3, #96	; 0x60
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <MX_TIM3_Init+0xe4>)
 800131c:	f001 ff96 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001326:	f000 f8ad 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <MX_TIM3_Init+0xe4>)
 800132c:	f000 fbca 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8001330:	bf00      	nop
 8001332:	3738      	adds	r7, #56	; 0x38
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000248 	.word	0x20000248
 800133c:	40000400 	.word	0x40000400

08001340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_USART2_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_USART2_UART_Init+0x4c>)
 800134c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001378:	f002 fc2a 	bl	8003bd0 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 f87f 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200002d8 	.word	0x200002d8
 8001390:	40004400 	.word	0x40004400

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013de:	4822      	ldr	r0, [pc, #136]	; (8001468 <MX_GPIO_Init+0xd4>)
 80013e0:	f001 f869 	bl	80024b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <MX_GPIO_Init+0xd8>)
 80013ec:	f001 f863 	bl	80024b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80013f0:	2313      	movs	r3, #19
 80013f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	481a      	ldr	r0, [pc, #104]	; (800146c <MX_GPIO_Init+0xd8>)
 8001404:	f000 febc 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001408:	2301      	movs	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4619      	mov	r1, r3
 800141a:	4813      	ldr	r0, [pc, #76]	; (8001468 <MX_GPIO_Init+0xd4>)
 800141c:	f000 feb0 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001420:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2302      	movs	r3, #2
 8001430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4619      	mov	r1, r3
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_GPIO_Init+0xd4>)
 800143a:	f000 fea1 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 800143e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2302      	movs	r3, #2
 800144e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_GPIO_Init+0xd8>)
 8001458:	f000 fe92 	bl	8002180 <HAL_GPIO_Init>

}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	40010c00 	.word	0x40010c00
 800146c:	40010800 	.word	0x40010800

08001470 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
//	timerRun();
//	timerRun7SEG();
//	timerRunSecond();
//	button_reading();
	SCH_Update();
 8001478:	f000 f850 	bl	800151c <SCH_Update>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <SCH_Init>:


static uint32_t Get_New_Task_ID(void);


void SCH_Init(void){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	e034      	b.n	8001506 <SCH_Init+0x76>
        SCH_tasks_Array[i].pTask = 0;
 800149c:	491e      	ldr	r1, [pc, #120]	; (8001518 <SCH_Init+0x88>)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].Delay = 0;
 80014ae:	491a      	ldr	r1, [pc, #104]	; (8001518 <SCH_Init+0x88>)
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3304      	adds	r3, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].Period = 0;
 80014c2:	4915      	ldr	r1, [pc, #84]	; (8001518 <SCH_Init+0x88>)
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	3308      	adds	r3, #8
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].RunMe = 0;
 80014d6:	4910      	ldr	r1, [pc, #64]	; (8001518 <SCH_Init+0x88>)
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	330c      	adds	r3, #12
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]

        SCH_tasks_Array[i].TaskID = -1;
 80014ea:	490b      	ldr	r1, [pc, #44]	; (8001518 <SCH_Init+0x88>)
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	3310      	adds	r3, #16
 80014fa:	f04f 32ff 	mov.w	r2, #4294967295
 80014fe:	601a      	str	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3301      	adds	r3, #1
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b09      	cmp	r3, #9
 800150a:	ddc7      	ble.n	800149c <SCH_Init+0xc>
    }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	2000012c 	.word	0x2000012c

0800151c <SCH_Update>:

void SCH_Update(){
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	if (SCH_tasks_Array[0].pTask && SCH_tasks_Array[0].RunMe == 0) {
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <SCH_Update+0x3c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <SCH_Update+0x34>
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <SCH_Update+0x3c>)
 800152a:	7b1b      	ldrb	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10f      	bne.n	8001550 <SCH_Update+0x34>
		if(SCH_tasks_Array[0].Delay > 0){
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <SCH_Update+0x3c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <SCH_Update+0x26>
			SCH_tasks_Array[0].Delay = SCH_tasks_Array[0].Delay - 1;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <SCH_Update+0x3c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	3b01      	subs	r3, #1
 800153e:	4a06      	ldr	r2, [pc, #24]	; (8001558 <SCH_Update+0x3c>)
 8001540:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_Array[0].Delay == 0) {
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SCH_Update+0x3c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <SCH_Update+0x34>
			SCH_tasks_Array[0].RunMe = 1;
 800154a:	4b03      	ldr	r3, [pc, #12]	; (8001558 <SCH_Update+0x3c>)
 800154c:	2201      	movs	r2, #1
 800154e:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	2000012c 	.word	0x2000012c

0800155c <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b093      	sub	sp, #76	; 0x4c
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
    uint8_t newTaskIndex = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t sumDelay = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t newDelay = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38

    // Iterate through the task array to find the appropriate position for the new task
    for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800157c:	e0d5      	b.n	800172a <SCH_Add_Task+0x1ce>
        // Calculate the cumulative delay of existing tasks
        sumDelay += SCH_tasks_Array[newTaskIndex].Delay;
 800157e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001582:	496e      	ldr	r1, [pc, #440]	; (800173c <SCH_Add_Task+0x1e0>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3304      	adds	r3, #4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001594:	4413      	add	r3, r2
 8001596:	643b      	str	r3, [r7, #64]	; 0x40

        // Check if the cumulative delay is greater than the specified initial delay (DELAY)
        if (sumDelay > DELAY) {
 8001598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	429a      	cmp	r2, r3
 800159e:	d979      	bls.n	8001694 <SCH_Add_Task+0x138>
            // Calculate the new delay for the current task
            newDelay = DELAY - (sumDelay - SCH_tasks_Array[newTaskIndex].Delay);
 80015a0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80015a4:	4965      	ldr	r1, [pc, #404]	; (800173c <SCH_Add_Task+0x1e0>)
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3304      	adds	r3, #4
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38

            // Adjust the delay of the current task and shift existing tasks to make room
            SCH_tasks_Array[newTaskIndex].Delay = sumDelay - DELAY;
 80015be:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80015c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1ac9      	subs	r1, r1, r3
 80015c8:	485c      	ldr	r0, [pc, #368]	; (800173c <SCH_Add_Task+0x1e0>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4403      	add	r3, r0
 80015d4:	3304      	adds	r3, #4
 80015d6:	6019      	str	r1, [r3, #0]
            for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--) {
 80015d8:	2309      	movs	r3, #9
 80015da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015de:	e01b      	b.n	8001618 <SCH_Add_Task+0xbc>
                SCH_tasks_Array[i] = SCH_tasks_Array[i - 1];
 80015e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80015ea:	4854      	ldr	r0, [pc, #336]	; (800173c <SCH_Add_Task+0x1e0>)
 80015ec:	460b      	mov	r3, r1
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4418      	add	r0, r3
 80015f6:	4951      	ldr	r1, [pc, #324]	; (800173c <SCH_Add_Task+0x1e0>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	4604      	mov	r4, r0
 8001604:	461d      	mov	r5, r3
 8001606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160a:	682b      	ldr	r3, [r5, #0]
 800160c:	6023      	str	r3, [r4, #0]
            for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--) {
 800160e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001612:	3b01      	subs	r3, #1
 8001614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001618:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800161c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001620:	429a      	cmp	r2, r3
 8001622:	d8dd      	bhi.n	80015e0 <SCH_Add_Task+0x84>
            }

            // Add the new task at the appropriate position in the array
            SCH_tasks_Array[newTaskIndex] = (sTask){
 8001624:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
                .pTask = pFunction,
                .Delay = newDelay,
                .Period = PERIOD,
                .RunMe = (newDelay == 0),  // Set RunMe flag based on newDelay
 8001628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461d      	mov	r5, r3
                .TaskID = Get_New_Task_ID(),  // Assign a unique TaskID
 8001636:	f000 f923 	bl	8001880 <Get_New_Task_ID>
 800163a:	4601      	mov	r1, r0
            SCH_tasks_Array[newTaskIndex] = (sTask){
 800163c:	4a3f      	ldr	r2, [pc, #252]	; (800173c <SCH_Add_Task+0x1e0>)
 800163e:	4623      	mov	r3, r4
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4423      	add	r3, r4
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	4a3b      	ldr	r2, [pc, #236]	; (800173c <SCH_Add_Task+0x1e0>)
 800164e:	4623      	mov	r3, r4
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4423      	add	r3, r4
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	3304      	adds	r3, #4
 800165a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4a37      	ldr	r2, [pc, #220]	; (800173c <SCH_Add_Task+0x1e0>)
 8001660:	4623      	mov	r3, r4
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4423      	add	r3, r4
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3308      	adds	r3, #8
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	4a32      	ldr	r2, [pc, #200]	; (800173c <SCH_Add_Task+0x1e0>)
 8001672:	4623      	mov	r3, r4
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4423      	add	r3, r4
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	330c      	adds	r3, #12
 800167e:	462a      	mov	r2, r5
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	4a2e      	ldr	r2, [pc, #184]	; (800173c <SCH_Add_Task+0x1e0>)
 8001684:	4623      	mov	r3, r4
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4423      	add	r3, r4
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3310      	adds	r3, #16
 8001690:	6019      	str	r1, [r3, #0]
 8001692:	e04f      	b.n	8001734 <SCH_Add_Task+0x1d8>
            };

            return;
        } else {
            // If the current task slot is empty, add the new task to this slot
            if (SCH_tasks_Array[newTaskIndex].pTask == 0) {
 8001694:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001698:	4928      	ldr	r1, [pc, #160]	; (800173c <SCH_Add_Task+0x1e0>)
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d13a      	bne.n	8001720 <SCH_Add_Task+0x1c4>
                SCH_tasks_Array[newTaskIndex] = (sTask){
 80016aa:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
                    .pTask = pFunction,
                    .Delay = DELAY - sumDelay,
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b2:	1ad5      	subs	r5, r2, r3
                    .Period = PERIOD,
                    .RunMe = (DELAY - sumDelay == 0),  // Set RunMe flag based on remaining delay
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b8:	429a      	cmp	r2, r3
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461e      	mov	r6, r3
                    .TaskID = Get_New_Task_ID(),  // Assign a unique TaskID
 80016c4:	f000 f8dc 	bl	8001880 <Get_New_Task_ID>
 80016c8:	4601      	mov	r1, r0
                SCH_tasks_Array[newTaskIndex] = (sTask){
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <SCH_Add_Task+0x1e0>)
 80016cc:	4623      	mov	r3, r4
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4423      	add	r3, r4
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <SCH_Add_Task+0x1e0>)
 80016dc:	4623      	mov	r3, r4
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4423      	add	r3, r4
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3304      	adds	r3, #4
 80016e8:	601d      	str	r5, [r3, #0]
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <SCH_Add_Task+0x1e0>)
 80016ec:	4623      	mov	r3, r4
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4423      	add	r3, r4
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3308      	adds	r3, #8
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <SCH_Add_Task+0x1e0>)
 80016fe:	4623      	mov	r3, r4
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4423      	add	r3, r4
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	330c      	adds	r3, #12
 800170a:	4632      	mov	r2, r6
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <SCH_Add_Task+0x1e0>)
 8001710:	4623      	mov	r3, r4
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4423      	add	r3, r4
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3310      	adds	r3, #16
 800171c:	6019      	str	r1, [r3, #0]
 800171e:	e009      	b.n	8001734 <SCH_Add_Task+0x1d8>
    for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001720:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001724:	3301      	adds	r3, #1
 8001726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800172a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800172e:	2b09      	cmp	r3, #9
 8001730:	f67f af25 	bls.w	800157e <SCH_Add_Task+0x22>

                return;
            }
        }
    }
}
 8001734:	374c      	adds	r7, #76	; 0x4c
 8001736:	46bd      	mov	sp, r7
 8001738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173a:	bf00      	nop
 800173c:	2000012c 	.word	0x2000012c

08001740 <SCH_Delete_Task>:



void SCH_Delete_Task(uint32_t taskID) {
 8001740:	b4b0      	push	{r4, r5, r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    // Check if the provided task ID is NO_TASK_ID (invalid).
    if (taskID == NO_TASK_ID) return;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d068      	beq.n	8001820 <SCH_Delete_Task+0xe0>

    // Iterate through the task array to find the task with the specified TaskID
    for (uint8_t taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++) {
 800174e:	2300      	movs	r3, #0
 8001750:	77fb      	strb	r3, [r7, #31]
 8001752:	e061      	b.n	8001818 <SCH_Delete_Task+0xd8>
        if (SCH_tasks_Array[taskIndex].TaskID == taskID) {
 8001754:	7ffa      	ldrb	r2, [r7, #31]
 8001756:	4935      	ldr	r1, [pc, #212]	; (800182c <SCH_Delete_Task+0xec>)
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	3310      	adds	r3, #16
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	d152      	bne.n	8001812 <SCH_Delete_Task+0xd2>
            // Task found, proceed with deletion

            // If the current task is not the last one and the next task is not empty,
            // adjust the delay of the next task to include the delay of the deleted task.
            if (taskIndex < SCH_MAX_TASKS - 1 && SCH_tasks_Array[taskIndex + 1].pTask != 0) {
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	2b08      	cmp	r3, #8
 8001770:	d828      	bhi.n	80017c4 <SCH_Delete_Task+0x84>
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	492d      	ldr	r1, [pc, #180]	; (800182c <SCH_Delete_Task+0xec>)
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01d      	beq.n	80017c4 <SCH_Delete_Task+0x84>
                SCH_tasks_Array[taskIndex + 1].Delay += SCH_tasks_Array[taskIndex].Delay;
 8001788:	7ffb      	ldrb	r3, [r7, #31]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	4927      	ldr	r1, [pc, #156]	; (800182c <SCH_Delete_Task+0xec>)
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3304      	adds	r3, #4
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	7ffa      	ldrb	r2, [r7, #31]
 800179e:	4823      	ldr	r0, [pc, #140]	; (800182c <SCH_Delete_Task+0xec>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4403      	add	r3, r0
 80017aa:	3304      	adds	r3, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	7ffa      	ldrb	r2, [r7, #31]
 80017b0:	3201      	adds	r2, #1
 80017b2:	4419      	add	r1, r3
 80017b4:	481d      	ldr	r0, [pc, #116]	; (800182c <SCH_Delete_Task+0xec>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4403      	add	r3, r0
 80017c0:	3304      	adds	r3, #4
 80017c2:	6019      	str	r1, [r3, #0]
            }

            // Shift the remaining tasks to fill the gap created by the deleted task
            for (uint8_t j = taskIndex; j < SCH_MAX_TASKS - 1; j++) {
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	77bb      	strb	r3, [r7, #30]
 80017c8:	e017      	b.n	80017fa <SCH_Delete_Task+0xba>
                SCH_tasks_Array[j] = SCH_tasks_Array[j + 1];
 80017ca:	7fbb      	ldrb	r3, [r7, #30]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	7fb9      	ldrb	r1, [r7, #30]
 80017d0:	4816      	ldr	r0, [pc, #88]	; (800182c <SCH_Delete_Task+0xec>)
 80017d2:	460b      	mov	r3, r1
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4418      	add	r0, r3
 80017dc:	4913      	ldr	r1, [pc, #76]	; (800182c <SCH_Delete_Task+0xec>)
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	4604      	mov	r4, r0
 80017ea:	461d      	mov	r5, r3
 80017ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f0:	682b      	ldr	r3, [r5, #0]
 80017f2:	6023      	str	r3, [r4, #0]
            for (uint8_t j = taskIndex; j < SCH_MAX_TASKS - 1; j++) {
 80017f4:	7fbb      	ldrb	r3, [r7, #30]
 80017f6:	3301      	adds	r3, #1
 80017f8:	77bb      	strb	r3, [r7, #30]
 80017fa:	7fbb      	ldrb	r3, [r7, #30]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d9e4      	bls.n	80017ca <SCH_Delete_Task+0x8a>
            }

            // Clear the last task slot to ensure no leftover data
            SCH_tasks_Array[SCH_MAX_TASKS - 1] = (sTask){0};
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <SCH_Delete_Task+0xec>)
 8001802:	33b4      	adds	r3, #180	; 0xb4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	e007      	b.n	8001822 <SCH_Delete_Task+0xe2>
    for (uint8_t taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++) {
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	3301      	adds	r3, #1
 8001816:	77fb      	strb	r3, [r7, #31]
 8001818:	7ffb      	ldrb	r3, [r7, #31]
 800181a:	2b09      	cmp	r3, #9
 800181c:	d99a      	bls.n	8001754 <SCH_Delete_Task+0x14>

            return;
        }
    }

    return; // Task ID not found, exit the function
 800181e:	e000      	b.n	8001822 <SCH_Delete_Task+0xe2>
    if (taskID == NO_TASK_ID) return;
 8001820:	bf00      	nop
}
 8001822:	3724      	adds	r7, #36	; 0x24
 8001824:	46bd      	mov	sp, r7
 8001826:	bcb0      	pop	{r4, r5, r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000012c 	.word	0x2000012c

08001830 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(){
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
	if(SCH_tasks_Array[0].RunMe > 0) {
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <SCH_Dispatch_Tasks+0x4c>)
 8001838:	7b1b      	ldrb	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d019      	beq.n	8001872 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_Array[0].pTask)(); // Function pointer -> Run task
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <SCH_Dispatch_Tasks+0x4c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4798      	blx	r3
		SCH_tasks_Array[0].RunMe = 0; // Set back RunMe flag
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <SCH_Dispatch_Tasks+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_Array[0];
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <SCH_Dispatch_Tasks+0x4c>)
 800184c:	1d3c      	adds	r4, r7, #4
 800184e:	461d      	mov	r5, r3
 8001850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff70 	bl	8001740 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe75 	bl	800155c <SCH_Add_Task>
		}
	}
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bdb0      	pop	{r4, r5, r7, pc}
 800187a:	bf00      	nop
 800187c:	2000012c 	.word	0x2000012c

08001880 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID() {
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
    return ++newTaskID;
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <Get_New_Task_ID+0x1c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <Get_New_Task_ID+0x1c>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b03      	ldr	r3, [pc, #12]	; (800189c <Get_New_Task_ID+0x1c>)
 8001890:	681b      	ldr	r3, [r3, #0]
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200001f4 	.word	0x200001f4

080018a0 <setTimerSecond>:
void setTimer7SEG(int duration){
	counter7SEG = duration/PERIOD;
	timer7SEG = 0;
}

void setTimerSecond(int duration){
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	counterSecond = duration/PERIOD;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <setTimerSecond+0x2c>)
 80018ac:	fb82 1203 	smull	r1, r2, r2, r3
 80018b0:	1092      	asrs	r2, r2, #2
 80018b2:	17db      	asrs	r3, r3, #31
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <setTimerSecond+0x30>)
 80018b8:	6013      	str	r3, [r2, #0]
	timerSecond = 0;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <setTimerSecond+0x34>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	66666667 	.word	0x66666667
 80018d0:	20000204 	.word	0x20000204
 80018d4:	20000200 	.word	0x20000200

080018d8 <setTimer>:

void setTimer(int index, int duration){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	counter[index] = duration/PERIOD;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4a09      	ldr	r2, [pc, #36]	; (800190c <setTimer+0x34>)
 80018e6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ea:	1092      	asrs	r2, r2, #2
 80018ec:	17db      	asrs	r3, r3, #31
 80018ee:	1ad2      	subs	r2, r2, r3
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <setTimer+0x38>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index] = 0;
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <setTimer+0x3c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2100      	movs	r1, #0
 80018fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	66666667 	.word	0x66666667
 8001910:	2000021c 	.word	0x2000021c
 8001914:	20000208 	.word	0x20000208

08001918 <timerRun>:

void timerRun(){
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	e01c      	b.n	800195e <timerRun+0x46>
		if (counter[i] > 0){
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <timerRun+0x58>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	2b00      	cmp	r3, #0
 800192e:	dd13      	ble.n	8001958 <timerRun+0x40>
			counter[i]--;
 8001930:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <timerRun+0x58>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <timerRun+0x58>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (counter[i] <= 0){
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <timerRun+0x58>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dc04      	bgt.n	8001958 <timerRun+0x40>
				timerFlag[i] = 1;
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <timerRun+0x5c>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2101      	movs	r1, #1
 8001954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b04      	cmp	r3, #4
 8001962:	dddf      	ble.n	8001924 <timerRun+0xc>
			}
		}
	}
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	2000021c 	.word	0x2000021c
 8001974:	20000208 	.word	0x20000208

08001978 <timerRunSecond>:

void timerRunSecond(){
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	if (counterSecond > 0){
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <timerRunSecond+0x2c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dd0b      	ble.n	800199c <timerRunSecond+0x24>
		counterSecond--;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <timerRunSecond+0x2c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <timerRunSecond+0x2c>)
 800198c:	6013      	str	r3, [r2, #0]
		if (counterSecond <= 0){
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <timerRunSecond+0x2c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	dc02      	bgt.n	800199c <timerRunSecond+0x24>
			timerSecond = 1;
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <timerRunSecond+0x30>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000204 	.word	0x20000204
 80019a8:	20000200 	.word	0x20000200

080019ac <timerRun7SEG>:

void timerRun7SEG(){
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
	if (counter7SEG > 0){
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <timerRun7SEG+0x2c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	dd0b      	ble.n	80019d0 <timerRun7SEG+0x24>
		counter7SEG--;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <timerRun7SEG+0x2c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <timerRun7SEG+0x2c>)
 80019c0:	6013      	str	r3, [r2, #0]
		if (counter7SEG <= 0){
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <timerRun7SEG+0x2c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	dc02      	bgt.n	80019d0 <timerRun7SEG+0x24>
			timer7SEG = 1;
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <timerRun7SEG+0x30>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
		}
	}
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	200001fc 	.word	0x200001fc
 80019dc:	200001f8 	.word	0x200001f8

080019e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_MspInit+0x5c>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_MspInit+0x5c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6193      	str	r3, [r2, #24]
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_MspInit+0x5c>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_MspInit+0x5c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_MspInit+0x5c>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_MspInit+0x5c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_MspInit+0x60>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_MspInit+0x60>)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000

08001a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a54:	d114      	bne.n	8001a80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_TIM_Base_MspInit+0x78>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_TIM_Base_MspInit+0x78>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_TIM_Base_MspInit+0x78>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	201c      	movs	r0, #28
 8001a74:	f000 fa9b 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a78:	201c      	movs	r0, #28
 8001a7a:	f000 fab4 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a7e:	e018      	b.n	8001ab2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d113      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <HAL_TIM_Base_MspInit+0x78>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <HAL_TIM_Base_MspInit+0x78>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_TIM_Base_MspInit+0x78>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	201d      	movs	r0, #29
 8001aa8:	f000 fa81 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aac:	201d      	movs	r0, #29
 8001aae:	f000 fa9a 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40000400 	.word	0x40000400

08001ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_TIM_MspPostInit+0x58>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d117      	bne.n	8001b14 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_TIM_MspPostInit+0x5c>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_TIM_MspPostInit+0x5c>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_TIM_MspPostInit+0x5c>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <HAL_TIM_MspPostInit+0x60>)
 8001b10:	f000 fb36 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010800 	.word	0x40010800

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_UART_MspInit+0x98>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d137      	bne.n	8001bb8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_UART_MspInit+0x9c>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_UART_MspInit+0x9c>)
 8001b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_UART_MspInit+0x9c>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_UART_MspInit+0x9c>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_UART_MspInit+0x9c>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_UART_MspInit+0x9c>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <HAL_UART_MspInit+0xa0>)
 8001b8c:	f000 faf8 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b90:	2308      	movs	r3, #8
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <HAL_UART_MspInit+0xa0>)
 8001ba4:	f000 faec 	bl	8002180 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2026      	movs	r0, #38	; 0x26
 8001bae:	f000 f9fe 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb2:	2026      	movs	r0, #38	; 0x26
 8001bb4:	f000 fa17 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40004400 	.word	0x40004400
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010800 	.word	0x40010800

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c12:	f000 f8d9 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM2_IRQHandler+0x10>)
 8001c22:	f001 fa0b 	bl	800303c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000290 	.word	0x20000290

08001c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM3_IRQHandler+0x10>)
 8001c36:	f001 fa01 	bl	800303c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000248 	.word	0x20000248

08001c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <USART2_IRQHandler+0x10>)
 8001c4a:	f002 f895 	bl	8003d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200002d8 	.word	0x200002d8

08001c58 <_sbrk>:
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
 8001c88:	f002 fdc6 	bl	8004818 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20005000 	.word	0x20005000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000230 	.word	0x20000230
 8001cc0:	20000338 	.word	0x20000338

08001cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <buzzer>:
 *  Created on: Nov 29, 2023
 *      Author: olkmphy
 */
#include "uart_buzzer.h"

void buzzer(){
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	// Implement buzzer here...
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzer_value);
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <buzzer+0x18>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <buzzer+0x1c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200000f4 	.word	0x200000f4
 8001cec:	20000248 	.word	0x20000248

08001cf0 <Reset_Handler>:
 8001cf0:	f7ff ffe8 	bl	8001cc4 <SystemInit>
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <LoopFillZerobss+0xe>)
 8001cf6:	490c      	ldr	r1, [pc, #48]	; (8001d28 <LoopFillZerobss+0x12>)
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <LoopFillZerobss+0x16>)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:
 8001cfe:	58d4      	ldr	r4, [r2, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:
 8001d04:	18c4      	adds	r4, r0, r3
 8001d06:	428c      	cmp	r4, r1
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <LoopFillZerobss+0x1a>)
 8001d0c:	4c09      	ldr	r4, [pc, #36]	; (8001d34 <LoopFillZerobss+0x1e>)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:
 8001d16:	42a2      	cmp	r2, r4
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>
 8001d1a:	f002 fd83 	bl	8004824 <__libc_init_array>
 8001d1e:	f7ff f9a5 	bl	800106c <main>
 8001d22:	4770      	bx	lr
 8001d24:	20000000 	.word	0x20000000
 8001d28:	200000b4 	.word	0x200000b4
 8001d2c:	08005194 	.word	0x08005194
 8001d30:	200000b4 	.word	0x200000b4
 8001d34:	20000334 	.word	0x20000334

08001d38 <ADC1_2_IRQHandler>:
 8001d38:	e7fe      	b.n	8001d38 <ADC1_2_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_Init+0x28>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_Init+0x28>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f923 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	200f      	movs	r0, #15
 8001d54:	f000 f808 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7ff fe42 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x54>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x58>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f93b 	bl	8002002 <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 f903 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <HAL_InitTick+0x5c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000044 	.word	0x20000044
 8001dc0:	2000004c 	.word	0x2000004c
 8001dc4:	20000048 	.word	0x20000048

08001dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_IncTick+0x1c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_IncTick+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_IncTick+0x20>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	2000004c 	.word	0x2000004c
 8001de8:	20000320 	.word	0x20000320

08001dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <HAL_GetTick+0x10>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000320 	.word	0x20000320

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4906      	ldr	r1, [pc, #24]	; (8001e98 <__NVIC_EnableIRQ+0x34>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff90 	bl	8001e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff2d 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff42 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff90 	bl	8001ef0 <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5f 	bl	8001e9c <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff35 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d008      	beq.n	8002044 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2204      	movs	r2, #4
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e020      	b.n	8002086 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 020e 	bic.w	r2, r2, #14
 8002052:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d005      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2204      	movs	r2, #4
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e051      	b.n	8002158 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 020e 	bic.w	r2, r2, #14
 80020c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a22      	ldr	r2, [pc, #136]	; (8002164 <HAL_DMA_Abort_IT+0xd4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d029      	beq.n	8002132 <HAL_DMA_Abort_IT+0xa2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_DMA_Abort_IT+0xd8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_DMA_Abort_IT+0x9e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_DMA_Abort_IT+0xdc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01a      	beq.n	8002128 <HAL_DMA_Abort_IT+0x98>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_DMA_Abort_IT+0xe0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d012      	beq.n	8002122 <HAL_DMA_Abort_IT+0x92>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_DMA_Abort_IT+0xe4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00a      	beq.n	800211c <HAL_DMA_Abort_IT+0x8c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_DMA_Abort_IT+0xe8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d102      	bne.n	8002116 <HAL_DMA_Abort_IT+0x86>
 8002110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002114:	e00e      	b.n	8002134 <HAL_DMA_Abort_IT+0xa4>
 8002116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800211a:	e00b      	b.n	8002134 <HAL_DMA_Abort_IT+0xa4>
 800211c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002120:	e008      	b.n	8002134 <HAL_DMA_Abort_IT+0xa4>
 8002122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002126:	e005      	b.n	8002134 <HAL_DMA_Abort_IT+0xa4>
 8002128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800212c:	e002      	b.n	8002134 <HAL_DMA_Abort_IT+0xa4>
 800212e:	2310      	movs	r3, #16
 8002130:	e000      	b.n	8002134 <HAL_DMA_Abort_IT+0xa4>
 8002132:	2301      	movs	r3, #1
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_DMA_Abort_IT+0xec>)
 8002136:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
    } 
  }
  return status;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40020008 	.word	0x40020008
 8002168:	4002001c 	.word	0x4002001c
 800216c:	40020030 	.word	0x40020030
 8002170:	40020044 	.word	0x40020044
 8002174:	40020058 	.word	0x40020058
 8002178:	4002006c 	.word	0x4002006c
 800217c:	40020000 	.word	0x40020000

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b08b      	sub	sp, #44	; 0x2c
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e169      	b.n	8002468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002194:	2201      	movs	r2, #1
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 8158 	bne.w	8002462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a9a      	ldr	r2, [pc, #616]	; (8002420 <HAL_GPIO_Init+0x2a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d05e      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021bc:	4a98      	ldr	r2, [pc, #608]	; (8002420 <HAL_GPIO_Init+0x2a0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d875      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021c2:	4a98      	ldr	r2, [pc, #608]	; (8002424 <HAL_GPIO_Init+0x2a4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d058      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021c8:	4a96      	ldr	r2, [pc, #600]	; (8002424 <HAL_GPIO_Init+0x2a4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d86f      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021ce:	4a96      	ldr	r2, [pc, #600]	; (8002428 <HAL_GPIO_Init+0x2a8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d052      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021d4:	4a94      	ldr	r2, [pc, #592]	; (8002428 <HAL_GPIO_Init+0x2a8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d869      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021da:	4a94      	ldr	r2, [pc, #592]	; (800242c <HAL_GPIO_Init+0x2ac>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04c      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021e0:	4a92      	ldr	r2, [pc, #584]	; (800242c <HAL_GPIO_Init+0x2ac>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d863      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021e6:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_GPIO_Init+0x2b0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d046      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021ec:	4a90      	ldr	r2, [pc, #576]	; (8002430 <HAL_GPIO_Init+0x2b0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d85d      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d82a      	bhi.n	800224c <HAL_GPIO_Init+0xcc>
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d859      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <HAL_GPIO_Init+0x80>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	0800227b 	.word	0x0800227b
 8002204:	08002255 	.word	0x08002255
 8002208:	08002267 	.word	0x08002267
 800220c:	080022a9 	.word	0x080022a9
 8002210:	080022af 	.word	0x080022af
 8002214:	080022af 	.word	0x080022af
 8002218:	080022af 	.word	0x080022af
 800221c:	080022af 	.word	0x080022af
 8002220:	080022af 	.word	0x080022af
 8002224:	080022af 	.word	0x080022af
 8002228:	080022af 	.word	0x080022af
 800222c:	080022af 	.word	0x080022af
 8002230:	080022af 	.word	0x080022af
 8002234:	080022af 	.word	0x080022af
 8002238:	080022af 	.word	0x080022af
 800223c:	080022af 	.word	0x080022af
 8002240:	080022af 	.word	0x080022af
 8002244:	0800225d 	.word	0x0800225d
 8002248:	08002271 	.word	0x08002271
 800224c:	4a79      	ldr	r2, [pc, #484]	; (8002434 <HAL_GPIO_Init+0x2b4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002252:	e02c      	b.n	80022ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	623b      	str	r3, [r7, #32]
          break;
 800225a:	e029      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	3304      	adds	r3, #4
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e024      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	3308      	adds	r3, #8
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e01f      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	330c      	adds	r3, #12
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e01a      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002282:	2304      	movs	r3, #4
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e013      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002290:	2308      	movs	r3, #8
 8002292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	611a      	str	r2, [r3, #16]
          break;
 800229a:	e009      	b.n	80022b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800229c:	2308      	movs	r3, #8
 800229e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	615a      	str	r2, [r3, #20]
          break;
 80022a6:	e003      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          break;
 80022ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2bff      	cmp	r3, #255	; 0xff
 80022b4:	d801      	bhi.n	80022ba <HAL_GPIO_Init+0x13a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	e001      	b.n	80022be <HAL_GPIO_Init+0x13e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d802      	bhi.n	80022cc <HAL_GPIO_Init+0x14c>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	e002      	b.n	80022d2 <HAL_GPIO_Init+0x152>
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3b08      	subs	r3, #8
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	210f      	movs	r1, #15
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	6a39      	ldr	r1, [r7, #32]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80b1 	beq.w	8002462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002300:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a4c      	ldr	r2, [pc, #304]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_GPIO_Init+0x2bc>)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <HAL_GPIO_Init+0x2c0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_GPIO_Init+0x1ec>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_GPIO_Init+0x2c4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00d      	beq.n	8002368 <HAL_GPIO_Init+0x1e8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <HAL_GPIO_Init+0x2c8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0x1e4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3d      	ldr	r2, [pc, #244]	; (800244c <HAL_GPIO_Init+0x2cc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_GPIO_Init+0x1e0>
 800235c:	2303      	movs	r3, #3
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002360:	2304      	movs	r3, #4
 8002362:	e004      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002364:	2302      	movs	r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 800236c:	2300      	movs	r3, #0
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800237e:	492f      	ldr	r1, [pc, #188]	; (800243c <HAL_GPIO_Init+0x2bc>)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	492c      	ldr	r1, [pc, #176]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4928      	ldr	r1, [pc, #160]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	4922      	ldr	r1, [pc, #136]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	491e      	ldr	r1, [pc, #120]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4918      	ldr	r1, [pc, #96]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4914      	ldr	r1, [pc, #80]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002400:	4013      	ands	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d021      	beq.n	8002454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	490e      	ldr	r1, [pc, #56]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e021      	b.n	8002462 <HAL_GPIO_Init+0x2e2>
 800241e:	bf00      	nop
 8002420:	10320000 	.word	0x10320000
 8002424:	10310000 	.word	0x10310000
 8002428:	10220000 	.word	0x10220000
 800242c:	10210000 	.word	0x10210000
 8002430:	10120000 	.word	0x10120000
 8002434:	10110000 	.word	0x10110000
 8002438:	40021000 	.word	0x40021000
 800243c:	40010000 	.word	0x40010000
 8002440:	40010800 	.word	0x40010800
 8002444:	40010c00 	.word	0x40010c00
 8002448:	40011000 	.word	0x40011000
 800244c:	40011400 	.word	0x40011400
 8002450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_GPIO_Init+0x304>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	43db      	mvns	r3, r3
 800245c:	4909      	ldr	r1, [pc, #36]	; (8002484 <HAL_GPIO_Init+0x304>)
 800245e:	4013      	ands	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	3301      	adds	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f ae8e 	bne.w	8002194 <HAL_GPIO_Init+0x14>
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	372c      	adds	r7, #44	; 0x2c
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40010400 	.word	0x40010400

08002488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e001      	b.n	80024aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	807b      	strh	r3, [r7, #2]
 80024c2:	4613      	mov	r3, r2
 80024c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c6:	787b      	ldrb	r3, [r7, #1]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d2:	e003      	b.n	80024dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d4:	887b      	ldrh	r3, [r7, #2]
 80024d6:	041a      	lsls	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	611a      	str	r2, [r3, #16]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e26c      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002508:	4b92      	ldr	r3, [pc, #584]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00c      	beq.n	800252e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002514:	4b8f      	ldr	r3, [pc, #572]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
 8002520:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d10b      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06c      	beq.n	8002614 <HAL_RCC_OscConfig+0x12c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d168      	bne.n	8002614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e246      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x76>
 8002550:	4b80      	ldr	r3, [pc, #512]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a7f      	ldr	r2, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e02e      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x98>
 8002566:	4b7b      	ldr	r3, [pc, #492]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7a      	ldr	r2, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b78      	ldr	r3, [pc, #480]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a77      	ldr	r2, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0xbc>
 800258a:	4b72      	ldr	r3, [pc, #456]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a71      	ldr	r2, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6e      	ldr	r2, [pc, #440]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 80025a4:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a67      	ldr	r2, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fc12 	bl	8001dec <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff fc0e 	bl	8001dec <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1fa      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5d      	ldr	r3, [pc, #372]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xe4>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fbfe 	bl	8001dec <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff fbfa 	bl	8001dec <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1e6      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x10c>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002622:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
 800263a:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1ba      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4939      	ldr	r1, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff fbb3 	bl	8001dec <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff fbaf 	bl	8001dec <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e19b      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4927      	ldr	r1, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fb92 	bl	8001dec <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7ff fb8e 	bl	8001dec <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e17a      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03a      	beq.n	800276c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_RCC_OscConfig+0x274>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff fb72 	bl	8001dec <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7ff fb6e 	bl	8001dec <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e15a      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272a:	2001      	movs	r0, #1
 800272c:	f000 facc 	bl	8002cc8 <RCC_Delay>
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_RCC_OscConfig+0x274>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7ff fb58 	bl	8001dec <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273e:	e00f      	b.n	8002760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7ff fb54 	bl	8001dec <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d908      	bls.n	8002760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e140      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	42420000 	.word	0x42420000
 800275c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b9e      	ldr	r3, [pc, #632]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e9      	bne.n	8002740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a6 	beq.w	80028c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b97      	ldr	r3, [pc, #604]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b94      	ldr	r3, [pc, #592]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a93      	ldr	r2, [pc, #588]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
 8002796:	4b91      	ldr	r3, [pc, #580]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b8e      	ldr	r3, [pc, #568]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7ff fb15 	bl	8001dec <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7ff fb11 	bl	8001dec <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0fd      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x312>
 80027ec:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	e02d      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x334>
 8002802:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a75      	ldr	r2, [pc, #468]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b73      	ldr	r3, [pc, #460]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a72      	ldr	r2, [pc, #456]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	e01c      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b05      	cmp	r3, #5
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0x356>
 8002824:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a6c      	ldr	r2, [pc, #432]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a69      	ldr	r2, [pc, #420]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e00b      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	4b64      	ldr	r3, [pc, #400]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a63      	ldr	r2, [pc, #396]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff fac5 	bl	8001dec <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7ff fac1 	bl	8001dec <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0ab      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	4b57      	ldr	r3, [pc, #348]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ee      	beq.n	8002866 <HAL_RCC_OscConfig+0x37e>
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7ff faaf 	bl	8001dec <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7ff faab 	bl	8001dec <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e095      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ee      	bne.n	8002892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a47      	ldr	r2, [pc, #284]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8081 	beq.w	80029d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	4b42      	ldr	r3, [pc, #264]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d061      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d146      	bne.n	8002972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_OscConfig+0x4fc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7ff fa7f 	bl	8001dec <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7ff fa7b 	bl	8001dec <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e067      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d108      	bne.n	800292c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	492d      	ldr	r1, [pc, #180]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a19      	ldr	r1, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	430b      	orrs	r3, r1
 800293e:	4927      	ldr	r1, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_OscConfig+0x4fc>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7ff fa4f 	bl	8001dec <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7ff fa4b 	bl	8001dec <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e037      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x46a>
 8002970:	e02f      	b.n	80029d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <HAL_RCC_OscConfig+0x4fc>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fa38 	bl	8001dec <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff fa34 	bl	8001dec <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e020      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x498>
 800299e:	e018      	b.n	80029d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e013      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
 80029e4:	42420060 	.word	0x42420060

080029e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0d0      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4965      	ldr	r1, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d040      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d115      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e073      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06b      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4936      	ldr	r1, [pc, #216]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7ff f988 	bl	8001dec <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7ff f984 	bl	8001dec <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e053      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 020c 	and.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1eb      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d210      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0207 	bic.w	r2, r3, #7
 8002b1e:	4922      	ldr	r1, [pc, #136]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f8e6 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	0800512c 	.word	0x0800512c
 8002bb4:	20000044 	.word	0x20000044
 8002bb8:	20000048 	.word	0x20000048

08002bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x30>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bea:	e027      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bee:	613b      	str	r3, [r7, #16]
      break;
 8002bf0:	e027      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	0c9b      	lsrs	r3, r3, #18
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0c5b      	lsrs	r3, r3, #17
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1e:	fb02 f203 	mul.w	r2, r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e004      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	613b      	str	r3, [r7, #16]
      break;
 8002c3a:	e002      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c3e:	613b      	str	r3, [r7, #16]
      break;
 8002c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c42:	693b      	ldr	r3, [r7, #16]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	007a1200 	.word	0x007a1200
 8002c58:	08005144 	.word	0x08005144
 8002c5c:	08005154 	.word	0x08005154
 8002c60:	003d0900 	.word	0x003d0900

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b02      	ldr	r3, [pc, #8]	; (8002c74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	20000044 	.word	0x20000044

08002c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c7c:	f7ff fff2 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	0800513c 	.word	0x0800513c

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca4:	f7ff ffde 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0adb      	lsrs	r3, r3, #11
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4903      	ldr	r1, [pc, #12]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	0800513c 	.word	0x0800513c

08002cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <RCC_Delay+0x34>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <RCC_Delay+0x38>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a5b      	lsrs	r3, r3, #9
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce4:	bf00      	nop
  }
  while (Delay --);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e5a      	subs	r2, r3, #1
 8002cea:	60fa      	str	r2, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f9      	bne.n	8002ce4 <RCC_Delay+0x1c>
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000044 	.word	0x20000044
 8002d00:	10624dd3 	.word	0x10624dd3

08002d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe fe8a 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fc30 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e03a      	b.n	8002e32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_TIM_Base_Start_IT+0x98>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x58>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d009      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x58>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <HAL_TIM_Base_Start_IT+0x9c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x58>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <HAL_TIM_Base_Start_IT+0xa0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d111      	bne.n	8002e20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d010      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	e007      	b.n	8002e30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800

08002e48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e041      	b.n	8002ede <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f839 	bl	8002ee6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f000 fb8e 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x24>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e022      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d109      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e015      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d109      	bne.n	8002f50 <HAL_TIM_PWM_Start+0x58>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e008      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e05e      	b.n	8003028 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x82>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f78:	e013      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Start+0x92>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f88:	e00b      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Start+0xa2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f98:	e003      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fd7c 	bl	8003aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_TIM_PWM_Start+0x138>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d107      	bne.n	8002fca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_TIM_PWM_Start+0x138>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIM_PWM_Start+0x13c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_TIM_PWM_Start+0x140>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d111      	bne.n	8003016 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d010      	beq.n	8003026 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	e007      	b.n	8003026 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800

0800303c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0202 	mvn.w	r2, #2
 8003068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa76 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa69 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa78 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0204 	mvn.w	r2, #4
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa4c 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa3f 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fa4e 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0208 	mvn.w	r2, #8
 8003110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2204      	movs	r2, #4
 8003116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa22 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa15 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa24 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b10      	cmp	r3, #16
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b10      	cmp	r3, #16
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0210 	mvn.w	r2, #16
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2208      	movs	r2, #8
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9f8 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9eb 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f9fa 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0201 	mvn.w	r2, #1
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe f958 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fce9 	bl	8003bbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d10e      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d107      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9be 	bl	8003594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b20      	cmp	r3, #32
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b20      	cmp	r3, #32
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0220 	mvn.w	r2, #32
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fcb4 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003266:	2302      	movs	r3, #2
 8003268:	e0ae      	b.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f200 809f 	bhi.w	80033b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080033b9 	.word	0x080033b9
 8003288:	080033b9 	.word	0x080033b9
 800328c:	080033b9 	.word	0x080033b9
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080033b9 	.word	0x080033b9
 8003298:	080033b9 	.word	0x080033b9
 800329c:	080033b9 	.word	0x080033b9
 80032a0:	08003337 	.word	0x08003337
 80032a4:	080033b9 	.word	0x080033b9
 80032a8:	080033b9 	.word	0x080033b9
 80032ac:	080033b9 	.word	0x080033b9
 80032b0:	08003377 	.word	0x08003377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f9d6 	bl	800366c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0208 	orr.w	r2, r2, #8
 80032ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6999      	ldr	r1, [r3, #24]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
      break;
 80032f2:	e064      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa1c 	bl	8003738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
      break;
 8003334:	e043      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fa65 	bl	800380c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0208 	orr.w	r2, r2, #8
 8003350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	61da      	str	r2, [r3, #28]
      break;
 8003374:	e023      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 faaf 	bl	80038e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
      break;
 80033b6:	e002      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
      break;
 80033bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0b4      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003424:	d03e      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342a:	f200 8087 	bhi.w	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	f000 8086 	beq.w	8003542 <HAL_TIM_ConfigClockSource+0x172>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343a:	d87f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b70      	cmp	r3, #112	; 0x70
 800343e:	d01a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xa6>
 8003440:	2b70      	cmp	r3, #112	; 0x70
 8003442:	d87b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b60      	cmp	r3, #96	; 0x60
 8003446:	d050      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11a>
 8003448:	2b60      	cmp	r3, #96	; 0x60
 800344a:	d877      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b50      	cmp	r3, #80	; 0x50
 800344e:	d03c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xfa>
 8003450:	2b50      	cmp	r3, #80	; 0x50
 8003452:	d873      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d058      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13a>
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d86f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b30      	cmp	r3, #48	; 0x30
 800345e:	d064      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	d86b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d060      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d867      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d05a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	e062      	b.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f000 faf0 	bl	8003a6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e04f      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f000 fad9 	bl	8003a6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fa50 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2150      	movs	r1, #80	; 0x50
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 faa7 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e02c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fa6e 	bl	80039d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2160      	movs	r1, #96	; 0x60
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa97 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003508:	e01c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fa30 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fa87 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003528:	e00c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f000 fa7e 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 800353a:	e003      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e000      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
	...

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a29      	ldr	r2, [pc, #164]	; (8003660 <TIM_Base_SetConfig+0xb8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_Base_SetConfig+0x30>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0x30>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <TIM_Base_SetConfig+0xbc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0x30>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0xc0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d108      	bne.n	80035ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <TIM_Base_SetConfig+0xb8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <TIM_Base_SetConfig+0xbc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <TIM_Base_SetConfig+0xc0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <TIM_Base_SetConfig+0xb8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	615a      	str	r2, [r3, #20]
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800

0800366c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 0201 	bic.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 0302 	bic.w	r3, r3, #2
 80036b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <TIM_OC1_SetConfig+0xc8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10c      	bne.n	80036e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0308 	bic.w	r3, r3, #8
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a13      	ldr	r2, [pc, #76]	; (8003734 <TIM_OC1_SetConfig+0xc8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40012c00 	.word	0x40012c00

08003738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 0210 	bic.w	r2, r3, #16
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0320 	bic.w	r3, r3, #32
 8003782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <TIM_OC2_SetConfig+0xd0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10d      	bne.n	80037b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <TIM_OC2_SetConfig+0xd0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d113      	bne.n	80037e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00

0800380c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <TIM_OC3_SetConfig+0xd0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10d      	bne.n	8003886 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <TIM_OC3_SetConfig+0xd0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d113      	bne.n	80038b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	621a      	str	r2, [r3, #32]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40012c00 	.word	0x40012c00

080038e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800392a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <TIM_OC4_SetConfig+0x98>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d109      	bne.n	8003954 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0210 	bic.w	r2, r3, #16
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f043 0307 	orr.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2201      	movs	r2, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1a      	ldr	r2, [r3, #32]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1a      	ldr	r2, [r3, #32]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e046      	b.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d009      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e042      	b.n	8003c68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd ff96 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fd71 	bl	80046fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d16d      	bne.n	8003d6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Transmit+0x2c>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e066      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2221      	movs	r2, #33	; 0x21
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cae:	f7fe f89d 	bl	8001dec <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	d108      	bne.n	8003cdc <HAL_UART_Transmit+0x6c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e003      	b.n	8003ce4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ce4:	e02a      	b.n	8003d3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 faf9 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e007      	b.n	8003d2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1cf      	bne.n	8003ce6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fac9 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b0ba      	sub	sp, #232	; 0xe8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10f      	bne.n	8003dde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_UART_IRQHandler+0x66>
 8003dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fbd1 	bl	800457e <UART_Receive_IT>
      return;
 8003ddc:	e25b      	b.n	8004296 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80de 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x22c>
 8003de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80d1 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_UART_IRQHandler+0xae>
 8003e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_UART_IRQHandler+0xd2>
 8003e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f043 0202 	orr.w	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_UART_IRQHandler+0xf6>
 8003e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d011      	beq.n	8003e9e <HAL_UART_IRQHandler+0x126>
 8003e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d105      	bne.n	8003e92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f043 0208 	orr.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 81f2 	beq.w	800428c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x14e>
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fb5c 	bl	800457e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf14      	ite	ne
 8003ed4:	2301      	movne	r3, #1
 8003ed6:	2300      	moveq	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x17a>
 8003eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d04f      	beq.n	8003f92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fa66 	bl	80043c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d041      	beq.n	8003f8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1d9      	bne.n	8003f06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d013      	beq.n	8003f82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	4a7e      	ldr	r2, [pc, #504]	; (8004158 <HAL_UART_IRQHandler+0x3e0>)
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe f892 	bl	8002090 <HAL_DMA_Abort_IT>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d016      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	e00e      	b.n	8003fa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f99c 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	e00a      	b.n	8003fa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f998 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	e006      	b.n	8003fa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f994 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f9e:	e175      	b.n	800428c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	bf00      	nop
    return;
 8003fa2:	e173      	b.n	800428c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	f040 814f 	bne.w	800424c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8148 	beq.w	800424c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8141 	beq.w	800424c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80b6 	beq.w	800415c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ffc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8145 	beq.w	8004290 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800400a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800400e:	429a      	cmp	r2, r3
 8004010:	f080 813e 	bcs.w	8004290 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800401a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b20      	cmp	r3, #32
 8004024:	f000 8088 	beq.w	8004138 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800403e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004054:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004058:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004060:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800406c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1d9      	bne.n	8004028 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3314      	adds	r3, #20
 800407a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3314      	adds	r3, #20
 8004094:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004098:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800409c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e1      	bne.n	8004074 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e3      	bne.n	80040b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004108:	f023 0310 	bic.w	r3, r3, #16
 800410c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800411a:	65ba      	str	r2, [r7, #88]	; 0x58
 800411c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd ff71 	bl	800201a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004146:	b29b      	uxth	r3, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8bf 	bl	80042d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004154:	e09c      	b.n	8004290 <HAL_UART_IRQHandler+0x518>
 8004156:	bf00      	nop
 8004158:	08004489 	.word	0x08004489
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004164:	b29b      	uxth	r3, r3
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 808e 	beq.w	8004294 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8089 	beq.w	8004294 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041a6:	647a      	str	r2, [r7, #68]	; 0x44
 80041a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e3      	bne.n	8004182 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	623b      	str	r3, [r7, #32]
   return(result);
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041de:	633a      	str	r2, [r7, #48]	; 0x30
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e3      	bne.n	80041ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004224:	61fa      	str	r2, [r7, #28]
 8004226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	69b9      	ldr	r1, [r7, #24]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	617b      	str	r3, [r7, #20]
   return(result);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e3      	bne.n	8004200 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f844 	bl	80042d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800424a:	e023      	b.n	8004294 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <HAL_UART_IRQHandler+0x4f4>
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f923 	bl	80044b0 <UART_Transmit_IT>
    return;
 800426a:	e014      	b.n	8004296 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00e      	beq.n	8004296 <HAL_UART_IRQHandler+0x51e>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f962 	bl	800454e <UART_EndTransmit_IT>
    return;
 800428a:	e004      	b.n	8004296 <HAL_UART_IRQHandler+0x51e>
    return;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <HAL_UART_IRQHandler+0x51e>
      return;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_UART_IRQHandler+0x51e>
      return;
 8004294:	bf00      	nop
  }
}
 8004296:	37e8      	adds	r7, #232	; 0xe8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b090      	sub	sp, #64	; 0x40
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	e050      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d04c      	beq.n	800439c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
 8004308:	f7fd fd70 	bl	8001dec <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004314:	429a      	cmp	r2, r3
 8004316:	d241      	bcs.n	800439c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004338:	637a      	str	r2, [r7, #52]	; 0x34
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800433e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	613b      	str	r3, [r7, #16]
   return(result);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3314      	adds	r3, #20
 800436a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800436c:	623a      	str	r2, [r7, #32]
 800436e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	69f9      	ldr	r1, [r7, #28]
 8004372:	6a3a      	ldr	r2, [r7, #32]
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	61bb      	str	r3, [r7, #24]
   return(result);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e00f      	b.n	80043bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d09f      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	; 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b095      	sub	sp, #84	; 0x54
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ec:	643a      	str	r2, [r7, #64]	; 0x40
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004420:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e5      	bne.n	8004400 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	2b01      	cmp	r3, #1
 800443a:	d119      	bne.n	8004470 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	60bb      	str	r3, [r7, #8]
   return(result);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f023 0310 	bic.w	r3, r3, #16
 8004452:	647b      	str	r3, [r7, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445c:	61ba      	str	r2, [r7, #24]
 800445e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6979      	ldr	r1, [r7, #20]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	613b      	str	r3, [r7, #16]
   return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800447e:	bf00      	nop
 8004480:	3754      	adds	r7, #84	; 0x54
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff ff0c 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b21      	cmp	r3, #33	; 0x21
 80044c2:	d13e      	bne.n	8004542 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044cc:	d114      	bne.n	80044f8 <UART_Transmit_IT+0x48>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d110      	bne.n	80044f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	621a      	str	r2, [r3, #32]
 80044f6:	e008      	b.n	800450a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	1c59      	adds	r1, r3, #1
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6211      	str	r1, [r2, #32]
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29b      	uxth	r3, r3
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4619      	mov	r1, r3
 8004518:	84d1      	strh	r1, [r2, #38]	; 0x26
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800452c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800453c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004564:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fe94 	bl	800429c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b08c      	sub	sp, #48	; 0x30
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b22      	cmp	r3, #34	; 0x22
 8004590:	f040 80ae 	bne.w	80046f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d117      	bne.n	80045ce <UART_Receive_IT+0x50>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d113      	bne.n	80045ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
 80045cc:	e026      	b.n	800461c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e0:	d007      	beq.n	80045f2 <UART_Receive_IT+0x74>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <UART_Receive_IT+0x82>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e008      	b.n	8004612 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460c:	b2da      	uxtb	r2, r3
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29b      	uxth	r3, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4619      	mov	r1, r3
 800462a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800462c:	2b00      	cmp	r3, #0
 800462e:	d15d      	bne.n	80046ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0220 	bic.w	r2, r2, #32
 800463e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800464e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	2b01      	cmp	r3, #1
 8004674:	d135      	bne.n	80046e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	613b      	str	r3, [r7, #16]
   return(result);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f023 0310 	bic.w	r3, r3, #16
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	623a      	str	r2, [r7, #32]
 800469e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	69f9      	ldr	r1, [r7, #28]
 80046a2:	6a3a      	ldr	r2, [r7, #32]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e5      	bne.n	800467c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d10a      	bne.n	80046d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fdf9 	bl	80042d2 <HAL_UARTEx_RxEventCallback>
 80046e0:	e002      	b.n	80046e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fde3 	bl	80042ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e002      	b.n	80046f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3730      	adds	r7, #48	; 0x30
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004736:	f023 030c 	bic.w	r3, r3, #12
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	430b      	orrs	r3, r1
 8004742:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2c      	ldr	r2, [pc, #176]	; (8004810 <UART_SetConfig+0x114>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7fe fa9c 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	e002      	b.n	8004772 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800476c:	f7fe fa84 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8004770:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <UART_SetConfig+0x118>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	0119      	lsls	r1, r3, #4
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <UART_SetConfig+0x118>)
 80047aa:	fba3 0302 	umull	r0, r3, r3, r2
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2064      	movs	r0, #100	; 0x64
 80047b2:	fb00 f303 	mul.w	r3, r0, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	3332      	adds	r3, #50	; 0x32
 80047bc:	4a15      	ldr	r2, [pc, #84]	; (8004814 <UART_SetConfig+0x118>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c8:	4419      	add	r1, r3
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009a      	lsls	r2, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <UART_SetConfig+0x118>)
 80047e2:	fba3 0302 	umull	r0, r3, r3, r2
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2064      	movs	r0, #100	; 0x64
 80047ea:	fb00 f303 	mul.w	r3, r0, r3
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	3332      	adds	r3, #50	; 0x32
 80047f4:	4a07      	ldr	r2, [pc, #28]	; (8004814 <UART_SetConfig+0x118>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	440a      	add	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40013800 	.word	0x40013800
 8004814:	51eb851f 	.word	0x51eb851f

08004818 <__errno>:
 8004818:	4b01      	ldr	r3, [pc, #4]	; (8004820 <__errno+0x8>)
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000050 	.word	0x20000050

08004824 <__libc_init_array>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	2600      	movs	r6, #0
 8004828:	4d0c      	ldr	r5, [pc, #48]	; (800485c <__libc_init_array+0x38>)
 800482a:	4c0d      	ldr	r4, [pc, #52]	; (8004860 <__libc_init_array+0x3c>)
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	42a6      	cmp	r6, r4
 8004832:	d109      	bne.n	8004848 <__libc_init_array+0x24>
 8004834:	f000 fc5c 	bl	80050f0 <_init>
 8004838:	2600      	movs	r6, #0
 800483a:	4d0a      	ldr	r5, [pc, #40]	; (8004864 <__libc_init_array+0x40>)
 800483c:	4c0a      	ldr	r4, [pc, #40]	; (8004868 <__libc_init_array+0x44>)
 800483e:	1b64      	subs	r4, r4, r5
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	42a6      	cmp	r6, r4
 8004844:	d105      	bne.n	8004852 <__libc_init_array+0x2e>
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	f855 3b04 	ldr.w	r3, [r5], #4
 800484c:	4798      	blx	r3
 800484e:	3601      	adds	r6, #1
 8004850:	e7ee      	b.n	8004830 <__libc_init_array+0xc>
 8004852:	f855 3b04 	ldr.w	r3, [r5], #4
 8004856:	4798      	blx	r3
 8004858:	3601      	adds	r6, #1
 800485a:	e7f2      	b.n	8004842 <__libc_init_array+0x1e>
 800485c:	0800518c 	.word	0x0800518c
 8004860:	0800518c 	.word	0x0800518c
 8004864:	0800518c 	.word	0x0800518c
 8004868:	08005190 	.word	0x08005190

0800486c <memset>:
 800486c:	4603      	mov	r3, r0
 800486e:	4402      	add	r2, r0
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	f803 1b01 	strb.w	r1, [r3], #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <siprintf>:
 800487c:	b40e      	push	{r1, r2, r3}
 800487e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004882:	b500      	push	{lr}
 8004884:	b09c      	sub	sp, #112	; 0x70
 8004886:	ab1d      	add	r3, sp, #116	; 0x74
 8004888:	9002      	str	r0, [sp, #8]
 800488a:	9006      	str	r0, [sp, #24]
 800488c:	9107      	str	r1, [sp, #28]
 800488e:	9104      	str	r1, [sp, #16]
 8004890:	4808      	ldr	r0, [pc, #32]	; (80048b4 <siprintf+0x38>)
 8004892:	4909      	ldr	r1, [pc, #36]	; (80048b8 <siprintf+0x3c>)
 8004894:	f853 2b04 	ldr.w	r2, [r3], #4
 8004898:	9105      	str	r1, [sp, #20]
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	a902      	add	r1, sp, #8
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	f000 f868 	bl	8004974 <_svfiprintf_r>
 80048a4:	2200      	movs	r2, #0
 80048a6:	9b02      	ldr	r3, [sp, #8]
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	b01c      	add	sp, #112	; 0x70
 80048ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b0:	b003      	add	sp, #12
 80048b2:	4770      	bx	lr
 80048b4:	20000050 	.word	0x20000050
 80048b8:	ffff0208 	.word	0xffff0208

080048bc <__ssputs_r>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	688e      	ldr	r6, [r1, #8]
 80048c2:	4682      	mov	sl, r0
 80048c4:	429e      	cmp	r6, r3
 80048c6:	460c      	mov	r4, r1
 80048c8:	4690      	mov	r8, r2
 80048ca:	461f      	mov	r7, r3
 80048cc:	d838      	bhi.n	8004940 <__ssputs_r+0x84>
 80048ce:	898a      	ldrh	r2, [r1, #12]
 80048d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048d4:	d032      	beq.n	800493c <__ssputs_r+0x80>
 80048d6:	6825      	ldr	r5, [r4, #0]
 80048d8:	6909      	ldr	r1, [r1, #16]
 80048da:	3301      	adds	r3, #1
 80048dc:	eba5 0901 	sub.w	r9, r5, r1
 80048e0:	6965      	ldr	r5, [r4, #20]
 80048e2:	444b      	add	r3, r9
 80048e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ec:	106d      	asrs	r5, r5, #1
 80048ee:	429d      	cmp	r5, r3
 80048f0:	bf38      	it	cc
 80048f2:	461d      	movcc	r5, r3
 80048f4:	0553      	lsls	r3, r2, #21
 80048f6:	d531      	bpl.n	800495c <__ssputs_r+0xa0>
 80048f8:	4629      	mov	r1, r5
 80048fa:	f000 fb53 	bl	8004fa4 <_malloc_r>
 80048fe:	4606      	mov	r6, r0
 8004900:	b950      	cbnz	r0, 8004918 <__ssputs_r+0x5c>
 8004902:	230c      	movs	r3, #12
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	f8ca 3000 	str.w	r3, [sl]
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004918:	464a      	mov	r2, r9
 800491a:	6921      	ldr	r1, [r4, #16]
 800491c:	f000 face 	bl	8004ebc <memcpy>
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492a:	81a3      	strh	r3, [r4, #12]
 800492c:	6126      	str	r6, [r4, #16]
 800492e:	444e      	add	r6, r9
 8004930:	6026      	str	r6, [r4, #0]
 8004932:	463e      	mov	r6, r7
 8004934:	6165      	str	r5, [r4, #20]
 8004936:	eba5 0509 	sub.w	r5, r5, r9
 800493a:	60a5      	str	r5, [r4, #8]
 800493c:	42be      	cmp	r6, r7
 800493e:	d900      	bls.n	8004942 <__ssputs_r+0x86>
 8004940:	463e      	mov	r6, r7
 8004942:	4632      	mov	r2, r6
 8004944:	4641      	mov	r1, r8
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	f000 fac6 	bl	8004ed8 <memmove>
 800494c:	68a3      	ldr	r3, [r4, #8]
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	1b9b      	subs	r3, r3, r6
 8004952:	4432      	add	r2, r6
 8004954:	2000      	movs	r0, #0
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	6022      	str	r2, [r4, #0]
 800495a:	e7db      	b.n	8004914 <__ssputs_r+0x58>
 800495c:	462a      	mov	r2, r5
 800495e:	f000 fb7b 	bl	8005058 <_realloc_r>
 8004962:	4606      	mov	r6, r0
 8004964:	2800      	cmp	r0, #0
 8004966:	d1e1      	bne.n	800492c <__ssputs_r+0x70>
 8004968:	4650      	mov	r0, sl
 800496a:	6921      	ldr	r1, [r4, #16]
 800496c:	f000 face 	bl	8004f0c <_free_r>
 8004970:	e7c7      	b.n	8004902 <__ssputs_r+0x46>
	...

08004974 <_svfiprintf_r>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	4698      	mov	r8, r3
 800497a:	898b      	ldrh	r3, [r1, #12]
 800497c:	4607      	mov	r7, r0
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	460d      	mov	r5, r1
 8004982:	4614      	mov	r4, r2
 8004984:	b09d      	sub	sp, #116	; 0x74
 8004986:	d50e      	bpl.n	80049a6 <_svfiprintf_r+0x32>
 8004988:	690b      	ldr	r3, [r1, #16]
 800498a:	b963      	cbnz	r3, 80049a6 <_svfiprintf_r+0x32>
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	f000 fb09 	bl	8004fa4 <_malloc_r>
 8004992:	6028      	str	r0, [r5, #0]
 8004994:	6128      	str	r0, [r5, #16]
 8004996:	b920      	cbnz	r0, 80049a2 <_svfiprintf_r+0x2e>
 8004998:	230c      	movs	r3, #12
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	e0d1      	b.n	8004b46 <_svfiprintf_r+0x1d2>
 80049a2:	2340      	movs	r3, #64	; 0x40
 80049a4:	616b      	str	r3, [r5, #20]
 80049a6:	2300      	movs	r3, #0
 80049a8:	9309      	str	r3, [sp, #36]	; 0x24
 80049aa:	2320      	movs	r3, #32
 80049ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b0:	2330      	movs	r3, #48	; 0x30
 80049b2:	f04f 0901 	mov.w	r9, #1
 80049b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b60 <_svfiprintf_r+0x1ec>
 80049be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c2:	4623      	mov	r3, r4
 80049c4:	469a      	mov	sl, r3
 80049c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ca:	b10a      	cbz	r2, 80049d0 <_svfiprintf_r+0x5c>
 80049cc:	2a25      	cmp	r2, #37	; 0x25
 80049ce:	d1f9      	bne.n	80049c4 <_svfiprintf_r+0x50>
 80049d0:	ebba 0b04 	subs.w	fp, sl, r4
 80049d4:	d00b      	beq.n	80049ee <_svfiprintf_r+0x7a>
 80049d6:	465b      	mov	r3, fp
 80049d8:	4622      	mov	r2, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	4638      	mov	r0, r7
 80049de:	f7ff ff6d 	bl	80048bc <__ssputs_r>
 80049e2:	3001      	adds	r0, #1
 80049e4:	f000 80aa 	beq.w	8004b3c <_svfiprintf_r+0x1c8>
 80049e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ea:	445a      	add	r2, fp
 80049ec:	9209      	str	r2, [sp, #36]	; 0x24
 80049ee:	f89a 3000 	ldrb.w	r3, [sl]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80a2 	beq.w	8004b3c <_svfiprintf_r+0x1c8>
 80049f8:	2300      	movs	r3, #0
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295
 80049fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a02:	f10a 0a01 	add.w	sl, sl, #1
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	9307      	str	r3, [sp, #28]
 8004a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a10:	4654      	mov	r4, sl
 8004a12:	2205      	movs	r2, #5
 8004a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a18:	4851      	ldr	r0, [pc, #324]	; (8004b60 <_svfiprintf_r+0x1ec>)
 8004a1a:	f000 fa41 	bl	8004ea0 <memchr>
 8004a1e:	9a04      	ldr	r2, [sp, #16]
 8004a20:	b9d8      	cbnz	r0, 8004a5a <_svfiprintf_r+0xe6>
 8004a22:	06d0      	lsls	r0, r2, #27
 8004a24:	bf44      	itt	mi
 8004a26:	2320      	movmi	r3, #32
 8004a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a2c:	0711      	lsls	r1, r2, #28
 8004a2e:	bf44      	itt	mi
 8004a30:	232b      	movmi	r3, #43	; 0x2b
 8004a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a36:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3c:	d015      	beq.n	8004a6a <_svfiprintf_r+0xf6>
 8004a3e:	4654      	mov	r4, sl
 8004a40:	2000      	movs	r0, #0
 8004a42:	f04f 0c0a 	mov.w	ip, #10
 8004a46:	9a07      	ldr	r2, [sp, #28]
 8004a48:	4621      	mov	r1, r4
 8004a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a4e:	3b30      	subs	r3, #48	; 0x30
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d94e      	bls.n	8004af2 <_svfiprintf_r+0x17e>
 8004a54:	b1b0      	cbz	r0, 8004a84 <_svfiprintf_r+0x110>
 8004a56:	9207      	str	r2, [sp, #28]
 8004a58:	e014      	b.n	8004a84 <_svfiprintf_r+0x110>
 8004a5a:	eba0 0308 	sub.w	r3, r0, r8
 8004a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a62:	4313      	orrs	r3, r2
 8004a64:	46a2      	mov	sl, r4
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	e7d2      	b.n	8004a10 <_svfiprintf_r+0x9c>
 8004a6a:	9b03      	ldr	r3, [sp, #12]
 8004a6c:	1d19      	adds	r1, r3, #4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	9103      	str	r1, [sp, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bfbb      	ittet	lt
 8004a76:	425b      	neglt	r3, r3
 8004a78:	f042 0202 	orrlt.w	r2, r2, #2
 8004a7c:	9307      	strge	r3, [sp, #28]
 8004a7e:	9307      	strlt	r3, [sp, #28]
 8004a80:	bfb8      	it	lt
 8004a82:	9204      	strlt	r2, [sp, #16]
 8004a84:	7823      	ldrb	r3, [r4, #0]
 8004a86:	2b2e      	cmp	r3, #46	; 0x2e
 8004a88:	d10c      	bne.n	8004aa4 <_svfiprintf_r+0x130>
 8004a8a:	7863      	ldrb	r3, [r4, #1]
 8004a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8e:	d135      	bne.n	8004afc <_svfiprintf_r+0x188>
 8004a90:	9b03      	ldr	r3, [sp, #12]
 8004a92:	3402      	adds	r4, #2
 8004a94:	1d1a      	adds	r2, r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9203      	str	r2, [sp, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfb8      	it	lt
 8004a9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aa2:	9305      	str	r3, [sp, #20]
 8004aa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b70 <_svfiprintf_r+0x1fc>
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	4650      	mov	r0, sl
 8004aac:	7821      	ldrb	r1, [r4, #0]
 8004aae:	f000 f9f7 	bl	8004ea0 <memchr>
 8004ab2:	b140      	cbz	r0, 8004ac6 <_svfiprintf_r+0x152>
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	eba0 000a 	sub.w	r0, r0, sl
 8004aba:	fa03 f000 	lsl.w	r0, r3, r0
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	3401      	adds	r4, #1
 8004ac2:	4303      	orrs	r3, r0
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aca:	2206      	movs	r2, #6
 8004acc:	4825      	ldr	r0, [pc, #148]	; (8004b64 <_svfiprintf_r+0x1f0>)
 8004ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ad2:	f000 f9e5 	bl	8004ea0 <memchr>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d038      	beq.n	8004b4c <_svfiprintf_r+0x1d8>
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <_svfiprintf_r+0x1f4>)
 8004adc:	bb1b      	cbnz	r3, 8004b26 <_svfiprintf_r+0x1b2>
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	3307      	adds	r3, #7
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	9303      	str	r3, [sp, #12]
 8004aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aec:	4433      	add	r3, r6
 8004aee:	9309      	str	r3, [sp, #36]	; 0x24
 8004af0:	e767      	b.n	80049c2 <_svfiprintf_r+0x4e>
 8004af2:	460c      	mov	r4, r1
 8004af4:	2001      	movs	r0, #1
 8004af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afa:	e7a5      	b.n	8004a48 <_svfiprintf_r+0xd4>
 8004afc:	2300      	movs	r3, #0
 8004afe:	f04f 0c0a 	mov.w	ip, #10
 8004b02:	4619      	mov	r1, r3
 8004b04:	3401      	adds	r4, #1
 8004b06:	9305      	str	r3, [sp, #20]
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b0e:	3a30      	subs	r2, #48	; 0x30
 8004b10:	2a09      	cmp	r2, #9
 8004b12:	d903      	bls.n	8004b1c <_svfiprintf_r+0x1a8>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0c5      	beq.n	8004aa4 <_svfiprintf_r+0x130>
 8004b18:	9105      	str	r1, [sp, #20]
 8004b1a:	e7c3      	b.n	8004aa4 <_svfiprintf_r+0x130>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	2301      	movs	r3, #1
 8004b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b24:	e7f0      	b.n	8004b08 <_svfiprintf_r+0x194>
 8004b26:	ab03      	add	r3, sp, #12
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <_svfiprintf_r+0x1f8>)
 8004b30:	a904      	add	r1, sp, #16
 8004b32:	f3af 8000 	nop.w
 8004b36:	1c42      	adds	r2, r0, #1
 8004b38:	4606      	mov	r6, r0
 8004b3a:	d1d6      	bne.n	8004aea <_svfiprintf_r+0x176>
 8004b3c:	89ab      	ldrh	r3, [r5, #12]
 8004b3e:	065b      	lsls	r3, r3, #25
 8004b40:	f53f af2c 	bmi.w	800499c <_svfiprintf_r+0x28>
 8004b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b46:	b01d      	add	sp, #116	; 0x74
 8004b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	462a      	mov	r2, r5
 8004b52:	4638      	mov	r0, r7
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <_svfiprintf_r+0x1f8>)
 8004b56:	a904      	add	r1, sp, #16
 8004b58:	f000 f87c 	bl	8004c54 <_printf_i>
 8004b5c:	e7eb      	b.n	8004b36 <_svfiprintf_r+0x1c2>
 8004b5e:	bf00      	nop
 8004b60:	08005156 	.word	0x08005156
 8004b64:	08005160 	.word	0x08005160
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	080048bd 	.word	0x080048bd
 8004b70:	0800515c 	.word	0x0800515c

08004b74 <_printf_common>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	4616      	mov	r6, r2
 8004b7a:	4699      	mov	r9, r3
 8004b7c:	688a      	ldr	r2, [r1, #8]
 8004b7e:	690b      	ldr	r3, [r1, #16]
 8004b80:	4607      	mov	r7, r0
 8004b82:	4293      	cmp	r3, r2
 8004b84:	bfb8      	it	lt
 8004b86:	4613      	movlt	r3, r2
 8004b88:	6033      	str	r3, [r6, #0]
 8004b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b8e:	460c      	mov	r4, r1
 8004b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b94:	b10a      	cbz	r2, 8004b9a <_printf_common+0x26>
 8004b96:	3301      	adds	r3, #1
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	0699      	lsls	r1, r3, #26
 8004b9e:	bf42      	ittt	mi
 8004ba0:	6833      	ldrmi	r3, [r6, #0]
 8004ba2:	3302      	addmi	r3, #2
 8004ba4:	6033      	strmi	r3, [r6, #0]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	f015 0506 	ands.w	r5, r5, #6
 8004bac:	d106      	bne.n	8004bbc <_printf_common+0x48>
 8004bae:	f104 0a19 	add.w	sl, r4, #25
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	6832      	ldr	r2, [r6, #0]
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dc28      	bgt.n	8004c0e <_printf_common+0x9a>
 8004bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc0:	1e13      	subs	r3, r2, #0
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	0692      	lsls	r2, r2, #26
 8004bca:	d42d      	bmi.n	8004c28 <_printf_common+0xb4>
 8004bcc:	4649      	mov	r1, r9
 8004bce:	4638      	mov	r0, r7
 8004bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d020      	beq.n	8004c1c <_printf_common+0xa8>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	68e5      	ldr	r5, [r4, #12]
 8004bde:	f003 0306 	and.w	r3, r3, #6
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	bf18      	it	ne
 8004be6:	2500      	movne	r5, #0
 8004be8:	6832      	ldr	r2, [r6, #0]
 8004bea:	f04f 0600 	mov.w	r6, #0
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	bf08      	it	eq
 8004bf2:	1aad      	subeq	r5, r5, r2
 8004bf4:	6922      	ldr	r2, [r4, #16]
 8004bf6:	bf08      	it	eq
 8004bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	bfc4      	itt	gt
 8004c00:	1a9b      	subgt	r3, r3, r2
 8004c02:	18ed      	addgt	r5, r5, r3
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xcc>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xac>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xb0>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c4      	b.n	8004bb2 <_printf_common+0x3e>
 8004c28:	2030      	movs	r0, #48	; 0x30
 8004c2a:	18e1      	adds	r1, r4, r3
 8004c2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c36:	4422      	add	r2, r4
 8004c38:	3302      	adds	r3, #2
 8004c3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3e:	e7c5      	b.n	8004bcc <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4649      	mov	r1, r9
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa8>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x92>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	460c      	mov	r4, r1
 8004c5a:	7e27      	ldrb	r7, [r4, #24]
 8004c5c:	4691      	mov	r9, r2
 8004c5e:	2f78      	cmp	r7, #120	; 0x78
 8004c60:	4680      	mov	r8, r0
 8004c62:	469a      	mov	sl, r3
 8004c64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	; 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d9 	beq.w	8004e28 <_printf_i+0x1d4>
 8004c76:	2f58      	cmp	r7, #88	; 0x58
 8004c78:	f000 80a4 	beq.w	8004dc4 <_printf_i+0x170>
 8004c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a001      	add	r0, pc, #4	; (adr r0, 8004c94 <_printf_i+0x40>)
 8004c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e0f 	.word	0x08004e0f
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004df1 	.word	0x08004df1
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e31 	.word	0x08004e31
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004df9 	.word	0x08004df9
 8004cec:	680b      	ldr	r3, [r1, #0]
 8004cee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cf2:	1d1a      	adds	r2, r3, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	600a      	str	r2, [r1, #0]
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0a4      	b.n	8004e4a <_printf_i+0x1f6>
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	6808      	ldr	r0, [r1, #0]
 8004d04:	062e      	lsls	r6, r5, #24
 8004d06:	f100 0304 	add.w	r3, r0, #4
 8004d0a:	d50a      	bpl.n	8004d22 <_printf_i+0xce>
 8004d0c:	6805      	ldr	r5, [r0, #0]
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	2d00      	cmp	r5, #0
 8004d12:	da03      	bge.n	8004d1c <_printf_i+0xc8>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	426d      	negs	r5, r5
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	485e      	ldr	r0, [pc, #376]	; (8004e98 <_printf_i+0x244>)
 8004d20:	e019      	b.n	8004d56 <_printf_i+0x102>
 8004d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d26:	6805      	ldr	r5, [r0, #0]
 8004d28:	600b      	str	r3, [r1, #0]
 8004d2a:	bf18      	it	ne
 8004d2c:	b22d      	sxthne	r5, r5
 8004d2e:	e7ef      	b.n	8004d10 <_printf_i+0xbc>
 8004d30:	680b      	ldr	r3, [r1, #0]
 8004d32:	6825      	ldr	r5, [r4, #0]
 8004d34:	1d18      	adds	r0, r3, #4
 8004d36:	6008      	str	r0, [r1, #0]
 8004d38:	0628      	lsls	r0, r5, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xec>
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xf2>
 8004d40:	0669      	lsls	r1, r5, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe8>
 8004d44:	881d      	ldrh	r5, [r3, #0]
 8004d46:	2f6f      	cmp	r7, #111	; 0x6f
 8004d48:	bf0c      	ite	eq
 8004d4a:	2308      	moveq	r3, #8
 8004d4c:	230a      	movne	r3, #10
 8004d4e:	4852      	ldr	r0, [pc, #328]	; (8004e98 <_printf_i+0x244>)
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6866      	ldr	r6, [r4, #4]
 8004d58:	2e00      	cmp	r6, #0
 8004d5a:	bfa8      	it	ge
 8004d5c:	6821      	ldrge	r1, [r4, #0]
 8004d5e:	60a6      	str	r6, [r4, #8]
 8004d60:	bfa4      	itt	ge
 8004d62:	f021 0104 	bicge.w	r1, r1, #4
 8004d66:	6021      	strge	r1, [r4, #0]
 8004d68:	b90d      	cbnz	r5, 8004d6e <_printf_i+0x11a>
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	d04d      	beq.n	8004e0a <_printf_i+0x1b6>
 8004d6e:	4616      	mov	r6, r2
 8004d70:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d74:	fb03 5711 	mls	r7, r3, r1, r5
 8004d78:	5dc7      	ldrb	r7, [r0, r7]
 8004d7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d7e:	462f      	mov	r7, r5
 8004d80:	42bb      	cmp	r3, r7
 8004d82:	460d      	mov	r5, r1
 8004d84:	d9f4      	bls.n	8004d70 <_printf_i+0x11c>
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d10b      	bne.n	8004da2 <_printf_i+0x14e>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	07df      	lsls	r7, r3, #31
 8004d8e:	d508      	bpl.n	8004da2 <_printf_i+0x14e>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	6861      	ldr	r1, [r4, #4]
 8004d94:	4299      	cmp	r1, r3
 8004d96:	bfde      	ittt	le
 8004d98:	2330      	movle	r3, #48	; 0x30
 8004d9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004da2:	1b92      	subs	r2, r2, r6
 8004da4:	6122      	str	r2, [r4, #16]
 8004da6:	464b      	mov	r3, r9
 8004da8:	4621      	mov	r1, r4
 8004daa:	4640      	mov	r0, r8
 8004dac:	f8cd a000 	str.w	sl, [sp]
 8004db0:	aa03      	add	r2, sp, #12
 8004db2:	f7ff fedf 	bl	8004b74 <_printf_common>
 8004db6:	3001      	adds	r0, #1
 8004db8:	d14c      	bne.n	8004e54 <_printf_i+0x200>
 8004dba:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbe:	b004      	add	sp, #16
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	4834      	ldr	r0, [pc, #208]	; (8004e98 <_printf_i+0x244>)
 8004dc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dca:	680e      	ldr	r6, [r1, #0]
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dd2:	061f      	lsls	r7, r3, #24
 8004dd4:	600e      	str	r6, [r1, #0]
 8004dd6:	d514      	bpl.n	8004e02 <_printf_i+0x1ae>
 8004dd8:	07d9      	lsls	r1, r3, #31
 8004dda:	bf44      	itt	mi
 8004ddc:	f043 0320 	orrmi.w	r3, r3, #32
 8004de0:	6023      	strmi	r3, [r4, #0]
 8004de2:	b91d      	cbnz	r5, 8004dec <_printf_i+0x198>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	f023 0320 	bic.w	r3, r3, #32
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	2310      	movs	r3, #16
 8004dee:	e7af      	b.n	8004d50 <_printf_i+0xfc>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f043 0320 	orr.w	r3, r3, #32
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	2378      	movs	r3, #120	; 0x78
 8004dfa:	4828      	ldr	r0, [pc, #160]	; (8004e9c <_printf_i+0x248>)
 8004dfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e00:	e7e3      	b.n	8004dca <_printf_i+0x176>
 8004e02:	065e      	lsls	r6, r3, #25
 8004e04:	bf48      	it	mi
 8004e06:	b2ad      	uxthmi	r5, r5
 8004e08:	e7e6      	b.n	8004dd8 <_printf_i+0x184>
 8004e0a:	4616      	mov	r6, r2
 8004e0c:	e7bb      	b.n	8004d86 <_printf_i+0x132>
 8004e0e:	680b      	ldr	r3, [r1, #0]
 8004e10:	6826      	ldr	r6, [r4, #0]
 8004e12:	1d1d      	adds	r5, r3, #4
 8004e14:	6960      	ldr	r0, [r4, #20]
 8004e16:	600d      	str	r5, [r1, #0]
 8004e18:	0635      	lsls	r5, r6, #24
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	d501      	bpl.n	8004e22 <_printf_i+0x1ce>
 8004e1e:	6018      	str	r0, [r3, #0]
 8004e20:	e002      	b.n	8004e28 <_printf_i+0x1d4>
 8004e22:	0671      	lsls	r1, r6, #25
 8004e24:	d5fb      	bpl.n	8004e1e <_printf_i+0x1ca>
 8004e26:	8018      	strh	r0, [r3, #0]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	6123      	str	r3, [r4, #16]
 8004e2e:	e7ba      	b.n	8004da6 <_printf_i+0x152>
 8004e30:	680b      	ldr	r3, [r1, #0]
 8004e32:	1d1a      	adds	r2, r3, #4
 8004e34:	600a      	str	r2, [r1, #0]
 8004e36:	681e      	ldr	r6, [r3, #0]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	6862      	ldr	r2, [r4, #4]
 8004e3e:	f000 f82f 	bl	8004ea0 <memchr>
 8004e42:	b108      	cbz	r0, 8004e48 <_printf_i+0x1f4>
 8004e44:	1b80      	subs	r0, r0, r6
 8004e46:	6060      	str	r0, [r4, #4]
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e52:	e7a8      	b.n	8004da6 <_printf_i+0x152>
 8004e54:	4632      	mov	r2, r6
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	47d0      	blx	sl
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d0ab      	beq.n	8004dba <_printf_i+0x166>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	079b      	lsls	r3, r3, #30
 8004e66:	d413      	bmi.n	8004e90 <_printf_i+0x23c>
 8004e68:	68e0      	ldr	r0, [r4, #12]
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	4298      	cmp	r0, r3
 8004e6e:	bfb8      	it	lt
 8004e70:	4618      	movlt	r0, r3
 8004e72:	e7a4      	b.n	8004dbe <_printf_i+0x16a>
 8004e74:	2301      	movs	r3, #1
 8004e76:	4632      	mov	r2, r6
 8004e78:	4649      	mov	r1, r9
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	47d0      	blx	sl
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d09b      	beq.n	8004dba <_printf_i+0x166>
 8004e82:	3501      	adds	r5, #1
 8004e84:	68e3      	ldr	r3, [r4, #12]
 8004e86:	9903      	ldr	r1, [sp, #12]
 8004e88:	1a5b      	subs	r3, r3, r1
 8004e8a:	42ab      	cmp	r3, r5
 8004e8c:	dcf2      	bgt.n	8004e74 <_printf_i+0x220>
 8004e8e:	e7eb      	b.n	8004e68 <_printf_i+0x214>
 8004e90:	2500      	movs	r5, #0
 8004e92:	f104 0619 	add.w	r6, r4, #25
 8004e96:	e7f5      	b.n	8004e84 <_printf_i+0x230>
 8004e98:	08005167 	.word	0x08005167
 8004e9c:	08005178 	.word	0x08005178

08004ea0 <memchr>:
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	b2c9      	uxtb	r1, r1
 8004ea6:	4402      	add	r2, r0
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	d101      	bne.n	8004eb2 <memchr+0x12>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	e003      	b.n	8004eba <memchr+0x1a>
 8004eb2:	7804      	ldrb	r4, [r0, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	428c      	cmp	r4, r1
 8004eb8:	d1f6      	bne.n	8004ea8 <memchr+0x8>
 8004eba:	bd10      	pop	{r4, pc}

08004ebc <memcpy>:
 8004ebc:	440a      	add	r2, r1
 8004ebe:	4291      	cmp	r1, r2
 8004ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec4:	d100      	bne.n	8004ec8 <memcpy+0xc>
 8004ec6:	4770      	bx	lr
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ece:	4291      	cmp	r1, r2
 8004ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ed4:	d1f9      	bne.n	8004eca <memcpy+0xe>
 8004ed6:	bd10      	pop	{r4, pc}

08004ed8 <memmove>:
 8004ed8:	4288      	cmp	r0, r1
 8004eda:	b510      	push	{r4, lr}
 8004edc:	eb01 0402 	add.w	r4, r1, r2
 8004ee0:	d902      	bls.n	8004ee8 <memmove+0x10>
 8004ee2:	4284      	cmp	r4, r0
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	d807      	bhi.n	8004ef8 <memmove+0x20>
 8004ee8:	1e43      	subs	r3, r0, #1
 8004eea:	42a1      	cmp	r1, r4
 8004eec:	d008      	beq.n	8004f00 <memmove+0x28>
 8004eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ef6:	e7f8      	b.n	8004eea <memmove+0x12>
 8004ef8:	4601      	mov	r1, r0
 8004efa:	4402      	add	r2, r0
 8004efc:	428a      	cmp	r2, r1
 8004efe:	d100      	bne.n	8004f02 <memmove+0x2a>
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f0a:	e7f7      	b.n	8004efc <memmove+0x24>

08004f0c <_free_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4605      	mov	r5, r0
 8004f10:	2900      	cmp	r1, #0
 8004f12:	d043      	beq.n	8004f9c <_free_r+0x90>
 8004f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f18:	1f0c      	subs	r4, r1, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bfb8      	it	lt
 8004f1e:	18e4      	addlt	r4, r4, r3
 8004f20:	f000 f8d0 	bl	80050c4 <__malloc_lock>
 8004f24:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <_free_r+0x94>)
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	4610      	mov	r0, r2
 8004f2a:	b933      	cbnz	r3, 8004f3a <_free_r+0x2e>
 8004f2c:	6063      	str	r3, [r4, #4]
 8004f2e:	6014      	str	r4, [r2, #0]
 8004f30:	4628      	mov	r0, r5
 8004f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f36:	f000 b8cb 	b.w	80050d0 <__malloc_unlock>
 8004f3a:	42a3      	cmp	r3, r4
 8004f3c:	d90a      	bls.n	8004f54 <_free_r+0x48>
 8004f3e:	6821      	ldr	r1, [r4, #0]
 8004f40:	1862      	adds	r2, r4, r1
 8004f42:	4293      	cmp	r3, r2
 8004f44:	bf01      	itttt	eq
 8004f46:	681a      	ldreq	r2, [r3, #0]
 8004f48:	685b      	ldreq	r3, [r3, #4]
 8004f4a:	1852      	addeq	r2, r2, r1
 8004f4c:	6022      	streq	r2, [r4, #0]
 8004f4e:	6063      	str	r3, [r4, #4]
 8004f50:	6004      	str	r4, [r0, #0]
 8004f52:	e7ed      	b.n	8004f30 <_free_r+0x24>
 8004f54:	461a      	mov	r2, r3
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	b10b      	cbz	r3, 8004f5e <_free_r+0x52>
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	d9fa      	bls.n	8004f54 <_free_r+0x48>
 8004f5e:	6811      	ldr	r1, [r2, #0]
 8004f60:	1850      	adds	r0, r2, r1
 8004f62:	42a0      	cmp	r0, r4
 8004f64:	d10b      	bne.n	8004f7e <_free_r+0x72>
 8004f66:	6820      	ldr	r0, [r4, #0]
 8004f68:	4401      	add	r1, r0
 8004f6a:	1850      	adds	r0, r2, r1
 8004f6c:	4283      	cmp	r3, r0
 8004f6e:	6011      	str	r1, [r2, #0]
 8004f70:	d1de      	bne.n	8004f30 <_free_r+0x24>
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4401      	add	r1, r0
 8004f78:	6011      	str	r1, [r2, #0]
 8004f7a:	6053      	str	r3, [r2, #4]
 8004f7c:	e7d8      	b.n	8004f30 <_free_r+0x24>
 8004f7e:	d902      	bls.n	8004f86 <_free_r+0x7a>
 8004f80:	230c      	movs	r3, #12
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	e7d4      	b.n	8004f30 <_free_r+0x24>
 8004f86:	6820      	ldr	r0, [r4, #0]
 8004f88:	1821      	adds	r1, r4, r0
 8004f8a:	428b      	cmp	r3, r1
 8004f8c:	bf01      	itttt	eq
 8004f8e:	6819      	ldreq	r1, [r3, #0]
 8004f90:	685b      	ldreq	r3, [r3, #4]
 8004f92:	1809      	addeq	r1, r1, r0
 8004f94:	6021      	streq	r1, [r4, #0]
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	6054      	str	r4, [r2, #4]
 8004f9a:	e7c9      	b.n	8004f30 <_free_r+0x24>
 8004f9c:	bd38      	pop	{r3, r4, r5, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000234 	.word	0x20000234

08004fa4 <_malloc_r>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	1ccd      	adds	r5, r1, #3
 8004fa8:	f025 0503 	bic.w	r5, r5, #3
 8004fac:	3508      	adds	r5, #8
 8004fae:	2d0c      	cmp	r5, #12
 8004fb0:	bf38      	it	cc
 8004fb2:	250c      	movcc	r5, #12
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	db01      	blt.n	8004fbe <_malloc_r+0x1a>
 8004fba:	42a9      	cmp	r1, r5
 8004fbc:	d903      	bls.n	8004fc6 <_malloc_r+0x22>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	6033      	str	r3, [r6, #0]
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc6:	f000 f87d 	bl	80050c4 <__malloc_lock>
 8004fca:	4921      	ldr	r1, [pc, #132]	; (8005050 <_malloc_r+0xac>)
 8004fcc:	680a      	ldr	r2, [r1, #0]
 8004fce:	4614      	mov	r4, r2
 8004fd0:	b99c      	cbnz	r4, 8004ffa <_malloc_r+0x56>
 8004fd2:	4f20      	ldr	r7, [pc, #128]	; (8005054 <_malloc_r+0xb0>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	b923      	cbnz	r3, 8004fe2 <_malloc_r+0x3e>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f000 f862 	bl	80050a4 <_sbrk_r>
 8004fe0:	6038      	str	r0, [r7, #0]
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f000 f85d 	bl	80050a4 <_sbrk_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d123      	bne.n	8005036 <_malloc_r+0x92>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	6033      	str	r3, [r6, #0]
 8004ff4:	f000 f86c 	bl	80050d0 <__malloc_unlock>
 8004ff8:	e7e3      	b.n	8004fc2 <_malloc_r+0x1e>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	1b5b      	subs	r3, r3, r5
 8004ffe:	d417      	bmi.n	8005030 <_malloc_r+0x8c>
 8005000:	2b0b      	cmp	r3, #11
 8005002:	d903      	bls.n	800500c <_malloc_r+0x68>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	441c      	add	r4, r3
 8005008:	6025      	str	r5, [r4, #0]
 800500a:	e004      	b.n	8005016 <_malloc_r+0x72>
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	42a2      	cmp	r2, r4
 8005010:	bf0c      	ite	eq
 8005012:	600b      	streq	r3, [r1, #0]
 8005014:	6053      	strne	r3, [r2, #4]
 8005016:	4630      	mov	r0, r6
 8005018:	f000 f85a 	bl	80050d0 <__malloc_unlock>
 800501c:	f104 000b 	add.w	r0, r4, #11
 8005020:	1d23      	adds	r3, r4, #4
 8005022:	f020 0007 	bic.w	r0, r0, #7
 8005026:	1ac2      	subs	r2, r0, r3
 8005028:	d0cc      	beq.n	8004fc4 <_malloc_r+0x20>
 800502a:	1a1b      	subs	r3, r3, r0
 800502c:	50a3      	str	r3, [r4, r2]
 800502e:	e7c9      	b.n	8004fc4 <_malloc_r+0x20>
 8005030:	4622      	mov	r2, r4
 8005032:	6864      	ldr	r4, [r4, #4]
 8005034:	e7cc      	b.n	8004fd0 <_malloc_r+0x2c>
 8005036:	1cc4      	adds	r4, r0, #3
 8005038:	f024 0403 	bic.w	r4, r4, #3
 800503c:	42a0      	cmp	r0, r4
 800503e:	d0e3      	beq.n	8005008 <_malloc_r+0x64>
 8005040:	1a21      	subs	r1, r4, r0
 8005042:	4630      	mov	r0, r6
 8005044:	f000 f82e 	bl	80050a4 <_sbrk_r>
 8005048:	3001      	adds	r0, #1
 800504a:	d1dd      	bne.n	8005008 <_malloc_r+0x64>
 800504c:	e7cf      	b.n	8004fee <_malloc_r+0x4a>
 800504e:	bf00      	nop
 8005050:	20000234 	.word	0x20000234
 8005054:	20000238 	.word	0x20000238

08005058 <_realloc_r>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	4607      	mov	r7, r0
 800505c:	4614      	mov	r4, r2
 800505e:	460e      	mov	r6, r1
 8005060:	b921      	cbnz	r1, 800506c <_realloc_r+0x14>
 8005062:	4611      	mov	r1, r2
 8005064:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005068:	f7ff bf9c 	b.w	8004fa4 <_malloc_r>
 800506c:	b922      	cbnz	r2, 8005078 <_realloc_r+0x20>
 800506e:	f7ff ff4d 	bl	8004f0c <_free_r>
 8005072:	4625      	mov	r5, r4
 8005074:	4628      	mov	r0, r5
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005078:	f000 f830 	bl	80050dc <_malloc_usable_size_r>
 800507c:	42a0      	cmp	r0, r4
 800507e:	d20f      	bcs.n	80050a0 <_realloc_r+0x48>
 8005080:	4621      	mov	r1, r4
 8005082:	4638      	mov	r0, r7
 8005084:	f7ff ff8e 	bl	8004fa4 <_malloc_r>
 8005088:	4605      	mov	r5, r0
 800508a:	2800      	cmp	r0, #0
 800508c:	d0f2      	beq.n	8005074 <_realloc_r+0x1c>
 800508e:	4631      	mov	r1, r6
 8005090:	4622      	mov	r2, r4
 8005092:	f7ff ff13 	bl	8004ebc <memcpy>
 8005096:	4631      	mov	r1, r6
 8005098:	4638      	mov	r0, r7
 800509a:	f7ff ff37 	bl	8004f0c <_free_r>
 800509e:	e7e9      	b.n	8005074 <_realloc_r+0x1c>
 80050a0:	4635      	mov	r5, r6
 80050a2:	e7e7      	b.n	8005074 <_realloc_r+0x1c>

080050a4 <_sbrk_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	2300      	movs	r3, #0
 80050a8:	4d05      	ldr	r5, [pc, #20]	; (80050c0 <_sbrk_r+0x1c>)
 80050aa:	4604      	mov	r4, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	f7fc fdd2 	bl	8001c58 <_sbrk>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_sbrk_r+0x1a>
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	b103      	cbz	r3, 80050be <_sbrk_r+0x1a>
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	20000324 	.word	0x20000324

080050c4 <__malloc_lock>:
 80050c4:	4801      	ldr	r0, [pc, #4]	; (80050cc <__malloc_lock+0x8>)
 80050c6:	f000 b811 	b.w	80050ec <__retarget_lock_acquire_recursive>
 80050ca:	bf00      	nop
 80050cc:	2000032c 	.word	0x2000032c

080050d0 <__malloc_unlock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__malloc_unlock+0x8>)
 80050d2:	f000 b80c 	b.w	80050ee <__retarget_lock_release_recursive>
 80050d6:	bf00      	nop
 80050d8:	2000032c 	.word	0x2000032c

080050dc <_malloc_usable_size_r>:
 80050dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e0:	1f18      	subs	r0, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bfbc      	itt	lt
 80050e6:	580b      	ldrlt	r3, [r1, r0]
 80050e8:	18c0      	addlt	r0, r0, r3
 80050ea:	4770      	bx	lr

080050ec <__retarget_lock_acquire_recursive>:
 80050ec:	4770      	bx	lr

080050ee <__retarget_lock_release_recursive>:
 80050ee:	4770      	bx	lr

080050f0 <_init>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr

080050fc <_fini>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr
