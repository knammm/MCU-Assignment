
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005198  08005198  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08005198  08005198  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005198  08005198  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200000b4  08005254  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005254  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001801d  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f78  00000000  00000000  000380fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0003b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0003be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198dc  00000000  00000000  0003ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126cc  00000000  00000000  00056374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4cd  00000000  00000000  00068a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3f0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000f3f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	080050fc 	.word	0x080050fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	080050fc 	.word	0x080050fc

0800014c <fsm_automatic_run>:
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af00      	add	r7, sp, #0
 8000152:	4bb6      	ldr	r3, [pc, #728]	; (800042c <fsm_automatic_run+0x2e0>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	3b01      	subs	r3, #1
 8000158:	2b17      	cmp	r3, #23
 800015a:	f200 81e9 	bhi.w	8000530 <fsm_automatic_run+0x3e4>
 800015e:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	080001c5 	.word	0x080001c5
 8000168:	08000531 	.word	0x08000531
 800016c:	08000531 	.word	0x08000531
 8000170:	08000531 	.word	0x08000531
 8000174:	08000531 	.word	0x08000531
 8000178:	08000531 	.word	0x08000531
 800017c:	08000531 	.word	0x08000531
 8000180:	08000531 	.word	0x08000531
 8000184:	08000531 	.word	0x08000531
 8000188:	08000531 	.word	0x08000531
 800018c:	08000531 	.word	0x08000531
 8000190:	08000531 	.word	0x08000531
 8000194:	08000531 	.word	0x08000531
 8000198:	08000531 	.word	0x08000531
 800019c:	08000531 	.word	0x08000531
 80001a0:	08000531 	.word	0x08000531
 80001a4:	08000531 	.word	0x08000531
 80001a8:	08000531 	.word	0x08000531
 80001ac:	08000531 	.word	0x08000531
 80001b0:	08000531 	.word	0x08000531
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	0800029b 	.word	0x0800029b
 80001bc:	08000371 	.word	0x08000371
 80001c0:	0800045d 	.word	0x0800045d
 80001c4:	4b99      	ldr	r3, [pc, #612]	; (800042c <fsm_automatic_run+0x2e0>)
 80001c6:	2215      	movs	r2, #21
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	4b99      	ldr	r3, [pc, #612]	; (8000430 <fsm_automatic_run+0x2e4>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4619      	mov	r1, r3
 80001d0:	2000      	movs	r0, #0
 80001d2:	f001 fb87 	bl	80018e4 <setTimer>
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f001 fb67 	bl	80018ac <setTimerSecond>
 80001de:	e1b0      	b.n	8000542 <fsm_automatic_run+0x3f6>
 80001e0:	2105      	movs	r1, #5
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 fdba 	bl	8000d5c <Traffic_setColor>
 80001e8:	2105      	movs	r1, #5
 80001ea:	2002      	movs	r0, #2
 80001ec:	f000 fdb6 	bl	8000d5c <Traffic_setColor>
 80001f0:	2102      	movs	r1, #2
 80001f2:	2001      	movs	r0, #1
 80001f4:	f000 fdb2 	bl	8000d5c <Traffic_setColor>
 80001f8:	2103      	movs	r1, #3
 80001fa:	2002      	movs	r0, #2
 80001fc:	f000 fdae 	bl	8000d5c <Traffic_setColor>
 8000200:	4b8c      	ldr	r3, [pc, #560]	; (8000434 <fsm_automatic_run+0x2e8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d139      	bne.n	800027c <fsm_automatic_run+0x130>
 8000208:	4b8b      	ldr	r3, [pc, #556]	; (8000438 <fsm_automatic_run+0x2ec>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	498b      	ldr	r1, [pc, #556]	; (800043c <fsm_automatic_run+0x2f0>)
 8000210:	4618      	mov	r0, r3
 8000212:	f004 fb39 	bl	8004888 <siprintf>
 8000216:	4603      	mov	r3, r0
 8000218:	b29a      	uxth	r2, r3
 800021a:	1d39      	adds	r1, r7, #4
 800021c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000220:	4887      	ldr	r0, [pc, #540]	; (8000440 <fsm_automatic_run+0x2f4>)
 8000222:	f003 fd2b 	bl	8003c7c <HAL_UART_Transmit>
 8000226:	4b87      	ldr	r3, [pc, #540]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4986      	ldr	r1, [pc, #536]	; (8000448 <fsm_automatic_run+0x2fc>)
 800022e:	4618      	mov	r0, r3
 8000230:	f004 fb2a 	bl	8004888 <siprintf>
 8000234:	4603      	mov	r3, r0
 8000236:	b29a      	uxth	r2, r3
 8000238:	1d39      	adds	r1, r7, #4
 800023a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800023e:	4880      	ldr	r0, [pc, #512]	; (8000440 <fsm_automatic_run+0x2f4>)
 8000240:	f003 fd1c 	bl	8003c7c <HAL_UART_Transmit>
 8000244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000248:	f001 fb30 	bl	80018ac <setTimerSecond>
 800024c:	4b7a      	ldr	r3, [pc, #488]	; (8000438 <fsm_automatic_run+0x2ec>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	4a79      	ldr	r2, [pc, #484]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000254:	6013      	str	r3, [r2, #0]
 8000256:	4b7b      	ldr	r3, [pc, #492]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	3b01      	subs	r3, #1
 800025c:	4a79      	ldr	r2, [pc, #484]	; (8000444 <fsm_automatic_run+0x2f8>)
 800025e:	6013      	str	r3, [r2, #0]
 8000260:	4b78      	ldr	r3, [pc, #480]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dc09      	bgt.n	800027c <fsm_automatic_run+0x130>
 8000268:	4b78      	ldr	r3, [pc, #480]	; (800044c <fsm_automatic_run+0x300>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a78      	ldr	r2, [pc, #480]	; (8000450 <fsm_automatic_run+0x304>)
 800026e:	fb82 1203 	smull	r1, r2, r2, r3
 8000272:	1192      	asrs	r2, r2, #6
 8000274:	17db      	asrs	r3, r3, #31
 8000276:	1ad3      	subs	r3, r2, r3
 8000278:	4a72      	ldr	r2, [pc, #456]	; (8000444 <fsm_automatic_run+0x2f8>)
 800027a:	6013      	str	r3, [r2, #0]
 800027c:	4b75      	ldr	r3, [pc, #468]	; (8000454 <fsm_automatic_run+0x308>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	f040 8157 	bne.w	8000534 <fsm_automatic_run+0x3e8>
 8000286:	4b71      	ldr	r3, [pc, #452]	; (800044c <fsm_automatic_run+0x300>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4619      	mov	r1, r3
 800028c:	2000      	movs	r0, #0
 800028e:	f001 fb29 	bl	80018e4 <setTimer>
 8000292:	4b66      	ldr	r3, [pc, #408]	; (800042c <fsm_automatic_run+0x2e0>)
 8000294:	2216      	movs	r2, #22
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	e14c      	b.n	8000534 <fsm_automatic_run+0x3e8>
 800029a:	2105      	movs	r1, #5
 800029c:	2001      	movs	r0, #1
 800029e:	f000 fd5d 	bl	8000d5c <Traffic_setColor>
 80002a2:	2105      	movs	r1, #5
 80002a4:	2002      	movs	r0, #2
 80002a6:	f000 fd59 	bl	8000d5c <Traffic_setColor>
 80002aa:	2102      	movs	r1, #2
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 fd55 	bl	8000d5c <Traffic_setColor>
 80002b2:	2104      	movs	r1, #4
 80002b4:	2002      	movs	r0, #2
 80002b6:	f000 fd51 	bl	8000d5c <Traffic_setColor>
 80002ba:	4b5e      	ldr	r3, [pc, #376]	; (8000434 <fsm_automatic_run+0x2e8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d147      	bne.n	8000352 <fsm_automatic_run+0x206>
 80002c2:	4b5d      	ldr	r3, [pc, #372]	; (8000438 <fsm_automatic_run+0x2ec>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	495c      	ldr	r1, [pc, #368]	; (800043c <fsm_automatic_run+0x2f0>)
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 fadc 	bl	8004888 <siprintf>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	1d39      	adds	r1, r7, #4
 80002d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002da:	4859      	ldr	r0, [pc, #356]	; (8000440 <fsm_automatic_run+0x2f4>)
 80002dc:	f003 fcce 	bl	8003c7c <HAL_UART_Transmit>
 80002e0:	4b58      	ldr	r3, [pc, #352]	; (8000444 <fsm_automatic_run+0x2f8>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4958      	ldr	r1, [pc, #352]	; (8000448 <fsm_automatic_run+0x2fc>)
 80002e8:	4618      	mov	r0, r3
 80002ea:	f004 facd 	bl	8004888 <siprintf>
 80002ee:	4603      	mov	r3, r0
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	1d39      	adds	r1, r7, #4
 80002f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002f8:	4851      	ldr	r0, [pc, #324]	; (8000440 <fsm_automatic_run+0x2f4>)
 80002fa:	f003 fcbf 	bl	8003c7c <HAL_UART_Transmit>
 80002fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000302:	f001 fad3 	bl	80018ac <setTimerSecond>
 8000306:	4b4c      	ldr	r3, [pc, #304]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3b01      	subs	r3, #1
 800030c:	4a4a      	ldr	r2, [pc, #296]	; (8000438 <fsm_automatic_run+0x2ec>)
 800030e:	6013      	str	r3, [r2, #0]
 8000310:	4b49      	ldr	r3, [pc, #292]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dc09      	bgt.n	800032c <fsm_automatic_run+0x1e0>
 8000318:	4b45      	ldr	r3, [pc, #276]	; (8000430 <fsm_automatic_run+0x2e4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a4c      	ldr	r2, [pc, #304]	; (8000450 <fsm_automatic_run+0x304>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1192      	asrs	r2, r2, #6
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a43      	ldr	r2, [pc, #268]	; (8000438 <fsm_automatic_run+0x2ec>)
 800032a:	6013      	str	r3, [r2, #0]
 800032c:	4b45      	ldr	r3, [pc, #276]	; (8000444 <fsm_automatic_run+0x2f8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3b01      	subs	r3, #1
 8000332:	4a44      	ldr	r2, [pc, #272]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000334:	6013      	str	r3, [r2, #0]
 8000336:	4b43      	ldr	r3, [pc, #268]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	dc09      	bgt.n	8000352 <fsm_automatic_run+0x206>
 800033e:	4b46      	ldr	r3, [pc, #280]	; (8000458 <fsm_automatic_run+0x30c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a43      	ldr	r2, [pc, #268]	; (8000450 <fsm_automatic_run+0x304>)
 8000344:	fb82 1203 	smull	r1, r2, r2, r3
 8000348:	1192      	asrs	r2, r2, #6
 800034a:	17db      	asrs	r3, r3, #31
 800034c:	1ad3      	subs	r3, r2, r3
 800034e:	4a3d      	ldr	r2, [pc, #244]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000350:	6013      	str	r3, [r2, #0]
 8000352:	4b40      	ldr	r3, [pc, #256]	; (8000454 <fsm_automatic_run+0x308>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	f040 80ee 	bne.w	8000538 <fsm_automatic_run+0x3ec>
 800035c:	4b34      	ldr	r3, [pc, #208]	; (8000430 <fsm_automatic_run+0x2e4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	2000      	movs	r0, #0
 8000364:	f001 fabe 	bl	80018e4 <setTimer>
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <fsm_automatic_run+0x2e0>)
 800036a:	2217      	movs	r2, #23
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	e0e3      	b.n	8000538 <fsm_automatic_run+0x3ec>
 8000370:	2105      	movs	r1, #5
 8000372:	2001      	movs	r0, #1
 8000374:	f000 fcf2 	bl	8000d5c <Traffic_setColor>
 8000378:	2105      	movs	r1, #5
 800037a:	2002      	movs	r0, #2
 800037c:	f000 fcee 	bl	8000d5c <Traffic_setColor>
 8000380:	2103      	movs	r1, #3
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fcea 	bl	8000d5c <Traffic_setColor>
 8000388:	2102      	movs	r1, #2
 800038a:	2002      	movs	r0, #2
 800038c:	f000 fce6 	bl	8000d5c <Traffic_setColor>
 8000390:	4b28      	ldr	r3, [pc, #160]	; (8000434 <fsm_automatic_run+0x2e8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d139      	bne.n	800040c <fsm_automatic_run+0x2c0>
 8000398:	4b27      	ldr	r3, [pc, #156]	; (8000438 <fsm_automatic_run+0x2ec>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4927      	ldr	r1, [pc, #156]	; (800043c <fsm_automatic_run+0x2f0>)
 80003a0:	4618      	mov	r0, r3
 80003a2:	f004 fa71 	bl	8004888 <siprintf>
 80003a6:	4603      	mov	r3, r0
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	1d39      	adds	r1, r7, #4
 80003ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003b0:	4823      	ldr	r0, [pc, #140]	; (8000440 <fsm_automatic_run+0x2f4>)
 80003b2:	f003 fc63 	bl	8003c7c <HAL_UART_Transmit>
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <fsm_automatic_run+0x2f8>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4922      	ldr	r1, [pc, #136]	; (8000448 <fsm_automatic_run+0x2fc>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f004 fa62 	bl	8004888 <siprintf>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	1d39      	adds	r1, r7, #4
 80003ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003ce:	481c      	ldr	r0, [pc, #112]	; (8000440 <fsm_automatic_run+0x2f4>)
 80003d0:	f003 fc54 	bl	8003c7c <HAL_UART_Transmit>
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f001 fa68 	bl	80018ac <setTimerSecond>
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <fsm_automatic_run+0x2ec>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <fsm_automatic_run+0x2ec>)
 80003e4:	6013      	str	r3, [r2, #0]
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <fsm_automatic_run+0x2ec>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dc09      	bgt.n	8000402 <fsm_automatic_run+0x2b6>
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <fsm_automatic_run+0x300>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a17      	ldr	r2, [pc, #92]	; (8000450 <fsm_automatic_run+0x304>)
 80003f4:	fb82 1203 	smull	r1, r2, r2, r3
 80003f8:	1192      	asrs	r2, r2, #6
 80003fa:	17db      	asrs	r3, r3, #31
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <fsm_automatic_run+0x2ec>)
 8000400:	6013      	str	r3, [r2, #0]
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <fsm_automatic_run+0x2f8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3b01      	subs	r3, #1
 8000408:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <fsm_automatic_run+0x2f8>)
 800040a:	6013      	str	r3, [r2, #0]
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <fsm_automatic_run+0x308>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	f040 8093 	bne.w	800053c <fsm_automatic_run+0x3f0>
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <fsm_automatic_run+0x300>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4619      	mov	r1, r3
 800041c:	2000      	movs	r0, #0
 800041e:	f001 fa61 	bl	80018e4 <setTimer>
 8000422:	4b02      	ldr	r3, [pc, #8]	; (800042c <fsm_automatic_run+0x2e0>)
 8000424:	2218      	movs	r2, #24
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	e088      	b.n	800053c <fsm_automatic_run+0x3f0>
 800042a:	bf00      	nop
 800042c:	20000018 	.word	0x20000018
 8000430:	20000024 	.word	0x20000024
 8000434:	200001ec 	.word	0x200001ec
 8000438:	200000d8 	.word	0x200000d8
 800043c:	08005114 	.word	0x08005114
 8000440:	200002cc 	.word	0x200002cc
 8000444:	200000dc 	.word	0x200000dc
 8000448:	08005124 	.word	0x08005124
 800044c:	20000020 	.word	0x20000020
 8000450:	10624dd3 	.word	0x10624dd3
 8000454:	200001f4 	.word	0x200001f4
 8000458:	2000001c 	.word	0x2000001c
 800045c:	2105      	movs	r1, #5
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fc7c 	bl	8000d5c <Traffic_setColor>
 8000464:	2105      	movs	r1, #5
 8000466:	2002      	movs	r0, #2
 8000468:	f000 fc78 	bl	8000d5c <Traffic_setColor>
 800046c:	2104      	movs	r1, #4
 800046e:	2001      	movs	r0, #1
 8000470:	f000 fc74 	bl	8000d5c <Traffic_setColor>
 8000474:	2102      	movs	r1, #2
 8000476:	2002      	movs	r0, #2
 8000478:	f000 fc70 	bl	8000d5c <Traffic_setColor>
 800047c:	4b68      	ldr	r3, [pc, #416]	; (8000620 <fsm_automatic_run+0x4d4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d147      	bne.n	8000514 <fsm_automatic_run+0x3c8>
 8000484:	4b67      	ldr	r3, [pc, #412]	; (8000624 <fsm_automatic_run+0x4d8>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	4967      	ldr	r1, [pc, #412]	; (8000628 <fsm_automatic_run+0x4dc>)
 800048c:	4618      	mov	r0, r3
 800048e:	f004 f9fb 	bl	8004888 <siprintf>
 8000492:	4603      	mov	r3, r0
 8000494:	b29a      	uxth	r2, r3
 8000496:	1d39      	adds	r1, r7, #4
 8000498:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800049c:	4863      	ldr	r0, [pc, #396]	; (800062c <fsm_automatic_run+0x4e0>)
 800049e:	f003 fbed 	bl	8003c7c <HAL_UART_Transmit>
 80004a2:	4b63      	ldr	r3, [pc, #396]	; (8000630 <fsm_automatic_run+0x4e4>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4962      	ldr	r1, [pc, #392]	; (8000634 <fsm_automatic_run+0x4e8>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 f9ec 	bl	8004888 <siprintf>
 80004b0:	4603      	mov	r3, r0
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	1d39      	adds	r1, r7, #4
 80004b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004ba:	485c      	ldr	r0, [pc, #368]	; (800062c <fsm_automatic_run+0x4e0>)
 80004bc:	f003 fbde 	bl	8003c7c <HAL_UART_Transmit>
 80004c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c4:	f001 f9f2 	bl	80018ac <setTimerSecond>
 80004c8:	4b56      	ldr	r3, [pc, #344]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a55      	ldr	r2, [pc, #340]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004d0:	6013      	str	r3, [r2, #0]
 80004d2:	4b54      	ldr	r3, [pc, #336]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dc09      	bgt.n	80004ee <fsm_automatic_run+0x3a2>
 80004da:	4b57      	ldr	r3, [pc, #348]	; (8000638 <fsm_automatic_run+0x4ec>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a57      	ldr	r2, [pc, #348]	; (800063c <fsm_automatic_run+0x4f0>)
 80004e0:	fb82 1203 	smull	r1, r2, r2, r3
 80004e4:	1192      	asrs	r2, r2, #6
 80004e6:	17db      	asrs	r3, r3, #31
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	4a4e      	ldr	r2, [pc, #312]	; (8000624 <fsm_automatic_run+0x4d8>)
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	4b50      	ldr	r3, [pc, #320]	; (8000630 <fsm_automatic_run+0x4e4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a4e      	ldr	r2, [pc, #312]	; (8000630 <fsm_automatic_run+0x4e4>)
 80004f6:	6013      	str	r3, [r2, #0]
 80004f8:	4b4d      	ldr	r3, [pc, #308]	; (8000630 <fsm_automatic_run+0x4e4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	dc09      	bgt.n	8000514 <fsm_automatic_run+0x3c8>
 8000500:	4b4f      	ldr	r3, [pc, #316]	; (8000640 <fsm_automatic_run+0x4f4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a4d      	ldr	r2, [pc, #308]	; (800063c <fsm_automatic_run+0x4f0>)
 8000506:	fb82 1203 	smull	r1, r2, r2, r3
 800050a:	1192      	asrs	r2, r2, #6
 800050c:	17db      	asrs	r3, r3, #31
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	4a47      	ldr	r2, [pc, #284]	; (8000630 <fsm_automatic_run+0x4e4>)
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	4b4b      	ldr	r3, [pc, #300]	; (8000644 <fsm_automatic_run+0x4f8>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d111      	bne.n	8000540 <fsm_automatic_run+0x3f4>
 800051c:	4b48      	ldr	r3, [pc, #288]	; (8000640 <fsm_automatic_run+0x4f4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	2000      	movs	r0, #0
 8000524:	f001 f9de 	bl	80018e4 <setTimer>
 8000528:	4b47      	ldr	r3, [pc, #284]	; (8000648 <fsm_automatic_run+0x4fc>)
 800052a:	2215      	movs	r2, #21
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	e007      	b.n	8000540 <fsm_automatic_run+0x3f4>
 8000530:	bf00      	nop
 8000532:	e006      	b.n	8000542 <fsm_automatic_run+0x3f6>
 8000534:	bf00      	nop
 8000536:	e004      	b.n	8000542 <fsm_automatic_run+0x3f6>
 8000538:	bf00      	nop
 800053a:	e002      	b.n	8000542 <fsm_automatic_run+0x3f6>
 800053c:	bf00      	nop
 800053e:	e000      	b.n	8000542 <fsm_automatic_run+0x3f6>
 8000540:	bf00      	nop
 8000542:	2001      	movs	r0, #1
 8000544:	f000 fd6c 	bl	8001020 <isButtonPressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d14d      	bne.n	80005ea <fsm_automatic_run+0x49e>
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <fsm_automatic_run+0x4fc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b15      	cmp	r3, #21
 8000554:	d00b      	beq.n	800056e <fsm_automatic_run+0x422>
 8000556:	4b3c      	ldr	r3, [pc, #240]	; (8000648 <fsm_automatic_run+0x4fc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b16      	cmp	r3, #22
 800055c:	d007      	beq.n	800056e <fsm_automatic_run+0x422>
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <fsm_automatic_run+0x4fc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b17      	cmp	r3, #23
 8000564:	d003      	beq.n	800056e <fsm_automatic_run+0x422>
 8000566:	4b38      	ldr	r3, [pc, #224]	; (8000648 <fsm_automatic_run+0x4fc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b18      	cmp	r3, #24
 800056c:	d139      	bne.n	80005e2 <fsm_automatic_run+0x496>
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <fsm_automatic_run+0x4fc>)
 8000570:	220b      	movs	r2, #11
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	210a      	movs	r1, #10
 8000576:	2001      	movs	r0, #1
 8000578:	f001 f9b4 	bl	80018e4 <setTimer>
 800057c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000580:	2005      	movs	r0, #5
 8000582:	f001 f9af 	bl	80018e4 <setTimer>
 8000586:	2102      	movs	r1, #2
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fbe7 	bl	8000d5c <Traffic_setColor>
 800058e:	2102      	movs	r1, #2
 8000590:	2002      	movs	r0, #2
 8000592:	f000 fbe3 	bl	8000d5c <Traffic_setColor>
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <fsm_automatic_run+0x4ec>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a28      	ldr	r2, [pc, #160]	; (800063c <fsm_automatic_run+0x4f0>)
 800059c:	fb82 1203 	smull	r1, r2, r2, r3
 80005a0:	1192      	asrs	r2, r2, #6
 80005a2:	17db      	asrs	r3, r3, #31
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	4a29      	ldr	r2, [pc, #164]	; (800064c <fsm_automatic_run+0x500>)
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <fsm_automatic_run+0x504>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a23      	ldr	r2, [pc, #140]	; (800063c <fsm_automatic_run+0x4f0>)
 80005b0:	fb82 1203 	smull	r1, r2, r2, r3
 80005b4:	1192      	asrs	r2, r2, #6
 80005b6:	17db      	asrs	r3, r3, #31
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	4a26      	ldr	r2, [pc, #152]	; (8000654 <fsm_automatic_run+0x508>)
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <fsm_automatic_run+0x4f4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <fsm_automatic_run+0x4f0>)
 80005c4:	fb82 1203 	smull	r1, r2, r2, r3
 80005c8:	1192      	asrs	r2, r2, #6
 80005ca:	17db      	asrs	r3, r3, #31
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	4a22      	ldr	r2, [pc, #136]	; (8000658 <fsm_automatic_run+0x50c>)
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <fsm_automatic_run+0x500>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <fsm_automatic_run+0x4d8>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <fsm_automatic_run+0x4e4>)
 80005dc:	2202      	movs	r2, #2
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e019      	b.n	8000616 <fsm_automatic_run+0x4ca>
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fd3e 	bl	8001064 <setBackButtonFlag>
 80005e8:	e015      	b.n	8000616 <fsm_automatic_run+0x4ca>
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fd18 	bl	8001020 <isButtonPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10f      	bne.n	8000616 <fsm_automatic_run+0x4ca>
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <fsm_automatic_run+0x510>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8000600:	2002      	movs	r0, #2
 8000602:	f001 f96f 	bl	80018e4 <setTimer>
 8000606:	2164      	movs	r1, #100	; 0x64
 8000608:	2003      	movs	r0, #3
 800060a:	f001 f96b 	bl	80018e4 <setTimer>
 800060e:	2164      	movs	r1, #100	; 0x64
 8000610:	2004      	movs	r0, #4
 8000612:	f001 f967 	bl	80018e4 <setTimer>
 8000616:	bf00      	nop
 8000618:	3738      	adds	r7, #56	; 0x38
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200001ec 	.word	0x200001ec
 8000624:	200000d8 	.word	0x200000d8
 8000628:	08005114 	.word	0x08005114
 800062c:	200002cc 	.word	0x200002cc
 8000630:	200000dc 	.word	0x200000dc
 8000634:	08005124 	.word	0x08005124
 8000638:	2000001c 	.word	0x2000001c
 800063c:	10624dd3 	.word	0x10624dd3
 8000640:	20000024 	.word	0x20000024
 8000644:	200001f4 	.word	0x200001f4
 8000648:	20000018 	.word	0x20000018
 800064c:	20000238 	.word	0x20000238
 8000650:	20000020 	.word	0x20000020
 8000654:	20000234 	.word	0x20000234
 8000658:	20000230 	.word	0x20000230
 800065c:	200000d0 	.word	0x200000d0

08000660 <returnAutomatic>:
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <returnAutomatic+0x58>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <returnAutomatic+0x5c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <returnAutomatic+0x60>)
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <returnAutomatic+0x58>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <returnAutomatic+0x64>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	1192      	asrs	r2, r2, #6
 800067e:	17db      	asrs	r3, r3, #31
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <returnAutomatic+0x68>)
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <returnAutomatic+0x60>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <returnAutomatic+0x64>)
 800068c:	fb82 1203 	smull	r1, r2, r2, r3
 8000690:	1192      	asrs	r2, r2, #6
 8000692:	17db      	asrs	r3, r3, #31
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <returnAutomatic+0x6c>)
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <returnAutomatic+0x60>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	2000      	movs	r0, #0
 80006a2:	f001 f91f 	bl	80018e4 <setTimer>
 80006a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006aa:	f001 f8ff 	bl	80018ac <setTimerSecond>
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <returnAutomatic+0x70>)
 80006b0:	2215      	movs	r2, #21
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000001c 	.word	0x2000001c
 80006bc:	20000020 	.word	0x20000020
 80006c0:	20000024 	.word	0x20000024
 80006c4:	10624dd3 	.word	0x10624dd3
 80006c8:	200000d8 	.word	0x200000d8
 80006cc:	200000dc 	.word	0x200000dc
 80006d0:	20000018 	.word	0x20000018

080006d4 <fsm_manual_run>:
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4bab      	ldr	r3, [pc, #684]	; (8000988 <fsm_manual_run+0x2b4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b0d      	cmp	r3, #13
 80006e0:	f000 80db 	beq.w	800089a <fsm_manual_run+0x1c6>
 80006e4:	2b0d      	cmp	r3, #13
 80006e6:	f300 8131 	bgt.w	800094c <fsm_manual_run+0x278>
 80006ea:	2b0b      	cmp	r3, #11
 80006ec:	d002      	beq.n	80006f4 <fsm_manual_run+0x20>
 80006ee:	2b0c      	cmp	r3, #12
 80006f0:	d064      	beq.n	80007bc <fsm_manual_run+0xe8>
 80006f2:	e12b      	b.n	800094c <fsm_manual_run+0x278>
 80006f4:	4ba5      	ldr	r3, [pc, #660]	; (800098c <fsm_manual_run+0x2b8>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d10b      	bne.n	8000714 <fsm_manual_run+0x40>
 80006fc:	21fa      	movs	r1, #250	; 0xfa
 80006fe:	2001      	movs	r0, #1
 8000700:	f001 f8f0 	bl	80018e4 <setTimer>
 8000704:	2102      	movs	r1, #2
 8000706:	2007      	movs	r0, #7
 8000708:	f000 fa96 	bl	8000c38 <blinkLEDs>
 800070c:	2102      	movs	r1, #2
 800070e:	2008      	movs	r0, #8
 8000710:	f000 fa92 	bl	8000c38 <blinkLEDs>
 8000714:	2002      	movs	r0, #2
 8000716:	f000 fc83 	bl	8001020 <isButtonPressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d119      	bne.n	8000754 <fsm_manual_run+0x80>
 8000720:	f241 3188 	movw	r1, #5000	; 0x1388
 8000724:	2005      	movs	r0, #5
 8000726:	f001 f8dd 	bl	80018e4 <setTimer>
 800072a:	4b99      	ldr	r3, [pc, #612]	; (8000990 <fsm_manual_run+0x2bc>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a97      	ldr	r2, [pc, #604]	; (8000990 <fsm_manual_run+0x2bc>)
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b96      	ldr	r3, [pc, #600]	; (8000990 <fsm_manual_run+0x2bc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b63      	cmp	r3, #99	; 0x63
 800073a:	dd06      	ble.n	800074a <fsm_manual_run+0x76>
 800073c:	4b94      	ldr	r3, [pc, #592]	; (8000990 <fsm_manual_run+0x2bc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	4b94      	ldr	r3, [pc, #592]	; (8000994 <fsm_manual_run+0x2c0>)
 8000744:	2201      	movs	r2, #1
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	e004      	b.n	8000754 <fsm_manual_run+0x80>
 800074a:	4b92      	ldr	r3, [pc, #584]	; (8000994 <fsm_manual_run+0x2c0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a90      	ldr	r2, [pc, #576]	; (8000994 <fsm_manual_run+0x2c0>)
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	2003      	movs	r0, #3
 8000756:	f000 fc63 	bl	8001020 <isButtonPressed>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10c      	bne.n	800077a <fsm_manual_run+0xa6>
 8000760:	f241 3188 	movw	r1, #5000	; 0x1388
 8000764:	2005      	movs	r0, #5
 8000766:	f001 f8bd 	bl	80018e4 <setTimer>
 800076a:	4b89      	ldr	r3, [pc, #548]	; (8000990 <fsm_manual_run+0x2bc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	4a88      	ldr	r2, [pc, #544]	; (8000998 <fsm_manual_run+0x2c4>)
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fc50 	bl	8001020 <isButtonPressed>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	f040 80e4 	bne.w	8000950 <fsm_manual_run+0x27c>
 8000788:	f241 3188 	movw	r1, #5000	; 0x1388
 800078c:	2005      	movs	r0, #5
 800078e:	f001 f8a9 	bl	80018e4 <setTimer>
 8000792:	210a      	movs	r1, #10
 8000794:	2001      	movs	r0, #1
 8000796:	f001 f8a5 	bl	80018e4 <setTimer>
 800079a:	4b7b      	ldr	r3, [pc, #492]	; (8000988 <fsm_manual_run+0x2b4>)
 800079c:	220c      	movs	r2, #12
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	4b7e      	ldr	r3, [pc, #504]	; (800099c <fsm_manual_run+0x2c8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a7e      	ldr	r2, [pc, #504]	; (80009a0 <fsm_manual_run+0x2cc>)
 80007a6:	fb82 1203 	smull	r1, r2, r2, r3
 80007aa:	1192      	asrs	r2, r2, #6
 80007ac:	17db      	asrs	r3, r3, #31
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	4a78      	ldr	r2, [pc, #480]	; (8000994 <fsm_manual_run+0x2c0>)
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b7b      	ldr	r3, [pc, #492]	; (80009a4 <fsm_manual_run+0x2d0>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	e0c9      	b.n	8000950 <fsm_manual_run+0x27c>
 80007bc:	4b73      	ldr	r3, [pc, #460]	; (800098c <fsm_manual_run+0x2b8>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10b      	bne.n	80007dc <fsm_manual_run+0x108>
 80007c4:	21fa      	movs	r1, #250	; 0xfa
 80007c6:	2001      	movs	r0, #1
 80007c8:	f001 f88c 	bl	80018e4 <setTimer>
 80007cc:	2104      	movs	r1, #4
 80007ce:	2007      	movs	r0, #7
 80007d0:	f000 fa32 	bl	8000c38 <blinkLEDs>
 80007d4:	2104      	movs	r1, #4
 80007d6:	2008      	movs	r0, #8
 80007d8:	f000 fa2e 	bl	8000c38 <blinkLEDs>
 80007dc:	2002      	movs	r0, #2
 80007de:	f000 fc1f 	bl	8001020 <isButtonPressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d119      	bne.n	800081c <fsm_manual_run+0x148>
 80007e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80007ec:	2005      	movs	r0, #5
 80007ee:	f001 f879 	bl	80018e4 <setTimer>
 80007f2:	4b6d      	ldr	r3, [pc, #436]	; (80009a8 <fsm_manual_run+0x2d4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a6b      	ldr	r2, [pc, #428]	; (80009a8 <fsm_manual_run+0x2d4>)
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b6a      	ldr	r3, [pc, #424]	; (80009a8 <fsm_manual_run+0x2d4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b63      	cmp	r3, #99	; 0x63
 8000802:	dd06      	ble.n	8000812 <fsm_manual_run+0x13e>
 8000804:	4b68      	ldr	r3, [pc, #416]	; (80009a8 <fsm_manual_run+0x2d4>)
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	4b62      	ldr	r3, [pc, #392]	; (8000994 <fsm_manual_run+0x2c0>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e004      	b.n	800081c <fsm_manual_run+0x148>
 8000812:	4b60      	ldr	r3, [pc, #384]	; (8000994 <fsm_manual_run+0x2c0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a5e      	ldr	r2, [pc, #376]	; (8000994 <fsm_manual_run+0x2c0>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	2003      	movs	r0, #3
 800081e:	f000 fbff 	bl	8001020 <isButtonPressed>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d118      	bne.n	800085a <fsm_manual_run+0x186>
 8000828:	f241 3188 	movw	r1, #5000	; 0x1388
 800082c:	2005      	movs	r0, #5
 800082e:	f001 f859 	bl	80018e4 <setTimer>
 8000832:	4b5a      	ldr	r3, [pc, #360]	; (800099c <fsm_manual_run+0x2c8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b5b      	ldr	r3, [pc, #364]	; (80009a8 <fsm_manual_run+0x2d4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	4a55      	ldr	r2, [pc, #340]	; (800099c <fsm_manual_run+0x2c8>)
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b54      	ldr	r3, [pc, #336]	; (800099c <fsm_manual_run+0x2c8>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b52      	ldr	r3, [pc, #328]	; (8000998 <fsm_manual_run+0x2c4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	dd02      	ble.n	800085a <fsm_manual_run+0x186>
 8000854:	4a51      	ldr	r2, [pc, #324]	; (800099c <fsm_manual_run+0x2c8>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	2001      	movs	r0, #1
 800085c:	f000 fbe0 	bl	8001020 <isButtonPressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d176      	bne.n	8000954 <fsm_manual_run+0x280>
 8000866:	210a      	movs	r1, #10
 8000868:	2001      	movs	r0, #1
 800086a:	f001 f83b 	bl	80018e4 <setTimer>
 800086e:	4b46      	ldr	r3, [pc, #280]	; (8000988 <fsm_manual_run+0x2b4>)
 8000870:	220d      	movs	r2, #13
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <fsm_manual_run+0x2d8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a49      	ldr	r2, [pc, #292]	; (80009a0 <fsm_manual_run+0x2cc>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	1192      	asrs	r2, r2, #6
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	4a43      	ldr	r2, [pc, #268]	; (8000994 <fsm_manual_run+0x2c0>)
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b46      	ldr	r3, [pc, #280]	; (80009a4 <fsm_manual_run+0x2d0>)
 800088a:	2204      	movs	r2, #4
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000892:	2005      	movs	r0, #5
 8000894:	f001 f826 	bl	80018e4 <setTimer>
 8000898:	e05c      	b.n	8000954 <fsm_manual_run+0x280>
 800089a:	4b3c      	ldr	r3, [pc, #240]	; (800098c <fsm_manual_run+0x2b8>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10b      	bne.n	80008ba <fsm_manual_run+0x1e6>
 80008a2:	21fa      	movs	r1, #250	; 0xfa
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 f81d 	bl	80018e4 <setTimer>
 80008aa:	2103      	movs	r1, #3
 80008ac:	2007      	movs	r0, #7
 80008ae:	f000 f9c3 	bl	8000c38 <blinkLEDs>
 80008b2:	2103      	movs	r1, #3
 80008b4:	2008      	movs	r0, #8
 80008b6:	f000 f9bf 	bl	8000c38 <blinkLEDs>
 80008ba:	2002      	movs	r0, #2
 80008bc:	f000 fbb0 	bl	8001020 <isButtonPressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d119      	bne.n	80008fa <fsm_manual_run+0x226>
 80008c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80008ca:	2005      	movs	r0, #5
 80008cc:	f001 f80a 	bl	80018e4 <setTimer>
 80008d0:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <fsm_manual_run+0x2dc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a36      	ldr	r2, [pc, #216]	; (80009b0 <fsm_manual_run+0x2dc>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <fsm_manual_run+0x2dc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b63      	cmp	r3, #99	; 0x63
 80008e0:	dd06      	ble.n	80008f0 <fsm_manual_run+0x21c>
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <fsm_manual_run+0x2dc>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <fsm_manual_run+0x2c0>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	e004      	b.n	80008fa <fsm_manual_run+0x226>
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <fsm_manual_run+0x2c0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a27      	ldr	r2, [pc, #156]	; (8000994 <fsm_manual_run+0x2c0>)
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	2003      	movs	r0, #3
 80008fc:	f000 fb90 	bl	8001020 <isButtonPressed>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d119      	bne.n	800093a <fsm_manual_run+0x266>
 8000906:	f241 3188 	movw	r1, #5000	; 0x1388
 800090a:	2005      	movs	r0, #5
 800090c:	f000 ffea 	bl	80018e4 <setTimer>
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <fsm_manual_run+0x2dc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	4a23      	ldr	r2, [pc, #140]	; (80009ac <fsm_manual_run+0x2d8>)
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <fsm_manual_run+0x2d8>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <fsm_manual_run+0x2c4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	da06      	bge.n	800093a <fsm_manual_run+0x266>
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <fsm_manual_run+0x2c4>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <fsm_manual_run+0x2d8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <fsm_manual_run+0x2c8>)
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	2001      	movs	r0, #1
 800093c:	f000 fb70 	bl	8001020 <isButtonPressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d108      	bne.n	8000958 <fsm_manual_run+0x284>
 8000946:	f7ff fe8b 	bl	8000660 <returnAutomatic>
 800094a:	e005      	b.n	8000958 <fsm_manual_run+0x284>
 800094c:	bf00      	nop
 800094e:	e004      	b.n	800095a <fsm_manual_run+0x286>
 8000950:	bf00      	nop
 8000952:	e002      	b.n	800095a <fsm_manual_run+0x286>
 8000954:	bf00      	nop
 8000956:	e000      	b.n	800095a <fsm_manual_run+0x286>
 8000958:	bf00      	nop
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <fsm_manual_run+0x2b4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b0b      	cmp	r3, #11
 8000960:	d007      	beq.n	8000972 <fsm_manual_run+0x29e>
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <fsm_manual_run+0x2b4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b0c      	cmp	r3, #12
 8000968:	d003      	beq.n	8000972 <fsm_manual_run+0x29e>
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <fsm_manual_run+0x2b4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b0d      	cmp	r3, #13
 8000970:	d105      	bne.n	800097e <fsm_manual_run+0x2aa>
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <fsm_manual_run+0x2b8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d101      	bne.n	800097e <fsm_manual_run+0x2aa>
 800097a:	f7ff fe71 	bl	8000660 <returnAutomatic>
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000018 	.word	0x20000018
 800098c:	200001f4 	.word	0x200001f4
 8000990:	20000238 	.word	0x20000238
 8000994:	200000d8 	.word	0x200000d8
 8000998:	2000001c 	.word	0x2000001c
 800099c:	20000020 	.word	0x20000020
 80009a0:	10624dd3 	.word	0x10624dd3
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	20000234 	.word	0x20000234
 80009ac:	20000024 	.word	0x20000024
 80009b0:	20000230 	.word	0x20000230

080009b4 <buzzerProcess>:
int pedestrianStatus = INIT;
int speed[5] = {400, 300, 200, 100, 50};
int indexForSpeed = 0;

// Function to handle the buzzer process
void buzzerProcess(int value) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    buzzer_value = value;
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <buzzerProcess+0x1c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
    buzzer();
 80009c2:	f001 f98b 	bl	8001cdc <buzzer>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000e0 	.word	0x200000e0

080009d4 <fsm_pedestrian_run>:

void fsm_pedestrian_run() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
    int needMore = 5 - (durationYELLOW / 1000);
 80009da:	4b8e      	ldr	r3, [pc, #568]	; (8000c14 <fsm_pedestrian_run+0x240>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a8e      	ldr	r2, [pc, #568]	; (8000c18 <fsm_pedestrian_run+0x244>)
 80009e0:	fb82 1203 	smull	r1, r2, r2, r3
 80009e4:	1192      	asrs	r2, r2, #6
 80009e6:	17db      	asrs	r3, r3, #31
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	3305      	adds	r3, #5
 80009ec:	607b      	str	r3, [r7, #4]
    switch (pedestrianStatus) {
 80009ee:	4b8b      	ldr	r3, [pc, #556]	; (8000c1c <fsm_pedestrian_run+0x248>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d039      	beq.n	8000a6a <fsm_pedestrian_run+0x96>
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	f300 8100 	bgt.w	8000bfc <fsm_pedestrian_run+0x228>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d003      	beq.n	8000a08 <fsm_pedestrian_run+0x34>
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	f000 80d6 	beq.w	8000bb2 <fsm_pedestrian_run+0x1de>
                pedestrianStatus = AUTO_GREEN;
            }
            break;

        default:
            break;
 8000a06:	e0f9      	b.n	8000bfc <fsm_pedestrian_run+0x228>
            buzzerProcess(0);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff ffd3 	bl	80009b4 <buzzerProcess>
            indexForSpeed = 0;
 8000a0e:	4b84      	ldr	r3, [pc, #528]	; (8000c20 <fsm_pedestrian_run+0x24c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
            setTimer(3, 10);
 8000a14:	210a      	movs	r1, #10
 8000a16:	2003      	movs	r0, #3
 8000a18:	f000 ff64 	bl	80018e4 <setTimer>
            setTimer(4, 10);
 8000a1c:	210a      	movs	r1, #10
 8000a1e:	2004      	movs	r0, #4
 8000a20:	f000 ff60 	bl	80018e4 <setTimer>
            Pedestrian_setColor(OFF_LED);
 8000a24:	2005      	movs	r0, #5
 8000a26:	f000 fa2d 	bl	8000e84 <Pedestrian_setColor>
            if (pedestrianFlag == 1) {
 8000a2a:	4b7e      	ldr	r3, [pc, #504]	; (8000c24 <fsm_pedestrian_run+0x250>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	f040 80e6 	bne.w	8000c00 <fsm_pedestrian_run+0x22c>
                if (status == RED_GREEN || status == RED_YELLOW) {
 8000a34:	4b7c      	ldr	r3, [pc, #496]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b15      	cmp	r3, #21
 8000a3a:	d003      	beq.n	8000a44 <fsm_pedestrian_run+0x70>
 8000a3c:	4b7a      	ldr	r3, [pc, #488]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b16      	cmp	r3, #22
 8000a42:	d103      	bne.n	8000a4c <fsm_pedestrian_run+0x78>
                    pedestrianStatus = AUTO_GREEN;
 8000a44:	4b75      	ldr	r3, [pc, #468]	; (8000c1c <fsm_pedestrian_run+0x248>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e00a      	b.n	8000a62 <fsm_pedestrian_run+0x8e>
                } else if (status == YELLOW_RED || status == GREEN_RED) {
 8000a4c:	4b76      	ldr	r3, [pc, #472]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b18      	cmp	r3, #24
 8000a52:	d003      	beq.n	8000a5c <fsm_pedestrian_run+0x88>
 8000a54:	4b74      	ldr	r3, [pc, #464]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b17      	cmp	r3, #23
 8000a5a:	d102      	bne.n	8000a62 <fsm_pedestrian_run+0x8e>
                    pedestrianStatus = AUTO_RED;
 8000a5c:	4b6f      	ldr	r3, [pc, #444]	; (8000c1c <fsm_pedestrian_run+0x248>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	601a      	str	r2, [r3, #0]
                pedestrianFlag = 0; // Make sure to restart the flag
 8000a62:	4b70      	ldr	r3, [pc, #448]	; (8000c24 <fsm_pedestrian_run+0x250>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
            break;
 8000a68:	e0ca      	b.n	8000c00 <fsm_pedestrian_run+0x22c>
            Pedestrian_setColor(AUTO_GREEN);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 fa0a 	bl	8000e84 <Pedestrian_setColor>
            if (timerFlag[2] == 1) pedestrianStatus = INIT;
 8000a70:	4b6e      	ldr	r3, [pc, #440]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d103      	bne.n	8000a80 <fsm_pedestrian_run+0xac>
 8000a78:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <fsm_pedestrian_run+0x248>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e00a      	b.n	8000a96 <fsm_pedestrian_run+0xc2>
            else if (status == YELLOW_RED || status == GREEN_RED) pedestrianStatus = AUTO_RED;
 8000a80:	4b69      	ldr	r3, [pc, #420]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b18      	cmp	r3, #24
 8000a86:	d003      	beq.n	8000a90 <fsm_pedestrian_run+0xbc>
 8000a88:	4b67      	ldr	r3, [pc, #412]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b17      	cmp	r3, #23
 8000a8e:	d102      	bne.n	8000a96 <fsm_pedestrian_run+0xc2>
 8000a90:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <fsm_pedestrian_run+0x248>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]
            if (durationYELLOW < 5000) {
 8000a96:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <fsm_pedestrian_run+0x240>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	dc55      	bgt.n	8000b4e <fsm_pedestrian_run+0x17a>
                if (status == RED_GREEN && timerTraffic2 <= needMore) {
 8000aa2:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b15      	cmp	r3, #21
 8000aa8:	d12a      	bne.n	8000b00 <fsm_pedestrian_run+0x12c>
 8000aaa:	4b61      	ldr	r3, [pc, #388]	; (8000c30 <fsm_pedestrian_run+0x25c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	db25      	blt.n	8000b00 <fsm_pedestrian_run+0x12c>
                    indexForSpeed = needMore - timerTraffic2;
 8000ab4:	4b5e      	ldr	r3, [pc, #376]	; (8000c30 <fsm_pedestrian_run+0x25c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	4a58      	ldr	r2, [pc, #352]	; (8000c20 <fsm_pedestrian_run+0x24c>)
 8000abe:	6013      	str	r3, [r2, #0]
                    if (timerFlag[3] == 1) {
 8000ac0:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d113      	bne.n	8000af0 <fsm_pedestrian_run+0x11c>
                        buzzerProcess(512 * (1 + indexForSpeed));
 8000ac8:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <fsm_pedestrian_run+0x24c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	025b      	lsls	r3, r3, #9
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff6f 	bl	80009b4 <buzzerProcess>
                        setTimer(3, speed[indexForSpeed]); // Set the speed through array
 8000ad6:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <fsm_pedestrian_run+0x24c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a56      	ldr	r2, [pc, #344]	; (8000c34 <fsm_pedestrian_run+0x260>)
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 fefe 	bl	80018e4 <setTimer>
                        setTimer(4, 20); // Set delay for turn off buzzer
 8000ae8:	2114      	movs	r1, #20
 8000aea:	2004      	movs	r0, #4
 8000aec:	f000 fefa 	bl	80018e4 <setTimer>
                    if (timerFlag[4]==1){
 8000af0:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d15b      	bne.n	8000bb0 <fsm_pedestrian_run+0x1dc>
                    	buzzerProcess(0);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff ff5b 	bl	80009b4 <buzzerProcess>
                    if (timerFlag[4]==1){
 8000afe:	e057      	b.n	8000bb0 <fsm_pedestrian_run+0x1dc>
                } else if (status == RED_YELLOW) {
 8000b00:	4b49      	ldr	r3, [pc, #292]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b16      	cmp	r3, #22
 8000b06:	d17d      	bne.n	8000c04 <fsm_pedestrian_run+0x230>
                    if (timerFlag[3] == 1) {
 8000b08:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d116      	bne.n	8000b3e <fsm_pedestrian_run+0x16a>
                        buzzerProcess(512 * (5 - timerTraffic2 + 1));
 8000b10:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <fsm_pedestrian_run+0x25c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1c3 0306 	rsb	r3, r3, #6
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff4a 	bl	80009b4 <buzzerProcess>
                        setTimer(3, speed[5 - timerTraffic2]);
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <fsm_pedestrian_run+0x25c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1c3 0305 	rsb	r3, r3, #5
 8000b28:	4a42      	ldr	r2, [pc, #264]	; (8000c34 <fsm_pedestrian_run+0x260>)
 8000b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fed7 	bl	80018e4 <setTimer>
                        setTimer(4, 20);
 8000b36:	2114      	movs	r1, #20
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f000 fed3 	bl	80018e4 <setTimer>
                    if (timerFlag[4] == 1) {
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d15e      	bne.n	8000c04 <fsm_pedestrian_run+0x230>
                        buzzerProcess(0);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff ff34 	bl	80009b4 <buzzerProcess>
            break;
 8000b4c:	e05a      	b.n	8000c04 <fsm_pedestrian_run+0x230>
            } else if (durationYELLOW >= 5000 && status == RED_YELLOW && timerTraffic2 <= 5) {
 8000b4e:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <fsm_pedestrian_run+0x240>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b56:	4293      	cmp	r3, r2
 8000b58:	dd54      	ble.n	8000c04 <fsm_pedestrian_run+0x230>
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b16      	cmp	r3, #22
 8000b60:	d150      	bne.n	8000c04 <fsm_pedestrian_run+0x230>
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <fsm_pedestrian_run+0x25c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	dc4c      	bgt.n	8000c04 <fsm_pedestrian_run+0x230>
                if (timerFlag[3] == 1) {
 8000b6a:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d116      	bne.n	8000ba0 <fsm_pedestrian_run+0x1cc>
                    buzzerProcess(512 * (5 - timerTraffic2 + 1));
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <fsm_pedestrian_run+0x25c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f1c3 0306 	rsb	r3, r3, #6
 8000b7a:	025b      	lsls	r3, r3, #9
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff19 	bl	80009b4 <buzzerProcess>
                    setTimer(3, speed[5 - timerTraffic2]);
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <fsm_pedestrian_run+0x25c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f1c3 0305 	rsb	r3, r3, #5
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	; (8000c34 <fsm_pedestrian_run+0x260>)
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	4619      	mov	r1, r3
 8000b92:	2003      	movs	r0, #3
 8000b94:	f000 fea6 	bl	80018e4 <setTimer>
                    setTimer(4, 20);
 8000b98:	2114      	movs	r1, #20
 8000b9a:	2004      	movs	r0, #4
 8000b9c:	f000 fea2 	bl	80018e4 <setTimer>
                if (timerFlag[4] == 1) {
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d12d      	bne.n	8000c04 <fsm_pedestrian_run+0x230>
                    buzzerProcess(0);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff ff03 	bl	80009b4 <buzzerProcess>
            break;
 8000bae:	e029      	b.n	8000c04 <fsm_pedestrian_run+0x230>
 8000bb0:	e028      	b.n	8000c04 <fsm_pedestrian_run+0x230>
            buzzerProcess(0);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff fefe 	bl	80009b4 <buzzerProcess>
            indexForSpeed = 0;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <fsm_pedestrian_run+0x24c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
            setTimer(3, 10);
 8000bbe:	210a      	movs	r1, #10
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 fe8f 	bl	80018e4 <setTimer>
            setTimer(4, 10);
 8000bc6:	210a      	movs	r1, #10
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f000 fe8b 	bl	80018e4 <setTimer>
            Pedestrian_setColor(AUTO_RED);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f958 	bl	8000e84 <Pedestrian_setColor>
            if (timerFlag[2] == 1) {
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <fsm_pedestrian_run+0x258>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d103      	bne.n	8000be4 <fsm_pedestrian_run+0x210>
                pedestrianStatus = INIT;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <fsm_pedestrian_run+0x248>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
            break;
 8000be2:	e011      	b.n	8000c08 <fsm_pedestrian_run+0x234>
            } else if (status == RED_GREEN || status == RED_YELLOW) {
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b15      	cmp	r3, #21
 8000bea:	d003      	beq.n	8000bf4 <fsm_pedestrian_run+0x220>
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <fsm_pedestrian_run+0x254>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b16      	cmp	r3, #22
 8000bf2:	d109      	bne.n	8000c08 <fsm_pedestrian_run+0x234>
                pedestrianStatus = AUTO_GREEN;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <fsm_pedestrian_run+0x248>)
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	601a      	str	r2, [r3, #0]
            break;
 8000bfa:	e005      	b.n	8000c08 <fsm_pedestrian_run+0x234>
            break;
 8000bfc:	bf00      	nop
 8000bfe:	e004      	b.n	8000c0a <fsm_pedestrian_run+0x236>
            break;
 8000c00:	bf00      	nop
 8000c02:	e002      	b.n	8000c0a <fsm_pedestrian_run+0x236>
            break;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <fsm_pedestrian_run+0x236>
            break;
 8000c08:	bf00      	nop
    }
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000020 	.word	0x20000020
 8000c18:	10624dd3 	.word	0x10624dd3
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	200000d4 	.word	0x200000d4
 8000c24:	200000d0 	.word	0x200000d0
 8000c28:	20000018 	.word	0x20000018
 8000c2c:	200001f4 	.word	0x200001f4
 8000c30:	200000dc 	.word	0x200000dc
 8000c34:	20000004 	.word	0x20000004

08000c38 <blinkLEDs>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d13c      	bne.n	8000cc2 <blinkLEDs+0x8a>
 8000c48:	4b42      	ldr	r3, [pc, #264]	; (8000d54 <blinkLEDs+0x11c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f1c3 0301 	rsb	r3, r3, #1
 8000c50:	4a40      	ldr	r2, [pc, #256]	; (8000d54 <blinkLEDs+0x11c>)
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d017      	beq.n	8000c8a <blinkLEDs+0x52>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	dc70      	bgt.n	8000d42 <blinkLEDs+0x10a>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d003      	beq.n	8000c6e <blinkLEDs+0x36>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d01c      	beq.n	8000ca6 <blinkLEDs+0x6e>
 8000c6c:	e069      	b.n	8000d42 <blinkLEDs+0x10a>
 8000c6e:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <blinkLEDs+0x11c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <blinkLEDs+0x48>
 8000c76:	2102      	movs	r1, #2
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 f86f 	bl	8000d5c <Traffic_setColor>
 8000c7e:	e065      	b.n	8000d4c <blinkLEDs+0x114>
 8000c80:	2105      	movs	r1, #5
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 f86a 	bl	8000d5c <Traffic_setColor>
 8000c88:	e060      	b.n	8000d4c <blinkLEDs+0x114>
 8000c8a:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <blinkLEDs+0x11c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d004      	beq.n	8000c9c <blinkLEDs+0x64>
 8000c92:	2104      	movs	r1, #4
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 f861 	bl	8000d5c <Traffic_setColor>
 8000c9a:	e057      	b.n	8000d4c <blinkLEDs+0x114>
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f000 f85c 	bl	8000d5c <Traffic_setColor>
 8000ca4:	e052      	b.n	8000d4c <blinkLEDs+0x114>
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <blinkLEDs+0x11c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d004      	beq.n	8000cb8 <blinkLEDs+0x80>
 8000cae:	2103      	movs	r1, #3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 f853 	bl	8000d5c <Traffic_setColor>
 8000cb6:	e049      	b.n	8000d4c <blinkLEDs+0x114>
 8000cb8:	2105      	movs	r1, #5
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 f84e 	bl	8000d5c <Traffic_setColor>
 8000cc0:	e044      	b.n	8000d4c <blinkLEDs+0x114>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d13e      	bne.n	8000d46 <blinkLEDs+0x10e>
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <blinkLEDs+0x120>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1c3 0301 	rsb	r3, r3, #1
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <blinkLEDs+0x120>)
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d017      	beq.n	8000d0a <blinkLEDs+0xd2>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	dc34      	bgt.n	8000d4a <blinkLEDs+0x112>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d003      	beq.n	8000cee <blinkLEDs+0xb6>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d01c      	beq.n	8000d26 <blinkLEDs+0xee>
 8000cec:	e02d      	b.n	8000d4a <blinkLEDs+0x112>
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <blinkLEDs+0x120>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d004      	beq.n	8000d00 <blinkLEDs+0xc8>
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f000 f82f 	bl	8000d5c <Traffic_setColor>
 8000cfe:	e025      	b.n	8000d4c <blinkLEDs+0x114>
 8000d00:	2105      	movs	r1, #5
 8000d02:	2002      	movs	r0, #2
 8000d04:	f000 f82a 	bl	8000d5c <Traffic_setColor>
 8000d08:	e020      	b.n	8000d4c <blinkLEDs+0x114>
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <blinkLEDs+0x120>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <blinkLEDs+0xe4>
 8000d12:	2104      	movs	r1, #4
 8000d14:	2002      	movs	r0, #2
 8000d16:	f000 f821 	bl	8000d5c <Traffic_setColor>
 8000d1a:	e017      	b.n	8000d4c <blinkLEDs+0x114>
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f000 f81c 	bl	8000d5c <Traffic_setColor>
 8000d24:	e012      	b.n	8000d4c <blinkLEDs+0x114>
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <blinkLEDs+0x120>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <blinkLEDs+0x100>
 8000d2e:	2103      	movs	r1, #3
 8000d30:	2002      	movs	r0, #2
 8000d32:	f000 f813 	bl	8000d5c <Traffic_setColor>
 8000d36:	e009      	b.n	8000d4c <blinkLEDs+0x114>
 8000d38:	2105      	movs	r1, #5
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f000 f80e 	bl	8000d5c <Traffic_setColor>
 8000d40:	e004      	b.n	8000d4c <blinkLEDs+0x114>
 8000d42:	bf00      	nop
 8000d44:	e002      	b.n	8000d4c <blinkLEDs+0x114>
 8000d46:	bf00      	nop
 8000d48:	e000      	b.n	8000d4c <blinkLEDs+0x114>
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000e4 	.word	0x200000e4
 8000d58:	200000e8 	.word	0x200000e8

08000d5c <Traffic_setColor>:
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d13f      	bne.n	8000dec <Traffic_setColor+0x90>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3b02      	subs	r3, #2
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d879      	bhi.n	8000e68 <Traffic_setColor+0x10c>
 8000d74:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <Traffic_setColor+0x20>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000d8d 	.word	0x08000d8d
 8000d80:	08000dbd 	.word	0x08000dbd
 8000d84:	08000da5 	.word	0x08000da5
 8000d88:	08000dd5 	.word	0x08000dd5
 8000d8c:	2210      	movs	r2, #16
 8000d8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d92:	483a      	ldr	r0, [pc, #232]	; (8000e7c <Traffic_setColor+0x120>)
 8000d94:	f001 fb95 	bl	80024c2 <HAL_GPIO_WritePin>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	4838      	ldr	r0, [pc, #224]	; (8000e80 <Traffic_setColor+0x124>)
 8000d9e:	f001 fb90 	bl	80024c2 <HAL_GPIO_WritePin>
 8000da2:	e066      	b.n	8000e72 <Traffic_setColor+0x116>
 8000da4:	2210      	movs	r2, #16
 8000da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000daa:	4834      	ldr	r0, [pc, #208]	; (8000e7c <Traffic_setColor+0x120>)
 8000dac:	f001 fb89 	bl	80024c2 <HAL_GPIO_WritePin>
 8000db0:	2210      	movs	r2, #16
 8000db2:	2108      	movs	r1, #8
 8000db4:	4832      	ldr	r0, [pc, #200]	; (8000e80 <Traffic_setColor+0x124>)
 8000db6:	f001 fb84 	bl	80024c2 <HAL_GPIO_WritePin>
 8000dba:	e05a      	b.n	8000e72 <Traffic_setColor+0x116>
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	482e      	ldr	r0, [pc, #184]	; (8000e7c <Traffic_setColor+0x120>)
 8000dc4:	f001 fb7d 	bl	80024c2 <HAL_GPIO_WritePin>
 8000dc8:	2210      	movs	r2, #16
 8000dca:	2108      	movs	r1, #8
 8000dcc:	482c      	ldr	r0, [pc, #176]	; (8000e80 <Traffic_setColor+0x124>)
 8000dce:	f001 fb78 	bl	80024c2 <HAL_GPIO_WritePin>
 8000dd2:	e04e      	b.n	8000e72 <Traffic_setColor+0x116>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	4828      	ldr	r0, [pc, #160]	; (8000e7c <Traffic_setColor+0x120>)
 8000ddc:	f001 fb71 	bl	80024c2 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	2108      	movs	r1, #8
 8000de4:	4826      	ldr	r0, [pc, #152]	; (8000e80 <Traffic_setColor+0x124>)
 8000de6:	f001 fb6c 	bl	80024c2 <HAL_GPIO_WritePin>
 8000dea:	e042      	b.n	8000e72 <Traffic_setColor+0x116>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d13c      	bne.n	8000e6c <Traffic_setColor+0x110>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	3b02      	subs	r3, #2
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d83a      	bhi.n	8000e70 <Traffic_setColor+0x114>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <Traffic_setColor+0xa4>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e3d 	.word	0x08000e3d
 8000e08:	08000e27 	.word	0x08000e27
 8000e0c:	08000e53 	.word	0x08000e53
 8000e10:	2210      	movs	r2, #16
 8000e12:	2120      	movs	r1, #32
 8000e14:	481a      	ldr	r0, [pc, #104]	; (8000e80 <Traffic_setColor+0x124>)
 8000e16:	f001 fb54 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <Traffic_setColor+0x124>)
 8000e20:	f001 fb4f 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e24:	e025      	b.n	8000e72 <Traffic_setColor+0x116>
 8000e26:	2210      	movs	r2, #16
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <Traffic_setColor+0x124>)
 8000e2c:	f001 fb49 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e30:	2210      	movs	r2, #16
 8000e32:	2110      	movs	r1, #16
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <Traffic_setColor+0x124>)
 8000e36:	f001 fb44 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e3a:	e01a      	b.n	8000e72 <Traffic_setColor+0x116>
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2120      	movs	r1, #32
 8000e40:	480f      	ldr	r0, [pc, #60]	; (8000e80 <Traffic_setColor+0x124>)
 8000e42:	f001 fb3e 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e46:	2210      	movs	r2, #16
 8000e48:	2110      	movs	r1, #16
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <Traffic_setColor+0x124>)
 8000e4c:	f001 fb39 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e50:	e00f      	b.n	8000e72 <Traffic_setColor+0x116>
 8000e52:	2200      	movs	r2, #0
 8000e54:	2120      	movs	r1, #32
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <Traffic_setColor+0x124>)
 8000e58:	f001 fb33 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <Traffic_setColor+0x124>)
 8000e62:	f001 fb2e 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e66:	e004      	b.n	8000e72 <Traffic_setColor+0x116>
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <Traffic_setColor+0x116>
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <Traffic_setColor+0x116>
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40010c00 	.word	0x40010c00

08000e84 <Pedestrian_setColor>:
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d10c      	bne.n	8000eac <Pedestrian_setColor+0x28>
 8000e92:	2210      	movs	r2, #16
 8000e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e98:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <Pedestrian_setColor+0x70>)
 8000e9a:	f001 fb12 	bl	80024c2 <HAL_GPIO_WritePin>
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <Pedestrian_setColor+0x74>)
 8000ea6:	f001 fb0c 	bl	80024c2 <HAL_GPIO_WritePin>
 8000eaa:	e01e      	b.n	8000eea <Pedestrian_setColor+0x66>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d10c      	bne.n	8000ecc <Pedestrian_setColor+0x48>
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <Pedestrian_setColor+0x70>)
 8000eba:	f001 fb02 	bl	80024c2 <HAL_GPIO_WritePin>
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <Pedestrian_setColor+0x74>)
 8000ec6:	f001 fafc 	bl	80024c2 <HAL_GPIO_WritePin>
 8000eca:	e00e      	b.n	8000eea <Pedestrian_setColor+0x66>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d10b      	bne.n	8000eea <Pedestrian_setColor+0x66>
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <Pedestrian_setColor+0x70>)
 8000eda:	f001 faf2 	bl	80024c2 <HAL_GPIO_WritePin>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <Pedestrian_setColor+0x74>)
 8000ee6:	f001 faec 	bl	80024c2 <HAL_GPIO_WritePin>
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	40010800 	.word	0x40010800

08000efc <button_reading>:
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	e073      	b.n	8000ff0 <button_reading+0xf4>
 8000f08:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <button_reading+0x104>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	7819      	ldrb	r1, [r3, #0]
 8000f10:	4a3c      	ldr	r2, [pc, #240]	; (8001004 <button_reading+0x108>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	460a      	mov	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	4a3b      	ldr	r2, [pc, #236]	; (8001008 <button_reading+0x10c>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	7819      	ldrb	r1, [r3, #0]
 8000f22:	4a37      	ldr	r2, [pc, #220]	; (8001000 <button_reading+0x104>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	460a      	mov	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	4a37      	ldr	r2, [pc, #220]	; (800100c <button_reading+0x110>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f34:	4936      	ldr	r1, [pc, #216]	; (8001010 <button_reading+0x114>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f001 faa8 	bl	8002494 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4619      	mov	r1, r3
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <button_reading+0x10c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	460a      	mov	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	4a2c      	ldr	r2, [pc, #176]	; (8001004 <button_reading+0x108>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	4929      	ldr	r1, [pc, #164]	; (8001000 <button_reading+0x104>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	440b      	add	r3, r1
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d141      	bne.n	8000fea <button_reading+0xee>
 8000f66:	4a26      	ldr	r2, [pc, #152]	; (8001000 <button_reading+0x104>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	4926      	ldr	r1, [pc, #152]	; (8001008 <button_reading+0x10c>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	440b      	add	r3, r1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d137      	bne.n	8000fea <button_reading+0xee>
 8000f7a:	4a23      	ldr	r2, [pc, #140]	; (8001008 <button_reading+0x10c>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	4924      	ldr	r1, [pc, #144]	; (8001014 <button_reading+0x118>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	440b      	add	r3, r1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d019      	beq.n	8000fc2 <button_reading+0xc6>
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <button_reading+0x10c>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	7819      	ldrb	r1, [r3, #0]
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <button_reading+0x118>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <button_reading+0x118>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d11e      	bne.n	8000fea <button_reading+0xee>
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <button_reading+0x11c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000fb6:	4a19      	ldr	r2, [pc, #100]	; (800101c <button_reading+0x120>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000fc0:	e013      	b.n	8000fea <button_reading+0xee>
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <button_reading+0x120>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	4913      	ldr	r1, [pc, #76]	; (800101c <button_reading+0x120>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fd4:	4a11      	ldr	r2, [pc, #68]	; (800101c <button_reading+0x120>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dc04      	bgt.n	8000fea <button_reading+0xee>
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <button_reading+0x118>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	dd88      	ble.n	8000f08 <button_reading+0xc>
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000f0 	.word	0x200000f0
 8001004:	200000f4 	.word	0x200000f4
 8001008:	200000ec 	.word	0x200000ec
 800100c:	20000034 	.word	0x20000034
 8001010:	2000002c 	.word	0x2000002c
 8001014:	20000028 	.word	0x20000028
 8001018:	200000f8 	.word	0x200000f8
 800101c:	20000108 	.word	0x20000108

08001020 <isButtonPressed>:
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	dc02      	bgt.n	8001034 <isButtonPressed+0x14>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da01      	bge.n	8001038 <isButtonPressed+0x18>
 8001034:	2300      	movs	r3, #0
 8001036:	e00d      	b.n	8001054 <isButtonPressed+0x34>
 8001038:	4a09      	ldr	r2, [pc, #36]	; (8001060 <isButtonPressed+0x40>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d106      	bne.n	8001052 <isButtonPressed+0x32>
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <isButtonPressed+0x40>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2100      	movs	r1, #0
 800104a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <isButtonPressed+0x34>
 8001052:	2300      	movs	r3, #0
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200000f8 	.word	0x200000f8

08001064 <setBackButtonFlag>:
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <setBackButtonFlag+0x1c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2101      	movs	r1, #1
 8001072:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	200000f8 	.word	0x200000f8

08001084 <main>:
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
 8001088:	f000 fe5e 	bl	8001d48 <HAL_Init>
 800108c:	f000 f85a 	bl	8001144 <SystemClock_Config>
 8001090:	f000 f986 	bl	80013a0 <MX_GPIO_Init>
 8001094:	f000 f898 	bl	80011c8 <MX_TIM2_Init>
 8001098:	f000 f8e2 	bl	8001260 <MX_TIM3_Init>
 800109c:	f000 f956 	bl	800134c <MX_USART2_UART_Init>
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <main+0x9c>)
 80010a2:	f001 fe85 	bl	8002db0 <HAL_TIM_Base_Start_IT>
 80010a6:	2100      	movs	r1, #0
 80010a8:	481e      	ldr	r0, [pc, #120]	; (8001124 <main+0xa0>)
 80010aa:	f001 ff2b 	bl	8002f04 <HAL_TIM_PWM_Start>
 80010ae:	210a      	movs	r1, #10
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 fc17 	bl	80018e4 <setTimer>
 80010b6:	210a      	movs	r1, #10
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fc13 	bl	80018e4 <setTimer>
 80010be:	210a      	movs	r1, #10
 80010c0:	2002      	movs	r0, #2
 80010c2:	f000 fc0f 	bl	80018e4 <setTimer>
 80010c6:	210a      	movs	r1, #10
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 fc0b 	bl	80018e4 <setTimer>
 80010ce:	f000 f9e5 	bl	800149c <SCH_Init>
 80010d2:	2201      	movs	r2, #1
 80010d4:	2100      	movs	r1, #0
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <main+0xa4>)
 80010d8:	f000 fa46 	bl	8001568 <SCH_Add_Task>
 80010dc:	2201      	movs	r2, #1
 80010de:	2100      	movs	r1, #0
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <main+0xa8>)
 80010e2:	f000 fa41 	bl	8001568 <SCH_Add_Task>
 80010e6:	2201      	movs	r2, #1
 80010e8:	2100      	movs	r1, #0
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <main+0xac>)
 80010ec:	f000 fa3c 	bl	8001568 <SCH_Add_Task>
 80010f0:	2201      	movs	r2, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	480f      	ldr	r0, [pc, #60]	; (8001134 <main+0xb0>)
 80010f6:	f000 fa37 	bl	8001568 <SCH_Add_Task>
 80010fa:	2201      	movs	r2, #1
 80010fc:	2100      	movs	r1, #0
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <main+0xb4>)
 8001100:	f000 fa32 	bl	8001568 <SCH_Add_Task>
 8001104:	2201      	movs	r2, #1
 8001106:	2100      	movs	r1, #0
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <main+0xb8>)
 800110a:	f000 fa2d 	bl	8001568 <SCH_Add_Task>
 800110e:	2201      	movs	r2, #1
 8001110:	2100      	movs	r1, #0
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <main+0xbc>)
 8001114:	f000 fa28 	bl	8001568 <SCH_Add_Task>
 8001118:	f000 fb90 	bl	800183c <SCH_Dispatch_Tasks>
 800111c:	e7fc      	b.n	8001118 <main+0x94>
 800111e:	bf00      	nop
 8001120:	20000284 	.word	0x20000284
 8001124:	2000023c 	.word	0x2000023c
 8001128:	08001925 	.word	0x08001925
 800112c:	08001985 	.word	0x08001985
 8001130:	080019b9 	.word	0x080019b9
 8001134:	08000efd 	.word	0x08000efd
 8001138:	080009d5 	.word	0x080009d5
 800113c:	0800014d 	.word	0x0800014d
 8001140:	080006d5 	.word	0x080006d5

08001144 <SystemClock_Config>:
 8001144:	b580      	push	{r7, lr}
 8001146:	b090      	sub	sp, #64	; 0x40
 8001148:	af00      	add	r7, sp, #0
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fb90 	bl	8004878 <memset>
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
 800116e:	2310      	movs	r3, #16
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001172:	2302      	movs	r3, #2
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
 8001176:	2300      	movs	r3, #0
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
 800117a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4618      	mov	r0, r3
 8001186:	f001 f9b5 	bl	80024f4 <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x50>
 8001190:	f000 f97e 	bl	8001490 <Error_Handler>
 8001194:	230f      	movs	r3, #15
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	2302      	movs	r3, #2
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fc20 	bl	80029f4 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x7a>
 80011ba:	f000 f969 	bl	8001490 <Error_Handler>
 80011be:	bf00      	nop
 80011c0:	3740      	adds	r7, #64	; 0x40
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <MX_TIM2_Init>:
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM2_Init+0x94>)
 80011e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM2_Init+0x94>)
 80011ee:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_TIM2_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM2_Init+0x94>)
 80011fc:	2263      	movs	r2, #99	; 0x63
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM2_Init+0x94>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM2_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM2_Init+0x94>)
 800120e:	f001 fd7f 	bl	8002d10 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x54>
 8001218:	f000 f93a 	bl	8001490 <Error_Handler>
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <MX_TIM2_Init+0x94>)
 800122a:	f002 f8d7 	bl	80033dc <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x70>
 8001234:	f000 f92c 	bl	8001490 <Error_Handler>
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM2_Init+0x94>)
 8001246:	f002 fc59 	bl	8003afc <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x8c>
 8001250:	f000 f91e 	bl	8001490 <Error_Handler>
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000284 	.word	0x20000284

08001260 <MX_TIM3_Init>:
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	; 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_TIM3_Init+0xe4>)
 8001292:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <MX_TIM3_Init+0xe8>)
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MX_TIM3_Init+0xe4>)
 8001298:	223f      	movs	r2, #63	; 0x3f
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_TIM3_Init+0xe4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_TIM3_Init+0xe4>)
 80012a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_TIM3_Init+0xe4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_TIM3_Init+0xe4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
 80012b6:	4823      	ldr	r0, [pc, #140]	; (8001344 <MX_TIM3_Init+0xe4>)
 80012b8:	f001 fd2a 	bl	8002d10 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x66>
 80012c2:	f000 f8e5 	bl	8001490 <Error_Handler>
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80012cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d0:	4619      	mov	r1, r3
 80012d2:	481c      	ldr	r0, [pc, #112]	; (8001344 <MX_TIM3_Init+0xe4>)
 80012d4:	f002 f882 	bl	80033dc <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0x82>
 80012de:	f000 f8d7 	bl	8001490 <Error_Handler>
 80012e2:	4818      	ldr	r0, [pc, #96]	; (8001344 <MX_TIM3_Init+0xe4>)
 80012e4:	f001 fdb6 	bl	8002e54 <HAL_TIM_PWM_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x92>
 80012ee:	f000 f8cf 	bl	8001490 <Error_Handler>
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	4619      	mov	r1, r3
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <MX_TIM3_Init+0xe4>)
 8001302:	f002 fbfb 	bl	8003afc <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0xb0>
 800130c:	f000 f8c0 	bl	8001490 <Error_Handler>
 8001310:	2360      	movs	r3, #96	; 0x60
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM3_Init+0xe4>)
 8001328:	f001 ff96 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0xd6>
 8001332:	f000 f8ad 	bl	8001490 <Error_Handler>
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM3_Init+0xe4>)
 8001338:	f000 fbca 	bl	8001ad0 <HAL_TIM_MspPostInit>
 800133c:	bf00      	nop
 800133e:	3738      	adds	r7, #56	; 0x38
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000023c 	.word	0x2000023c
 8001348:	40000400 	.word	0x40000400

0800134c <MX_USART2_UART_Init>:
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART2_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001384:	f002 fc2a 	bl	8003bdc <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART2_UART_Init+0x46>
 800138e:	f000 f87f 	bl	8001490 <Error_Handler>
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002cc 	.word	0x200002cc
 800139c:	40004400 	.word	0x40004400

080013a0 <MX_GPIO_Init>:
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <MX_GPIO_Init+0xd0>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <MX_GPIO_Init+0xd0>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_GPIO_Init+0xd0>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_GPIO_Init+0xd0>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <MX_GPIO_Init+0xd0>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <MX_GPIO_Init+0xd0>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013ea:	4822      	ldr	r0, [pc, #136]	; (8001474 <MX_GPIO_Init+0xd4>)
 80013ec:	f001 f869 	bl	80024c2 <HAL_GPIO_WritePin>
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013f6:	4820      	ldr	r0, [pc, #128]	; (8001478 <MX_GPIO_Init+0xd8>)
 80013f8:	f001 f863 	bl	80024c2 <HAL_GPIO_WritePin>
 80013fc:	2313      	movs	r3, #19
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	481a      	ldr	r0, [pc, #104]	; (8001478 <MX_GPIO_Init+0xd8>)
 8001410:	f000 febc 	bl	800218c <HAL_GPIO_Init>
 8001414:	2301      	movs	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	2301      	movs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <MX_GPIO_Init+0xd4>)
 8001428:	f000 feb0 	bl	800218c <HAL_GPIO_Init>
 800142c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	2301      	movs	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	2302      	movs	r3, #2
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <MX_GPIO_Init+0xd4>)
 8001446:	f000 fea1 	bl	800218c <HAL_GPIO_Init>
 800144a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	2302      	movs	r3, #2
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_GPIO_Init+0xd8>)
 8001464:	f000 fe92 	bl	800218c <HAL_GPIO_Init>
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	40010c00 	.word	0x40010c00
 8001478:	40010800 	.word	0x40010800

0800147c <HAL_TIM_PeriodElapsedCallback>:
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	f000 f850 	bl	8001528 <SCH_Update>
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <Error_Handler>:
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
 8001494:	b672      	cpsid	i
 8001496:	bf00      	nop
 8001498:	e7fe      	b.n	8001498 <Error_Handler+0x8>
	...

0800149c <SCH_Init>:
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	e034      	b.n	8001512 <SCH_Init+0x76>
 80014a8:	491e      	ldr	r1, [pc, #120]	; (8001524 <SCH_Init+0x88>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	491a      	ldr	r1, [pc, #104]	; (8001524 <SCH_Init+0x88>)
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	4915      	ldr	r1, [pc, #84]	; (8001524 <SCH_Init+0x88>)
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3308      	adds	r3, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	4910      	ldr	r1, [pc, #64]	; (8001524 <SCH_Init+0x88>)
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	330c      	adds	r3, #12
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	490b      	ldr	r1, [pc, #44]	; (8001524 <SCH_Init+0x88>)
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3310      	adds	r3, #16
 8001506:	f04f 32ff 	mov.w	r2, #4294967295
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3301      	adds	r3, #1
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b09      	cmp	r3, #9
 8001516:	ddc7      	ble.n	80014a8 <SCH_Init+0xc>
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000118 	.word	0x20000118

08001528 <SCH_Update>:
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <SCH_Update+0x3c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <SCH_Update+0x34>
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <SCH_Update+0x3c>)
 8001536:	7b1b      	ldrb	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <SCH_Update+0x34>
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <SCH_Update+0x3c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <SCH_Update+0x26>
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <SCH_Update+0x3c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	3b01      	subs	r3, #1
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <SCH_Update+0x3c>)
 800154c:	6053      	str	r3, [r2, #4]
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SCH_Update+0x3c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <SCH_Update+0x34>
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <SCH_Update+0x3c>)
 8001558:	2201      	movs	r2, #1
 800155a:	731a      	strb	r2, [r3, #12]
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000118 	.word	0x20000118

08001568 <SCH_Add_Task>:
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b093      	sub	sp, #76	; 0x4c
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800157a:	2300      	movs	r3, #0
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
 800157e:	2300      	movs	r3, #0
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
 8001582:	2300      	movs	r3, #0
 8001584:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001588:	e0d5      	b.n	8001736 <SCH_Add_Task+0x1ce>
 800158a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800158e:	496e      	ldr	r1, [pc, #440]	; (8001748 <SCH_Add_Task+0x1e0>)
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3304      	adds	r3, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015a0:	4413      	add	r3, r2
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
 80015a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d979      	bls.n	80016a0 <SCH_Add_Task+0x138>
 80015ac:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80015b0:	4965      	ldr	r1, [pc, #404]	; (8001748 <SCH_Add_Task+0x1e0>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	3304      	adds	r3, #4
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80015ca:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80015ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1ac9      	subs	r1, r1, r3
 80015d4:	485c      	ldr	r0, [pc, #368]	; (8001748 <SCH_Add_Task+0x1e0>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4403      	add	r3, r0
 80015e0:	3304      	adds	r3, #4
 80015e2:	6019      	str	r1, [r3, #0]
 80015e4:	2309      	movs	r3, #9
 80015e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015ea:	e01b      	b.n	8001624 <SCH_Add_Task+0xbc>
 80015ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80015f6:	4854      	ldr	r0, [pc, #336]	; (8001748 <SCH_Add_Task+0x1e0>)
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4418      	add	r0, r3
 8001602:	4951      	ldr	r1, [pc, #324]	; (8001748 <SCH_Add_Task+0x1e0>)
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	4604      	mov	r4, r0
 8001610:	461d      	mov	r5, r3
 8001612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800161e:	3b01      	subs	r3, #1
 8001620:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001624:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800162c:	429a      	cmp	r2, r3
 800162e:	d8dd      	bhi.n	80015ec <SCH_Add_Task+0x84>
 8001630:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8001634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461d      	mov	r5, r3
 8001642:	f000 f923 	bl	800188c <Get_New_Task_ID>
 8001646:	4601      	mov	r1, r0
 8001648:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <SCH_Add_Task+0x1e0>)
 800164a:	4623      	mov	r3, r4
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4423      	add	r3, r4
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <SCH_Add_Task+0x1e0>)
 800165a:	4623      	mov	r3, r4
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4423      	add	r3, r4
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3304      	adds	r3, #4
 8001666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	4a37      	ldr	r2, [pc, #220]	; (8001748 <SCH_Add_Task+0x1e0>)
 800166c:	4623      	mov	r3, r4
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4423      	add	r3, r4
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3308      	adds	r3, #8
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	4a32      	ldr	r2, [pc, #200]	; (8001748 <SCH_Add_Task+0x1e0>)
 800167e:	4623      	mov	r3, r4
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4423      	add	r3, r4
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	330c      	adds	r3, #12
 800168a:	462a      	mov	r2, r5
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <SCH_Add_Task+0x1e0>)
 8001690:	4623      	mov	r3, r4
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4423      	add	r3, r4
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3310      	adds	r3, #16
 800169c:	6019      	str	r1, [r3, #0]
 800169e:	e04f      	b.n	8001740 <SCH_Add_Task+0x1d8>
 80016a0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80016a4:	4928      	ldr	r1, [pc, #160]	; (8001748 <SCH_Add_Task+0x1e0>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d13a      	bne.n	800172c <SCH_Add_Task+0x1c4>
 80016b6:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016be:	1ad5      	subs	r5, r2, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016c4:	429a      	cmp	r2, r3
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461e      	mov	r6, r3
 80016d0:	f000 f8dc 	bl	800188c <Get_New_Task_ID>
 80016d4:	4601      	mov	r1, r0
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <SCH_Add_Task+0x1e0>)
 80016d8:	4623      	mov	r3, r4
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4423      	add	r3, r4
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <SCH_Add_Task+0x1e0>)
 80016e8:	4623      	mov	r3, r4
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4423      	add	r3, r4
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	3304      	adds	r3, #4
 80016f4:	601d      	str	r5, [r3, #0]
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <SCH_Add_Task+0x1e0>)
 80016f8:	4623      	mov	r3, r4
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4423      	add	r3, r4
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3308      	adds	r3, #8
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <SCH_Add_Task+0x1e0>)
 800170a:	4623      	mov	r3, r4
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4423      	add	r3, r4
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	330c      	adds	r3, #12
 8001716:	4632      	mov	r2, r6
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <SCH_Add_Task+0x1e0>)
 800171c:	4623      	mov	r3, r4
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4423      	add	r3, r4
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3310      	adds	r3, #16
 8001728:	6019      	str	r1, [r3, #0]
 800172a:	e009      	b.n	8001740 <SCH_Add_Task+0x1d8>
 800172c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001730:	3301      	adds	r3, #1
 8001732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001736:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800173a:	2b09      	cmp	r3, #9
 800173c:	f67f af25 	bls.w	800158a <SCH_Add_Task+0x22>
 8001740:	374c      	adds	r7, #76	; 0x4c
 8001742:	46bd      	mov	sp, r7
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001746:	bf00      	nop
 8001748:	20000118 	.word	0x20000118

0800174c <SCH_Delete_Task>:
 800174c:	b4b0      	push	{r4, r5, r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d068      	beq.n	800182c <SCH_Delete_Task+0xe0>
 800175a:	2300      	movs	r3, #0
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	e061      	b.n	8001824 <SCH_Delete_Task+0xd8>
 8001760:	7ffa      	ldrb	r2, [r7, #31]
 8001762:	4935      	ldr	r1, [pc, #212]	; (8001838 <SCH_Delete_Task+0xec>)
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3310      	adds	r3, #16
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d152      	bne.n	800181e <SCH_Delete_Task+0xd2>
 8001778:	7ffb      	ldrb	r3, [r7, #31]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d828      	bhi.n	80017d0 <SCH_Delete_Task+0x84>
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	492d      	ldr	r1, [pc, #180]	; (8001838 <SCH_Delete_Task+0xec>)
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01d      	beq.n	80017d0 <SCH_Delete_Task+0x84>
 8001794:	7ffb      	ldrb	r3, [r7, #31]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4927      	ldr	r1, [pc, #156]	; (8001838 <SCH_Delete_Task+0xec>)
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3304      	adds	r3, #4
 80017a6:	6819      	ldr	r1, [r3, #0]
 80017a8:	7ffa      	ldrb	r2, [r7, #31]
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <SCH_Delete_Task+0xec>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4403      	add	r3, r0
 80017b6:	3304      	adds	r3, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	7ffa      	ldrb	r2, [r7, #31]
 80017bc:	3201      	adds	r2, #1
 80017be:	4419      	add	r1, r3
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <SCH_Delete_Task+0xec>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4403      	add	r3, r0
 80017cc:	3304      	adds	r3, #4
 80017ce:	6019      	str	r1, [r3, #0]
 80017d0:	7ffb      	ldrb	r3, [r7, #31]
 80017d2:	77bb      	strb	r3, [r7, #30]
 80017d4:	e017      	b.n	8001806 <SCH_Delete_Task+0xba>
 80017d6:	7fbb      	ldrb	r3, [r7, #30]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	7fb9      	ldrb	r1, [r7, #30]
 80017dc:	4816      	ldr	r0, [pc, #88]	; (8001838 <SCH_Delete_Task+0xec>)
 80017de:	460b      	mov	r3, r1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4418      	add	r0, r3
 80017e8:	4913      	ldr	r1, [pc, #76]	; (8001838 <SCH_Delete_Task+0xec>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	4604      	mov	r4, r0
 80017f6:	461d      	mov	r5, r3
 80017f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	6023      	str	r3, [r4, #0]
 8001800:	7fbb      	ldrb	r3, [r7, #30]
 8001802:	3301      	adds	r3, #1
 8001804:	77bb      	strb	r3, [r7, #30]
 8001806:	7fbb      	ldrb	r3, [r7, #30]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d9e4      	bls.n	80017d6 <SCH_Delete_Task+0x8a>
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <SCH_Delete_Task+0xec>)
 800180e:	33b4      	adds	r3, #180	; 0xb4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	e007      	b.n	800182e <SCH_Delete_Task+0xe2>
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	3301      	adds	r3, #1
 8001822:	77fb      	strb	r3, [r7, #31]
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	2b09      	cmp	r3, #9
 8001828:	d99a      	bls.n	8001760 <SCH_Delete_Task+0x14>
 800182a:	e000      	b.n	800182e <SCH_Delete_Task+0xe2>
 800182c:	bf00      	nop
 800182e:	3724      	adds	r7, #36	; 0x24
 8001830:	46bd      	mov	sp, r7
 8001832:	bcb0      	pop	{r4, r5, r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000118 	.word	0x20000118

0800183c <SCH_Dispatch_Tasks>:
 800183c:	b5b0      	push	{r4, r5, r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <SCH_Dispatch_Tasks+0x4c>)
 8001844:	7b1b      	ldrb	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d019      	beq.n	800187e <SCH_Dispatch_Tasks+0x42>
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <SCH_Dispatch_Tasks+0x4c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4798      	blx	r3
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <SCH_Dispatch_Tasks+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	731a      	strb	r2, [r3, #12]
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <SCH_Dispatch_Tasks+0x4c>)
 8001858:	1d3c      	adds	r4, r7, #4
 800185a:	461d      	mov	r5, r3
 800185c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	6023      	str	r3, [r4, #0]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff70 	bl	800174c <SCH_Delete_Task>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <SCH_Dispatch_Tasks+0x42>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68f9      	ldr	r1, [r7, #12]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fe75 	bl	8001568 <SCH_Add_Task>
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bdb0      	pop	{r4, r5, r7, pc}
 8001886:	bf00      	nop
 8001888:	20000118 	.word	0x20000118

0800188c <Get_New_Task_ID>:
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <Get_New_Task_ID+0x1c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <Get_New_Task_ID+0x1c>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <Get_New_Task_ID+0x1c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200001e0 	.word	0x200001e0

080018ac <setTimerSecond>:
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <setTimerSecond+0x2c>)
 80018b8:	fb82 1203 	smull	r1, r2, r2, r3
 80018bc:	1092      	asrs	r2, r2, #2
 80018be:	17db      	asrs	r3, r3, #31
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <setTimerSecond+0x30>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <setTimerSecond+0x34>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	66666667 	.word	0x66666667
 80018dc:	200001f0 	.word	0x200001f0
 80018e0:	200001ec 	.word	0x200001ec

080018e4 <setTimer>:
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	4a09      	ldr	r2, [pc, #36]	; (8001918 <setTimer+0x34>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	1092      	asrs	r2, r2, #2
 80018f8:	17db      	asrs	r3, r3, #31
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <setTimer+0x38>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <setTimer+0x3c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2100      	movs	r1, #0
 800190a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	66666667 	.word	0x66666667
 800191c:	2000020c 	.word	0x2000020c
 8001920:	200001f4 	.word	0x200001f4

08001924 <timerRun>:
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	e01c      	b.n	800196a <timerRun+0x46>
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <timerRun+0x58>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	2b00      	cmp	r3, #0
 800193a:	dd13      	ble.n	8001964 <timerRun+0x40>
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <timerRun+0x58>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <timerRun+0x58>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <timerRun+0x58>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dc04      	bgt.n	8001964 <timerRun+0x40>
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <timerRun+0x5c>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2101      	movs	r1, #1
 8001960:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3301      	adds	r3, #1
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b05      	cmp	r3, #5
 800196e:	dddf      	ble.n	8001930 <timerRun+0xc>
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000020c 	.word	0x2000020c
 8001980:	200001f4 	.word	0x200001f4

08001984 <timerRunSecond>:
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <timerRunSecond+0x2c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dd0b      	ble.n	80019a8 <timerRunSecond+0x24>
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <timerRunSecond+0x2c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3b01      	subs	r3, #1
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <timerRunSecond+0x2c>)
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <timerRunSecond+0x2c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dc02      	bgt.n	80019a8 <timerRunSecond+0x24>
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <timerRunSecond+0x30>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	200001f0 	.word	0x200001f0
 80019b4:	200001ec 	.word	0x200001ec

080019b8 <timerRun7SEG>:
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <timerRun7SEG+0x2c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	dd0b      	ble.n	80019dc <timerRun7SEG+0x24>
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <timerRun7SEG+0x2c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <timerRun7SEG+0x2c>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <timerRun7SEG+0x2c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	dc02      	bgt.n	80019dc <timerRun7SEG+0x24>
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <timerRun7SEG+0x30>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	200001e8 	.word	0x200001e8
 80019e8:	200001e4 	.word	0x200001e4

080019ec <HAL_MspInit>:
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6193      	str	r3, [r2, #24]
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_MspInit+0x60>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_MspInit+0x60>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6053      	str	r3, [r2, #4]
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000

08001a50 <HAL_TIM_Base_MspInit>:
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a60:	d114      	bne.n	8001a8c <HAL_TIM_Base_MspInit+0x3c>
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	201c      	movs	r0, #28
 8001a80:	f000 fa9b 	bl	8001fba <HAL_NVIC_SetPriority>
 8001a84:	201c      	movs	r0, #28
 8001a86:	f000 fab4 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
 8001a8a:	e018      	b.n	8001abe <HAL_TIM_Base_MspInit+0x6e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_TIM_Base_MspInit+0x7c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d113      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x6e>
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	201d      	movs	r0, #29
 8001ab4:	f000 fa81 	bl	8001fba <HAL_NVIC_SetPriority>
 8001ab8:	201d      	movs	r0, #29
 8001aba:	f000 fa9a 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40000400 	.word	0x40000400

08001ad0 <HAL_TIM_MspPostInit>:
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_TIM_MspPostInit+0x58>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d117      	bne.n	8001b20 <HAL_TIM_MspPostInit+0x50>
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	2302      	movs	r3, #2
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_TIM_MspPostInit+0x60>)
 8001b1c:	f000 fb36 	bl	800218c <HAL_GPIO_Init>
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010800 	.word	0x40010800

08001b34 <HAL_UART_MspInit>:
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_UART_MspInit+0x98>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d137      	bne.n	8001bc4 <HAL_UART_MspInit+0x90>
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_UART_MspInit+0x9c>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_UART_MspInit+0x9c>)
 8001b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5e:	61d3      	str	r3, [r2, #28]
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_UART_MspInit+0x9c>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_UART_MspInit+0x9c>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <HAL_UART_MspInit+0x9c>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_UART_MspInit+0x9c>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2304      	movs	r3, #4
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	2302      	movs	r3, #2
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4619      	mov	r1, r3
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <HAL_UART_MspInit+0xa0>)
 8001b98:	f000 faf8 	bl	800218c <HAL_GPIO_Init>
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <HAL_UART_MspInit+0xa0>)
 8001bb0:	f000 faec 	bl	800218c <HAL_GPIO_Init>
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2026      	movs	r0, #38	; 0x26
 8001bba:	f000 f9fe 	bl	8001fba <HAL_NVIC_SetPriority>
 8001bbe:	2026      	movs	r0, #38	; 0x26
 8001bc0:	f000 fa17 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40004400 	.word	0x40004400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800

08001bd8 <NMI_Handler>:
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <DebugMon_Handler>:
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <PendSV_Handler>:
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <SysTick_Handler>:
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	f000 f8d9 	bl	8001dd4 <HAL_IncTick>
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <TIM2_IRQHandler>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM2_IRQHandler+0x10>)
 8001c2e:	f001 fa0b 	bl	8003048 <HAL_TIM_IRQHandler>
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000284 	.word	0x20000284

08001c3c <TIM3_IRQHandler>:
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM3_IRQHandler+0x10>)
 8001c42:	f001 fa01 	bl	8003048 <HAL_TIM_IRQHandler>
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000023c 	.word	0x2000023c

08001c50 <USART2_IRQHandler>:
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART2_IRQHandler+0x10>)
 8001c56:	f002 f895 	bl	8003d84 <HAL_UART_IRQHandler>
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200002cc 	.word	0x200002cc

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f002 fdc6 	bl	8004824 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20005000 	.word	0x20005000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	20000224 	.word	0x20000224
 8001ccc:	20000328 	.word	0x20000328

08001cd0 <SystemInit>:
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <buzzer>:
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <buzzer+0x18>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <buzzer+0x1c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200000e0 	.word	0x200000e0
 8001cf8:	2000023c 	.word	0x2000023c

08001cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cfc:	f7ff ffe8 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d02:	490c      	ldr	r1, [pc, #48]	; (8001d34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d04:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d18:	4c09      	ldr	r4, [pc, #36]	; (8001d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d26:	f002 fd83 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d2a:	f7ff f9ab 	bl	8001084 <main>
  bx lr
 8001d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001d38:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 8001d3c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001d40:	20000328 	.word	0x20000328

08001d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_2_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_Init+0x28>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x28>)
 8001d52:	f043 0310 	orr.w	r3, r3, #16
 8001d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 f923 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fe42 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f93b 	bl	800200e <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f903 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000044 	.word	0x20000044
 8001dcc:	2000004c 	.word	0x2000004c
 8001dd0:	20000048 	.word	0x20000048

08001dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_IncTick+0x1c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_IncTick+0x20>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a03      	ldr	r2, [pc, #12]	; (8001df4 <HAL_IncTick+0x20>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	2000004c 	.word	0x2000004c
 8001df4:	20000314 	.word	0x20000314

08001df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b02      	ldr	r3, [pc, #8]	; (8001e08 <HAL_GetTick+0x10>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	20000314 	.word	0x20000314

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4906      	ldr	r1, [pc, #24]	; (8001ea4 <__NVIC_EnableIRQ+0x34>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff90 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff2d 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff42 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff90 	bl	8001efc <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5f 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff35 	bl	8001e70 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d008      	beq.n	8002050 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e020      	b.n	8002092 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020e 	bic.w	r2, r2, #14
 800205e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d005      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2204      	movs	r2, #4
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e051      	b.n	8002164 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 020e 	bic.w	r2, r2, #14
 80020ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <HAL_DMA_Abort_IT+0xd4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d029      	beq.n	800213e <HAL_DMA_Abort_IT+0xa2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_DMA_Abort_IT+0xd8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <HAL_DMA_Abort_IT+0x9e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <HAL_DMA_Abort_IT+0xdc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01a      	beq.n	8002134 <HAL_DMA_Abort_IT+0x98>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_DMA_Abort_IT+0xe0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d012      	beq.n	800212e <HAL_DMA_Abort_IT+0x92>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_DMA_Abort_IT+0xe4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00a      	beq.n	8002128 <HAL_DMA_Abort_IT+0x8c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_DMA_Abort_IT+0xe8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d102      	bne.n	8002122 <HAL_DMA_Abort_IT+0x86>
 800211c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002120:	e00e      	b.n	8002140 <HAL_DMA_Abort_IT+0xa4>
 8002122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002126:	e00b      	b.n	8002140 <HAL_DMA_Abort_IT+0xa4>
 8002128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212c:	e008      	b.n	8002140 <HAL_DMA_Abort_IT+0xa4>
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	e005      	b.n	8002140 <HAL_DMA_Abort_IT+0xa4>
 8002134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002138:	e002      	b.n	8002140 <HAL_DMA_Abort_IT+0xa4>
 800213a:	2310      	movs	r3, #16
 800213c:	e000      	b.n	8002140 <HAL_DMA_Abort_IT+0xa4>
 800213e:	2301      	movs	r3, #1
 8002140:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_DMA_Abort_IT+0xec>)
 8002142:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
    } 
  }
  return status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40020008 	.word	0x40020008
 8002174:	4002001c 	.word	0x4002001c
 8002178:	40020030 	.word	0x40020030
 800217c:	40020044 	.word	0x40020044
 8002180:	40020058 	.word	0x40020058
 8002184:	4002006c 	.word	0x4002006c
 8002188:	40020000 	.word	0x40020000

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b08b      	sub	sp, #44	; 0x2c
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	e169      	b.n	8002474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a0:	2201      	movs	r2, #1
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	f040 8158 	bne.w	800246e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a9a      	ldr	r2, [pc, #616]	; (800242c <HAL_GPIO_Init+0x2a0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d05e      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021c8:	4a98      	ldr	r2, [pc, #608]	; (800242c <HAL_GPIO_Init+0x2a0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d875      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021ce:	4a98      	ldr	r2, [pc, #608]	; (8002430 <HAL_GPIO_Init+0x2a4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d058      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021d4:	4a96      	ldr	r2, [pc, #600]	; (8002430 <HAL_GPIO_Init+0x2a4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d86f      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021da:	4a96      	ldr	r2, [pc, #600]	; (8002434 <HAL_GPIO_Init+0x2a8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d052      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021e0:	4a94      	ldr	r2, [pc, #592]	; (8002434 <HAL_GPIO_Init+0x2a8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d869      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021e6:	4a94      	ldr	r2, [pc, #592]	; (8002438 <HAL_GPIO_Init+0x2ac>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d04c      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021ec:	4a92      	ldr	r2, [pc, #584]	; (8002438 <HAL_GPIO_Init+0x2ac>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d863      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021f2:	4a92      	ldr	r2, [pc, #584]	; (800243c <HAL_GPIO_Init+0x2b0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d046      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021f8:	4a90      	ldr	r2, [pc, #576]	; (800243c <HAL_GPIO_Init+0x2b0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d85d      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d82a      	bhi.n	8002258 <HAL_GPIO_Init+0xcc>
 8002202:	2b12      	cmp	r3, #18
 8002204:	d859      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 8002206:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_GPIO_Init+0x80>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	08002287 	.word	0x08002287
 8002210:	08002261 	.word	0x08002261
 8002214:	08002273 	.word	0x08002273
 8002218:	080022b5 	.word	0x080022b5
 800221c:	080022bb 	.word	0x080022bb
 8002220:	080022bb 	.word	0x080022bb
 8002224:	080022bb 	.word	0x080022bb
 8002228:	080022bb 	.word	0x080022bb
 800222c:	080022bb 	.word	0x080022bb
 8002230:	080022bb 	.word	0x080022bb
 8002234:	080022bb 	.word	0x080022bb
 8002238:	080022bb 	.word	0x080022bb
 800223c:	080022bb 	.word	0x080022bb
 8002240:	080022bb 	.word	0x080022bb
 8002244:	080022bb 	.word	0x080022bb
 8002248:	080022bb 	.word	0x080022bb
 800224c:	080022bb 	.word	0x080022bb
 8002250:	08002269 	.word	0x08002269
 8002254:	0800227d 	.word	0x0800227d
 8002258:	4a79      	ldr	r2, [pc, #484]	; (8002440 <HAL_GPIO_Init+0x2b4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800225e:	e02c      	b.n	80022ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	623b      	str	r3, [r7, #32]
          break;
 8002266:	e029      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	3304      	adds	r3, #4
 800226e:	623b      	str	r3, [r7, #32]
          break;
 8002270:	e024      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	3308      	adds	r3, #8
 8002278:	623b      	str	r3, [r7, #32]
          break;
 800227a:	e01f      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	330c      	adds	r3, #12
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e01a      	b.n	80022bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800228e:	2304      	movs	r3, #4
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e013      	b.n	80022bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800229c:	2308      	movs	r3, #8
 800229e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	611a      	str	r2, [r3, #16]
          break;
 80022a6:	e009      	b.n	80022bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a8:	2308      	movs	r3, #8
 80022aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	615a      	str	r2, [r3, #20]
          break;
 80022b2:	e003      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x130>
          break;
 80022ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2bff      	cmp	r3, #255	; 0xff
 80022c0:	d801      	bhi.n	80022c6 <HAL_GPIO_Init+0x13a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	e001      	b.n	80022ca <HAL_GPIO_Init+0x13e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d802      	bhi.n	80022d8 <HAL_GPIO_Init+0x14c>
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x152>
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	3b08      	subs	r3, #8
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	210f      	movs	r1, #15
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	431a      	orrs	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80b1 	beq.w	800246e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800230c:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002324:	4a48      	ldr	r2, [pc, #288]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a40      	ldr	r2, [pc, #256]	; (800244c <HAL_GPIO_Init+0x2c0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_GPIO_Init+0x1ec>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3f      	ldr	r2, [pc, #252]	; (8002450 <HAL_GPIO_Init+0x2c4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00d      	beq.n	8002374 <HAL_GPIO_Init+0x1e8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3e      	ldr	r2, [pc, #248]	; (8002454 <HAL_GPIO_Init+0x2c8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <HAL_GPIO_Init+0x1e4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3d      	ldr	r2, [pc, #244]	; (8002458 <HAL_GPIO_Init+0x2cc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_GPIO_Init+0x1e0>
 8002368:	2303      	movs	r3, #3
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 800236c:	2304      	movs	r3, #4
 800236e:	e004      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002370:	2302      	movs	r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002378:	2300      	movs	r3, #0
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	f002 0203 	and.w	r2, r2, #3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	4093      	lsls	r3, r2
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800238a:	492f      	ldr	r1, [pc, #188]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	492c      	ldr	r1, [pc, #176]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b2:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4928      	ldr	r1, [pc, #160]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4922      	ldr	r1, [pc, #136]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	491e      	ldr	r1, [pc, #120]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4918      	ldr	r1, [pc, #96]	; (800245c <HAL_GPIO_Init+0x2d0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_GPIO_Init+0x2d0>)
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	4914      	ldr	r1, [pc, #80]	; (800245c <HAL_GPIO_Init+0x2d0>)
 800240c:	4013      	ands	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d021      	beq.n	8002460 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_GPIO_Init+0x2d0>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	490e      	ldr	r1, [pc, #56]	; (800245c <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e021      	b.n	800246e <HAL_GPIO_Init+0x2e2>
 800242a:	bf00      	nop
 800242c:	10320000 	.word	0x10320000
 8002430:	10310000 	.word	0x10310000
 8002434:	10220000 	.word	0x10220000
 8002438:	10210000 	.word	0x10210000
 800243c:	10120000 	.word	0x10120000
 8002440:	10110000 	.word	0x10110000
 8002444:	40021000 	.word	0x40021000
 8002448:	40010000 	.word	0x40010000
 800244c:	40010800 	.word	0x40010800
 8002450:	40010c00 	.word	0x40010c00
 8002454:	40011000 	.word	0x40011000
 8002458:	40011400 	.word	0x40011400
 800245c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	43db      	mvns	r3, r3
 8002468:	4909      	ldr	r1, [pc, #36]	; (8002490 <HAL_GPIO_Init+0x304>)
 800246a:	4013      	ands	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	3301      	adds	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	f47f ae8e 	bne.w	80021a0 <HAL_GPIO_Init+0x14>
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	372c      	adds	r7, #44	; 0x2c
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e001      	b.n	80024b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	807b      	strh	r3, [r7, #2]
 80024ce:	4613      	mov	r3, r2
 80024d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d2:	787b      	ldrb	r3, [r7, #1]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d8:	887a      	ldrh	r2, [r7, #2]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024de:	e003      	b.n	80024e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	041a      	lsls	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e26c      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002514:	4b92      	ldr	r3, [pc, #584]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b04      	cmp	r3, #4
 800251e:	d00c      	beq.n	800253a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002520:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d112      	bne.n	8002552 <HAL_RCC_OscConfig+0x5e>
 800252c:	4b8c      	ldr	r3, [pc, #560]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d10b      	bne.n	8002552 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	4b89      	ldr	r3, [pc, #548]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d06c      	beq.n	8002620 <HAL_RCC_OscConfig+0x12c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d168      	bne.n	8002620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e246      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x76>
 800255c:	4b80      	ldr	r3, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7f      	ldr	r2, [pc, #508]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e02e      	b.n	80025c8 <HAL_RCC_OscConfig+0xd4>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x98>
 8002572:	4b7b      	ldr	r3, [pc, #492]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7a      	ldr	r2, [pc, #488]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b78      	ldr	r3, [pc, #480]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a77      	ldr	r2, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xd4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0xbc>
 8002596:	4b72      	ldr	r3, [pc, #456]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a71      	ldr	r2, [pc, #452]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xd4>
 80025b0:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6a      	ldr	r2, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a67      	ldr	r2, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fc12 	bl	8001df8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fc0e 	bl	8001df8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1fa      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xe4>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fbfe 	bl	8001df8 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff fbfa 	bl	8001df8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1e6      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x10c>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262e:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x18c>
 8002646:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x176>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1ba      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4939      	ldr	r1, [pc, #228]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	e03a      	b.n	80026f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002688:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7ff fbb3 	bl	8001df8 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002696:	f7ff fbaf 	bl	8001df8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e19b      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b4:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4927      	ldr	r1, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
 80026c8:	e015      	b.n	80026f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fb92 	bl	8001df8 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7ff fb8e 	bl	8001df8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e17a      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03a      	beq.n	8002778 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d019      	beq.n	800273e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_RCC_OscConfig+0x274>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7ff fb72 	bl	8001df8 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002718:	f7ff fb6e 	bl	8001df8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e15a      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002736:	2001      	movs	r0, #1
 8002738:	f000 facc 	bl	8002cd4 <RCC_Delay>
 800273c:	e01c      	b.n	8002778 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_RCC_OscConfig+0x274>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7ff fb58 	bl	8001df8 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274a:	e00f      	b.n	800276c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff fb54 	bl	8001df8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d908      	bls.n	800276c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e140      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	42420000 	.word	0x42420000
 8002768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b9e      	ldr	r3, [pc, #632]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e9      	bne.n	800274c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a6 	beq.w	80028d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b97      	ldr	r3, [pc, #604]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10d      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b94      	ldr	r3, [pc, #592]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a93      	ldr	r2, [pc, #588]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]
 80027a2:	4b91      	ldr	r3, [pc, #580]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b8b      	ldr	r3, [pc, #556]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a8a      	ldr	r2, [pc, #552]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7ff fb15 	bl	8001df8 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7ff fb11 	bl	8001df8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0fd      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b81      	ldr	r3, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x312>
 80027f8:	4b7b      	ldr	r3, [pc, #492]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a7a      	ldr	r2, [pc, #488]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	e02d      	b.n	8002862 <HAL_RCC_OscConfig+0x36e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x334>
 800280e:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a75      	ldr	r2, [pc, #468]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a72      	ldr	r2, [pc, #456]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	6213      	str	r3, [r2, #32]
 8002826:	e01c      	b.n	8002862 <HAL_RCC_OscConfig+0x36e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b05      	cmp	r3, #5
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x356>
 8002830:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a6c      	ldr	r2, [pc, #432]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4a69      	ldr	r2, [pc, #420]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6213      	str	r3, [r2, #32]
 8002848:	e00b      	b.n	8002862 <HAL_RCC_OscConfig+0x36e>
 800284a:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a66      	ldr	r2, [pc, #408]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	4b64      	ldr	r3, [pc, #400]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a63      	ldr	r2, [pc, #396]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d015      	beq.n	8002896 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7ff fac5 	bl	8001df8 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7ff fac1 	bl	8001df8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0ab      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	4b57      	ldr	r3, [pc, #348]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ee      	beq.n	8002872 <HAL_RCC_OscConfig+0x37e>
 8002894:	e014      	b.n	80028c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7ff faaf 	bl	8001df8 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7ff faab 	bl	8001df8 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e095      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ee      	bne.n	800289e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4b48      	ldr	r3, [pc, #288]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a47      	ldr	r2, [pc, #284]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8081 	beq.w	80029de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d061      	beq.n	80029ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d146      	bne.n	800297e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <HAL_RCC_OscConfig+0x4fc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7ff fa7f 	bl	8001df8 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7ff fa7b 	bl	8001df8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e067      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d108      	bne.n	8002938 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002926:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	492d      	ldr	r1, [pc, #180]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a19      	ldr	r1, [r3, #32]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	430b      	orrs	r3, r1
 800294a:	4927      	ldr	r1, [pc, #156]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002950:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x4fc>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7ff fa4f 	bl	8001df8 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7ff fa4b 	bl	8001df8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e037      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x46a>
 800297c:	e02f      	b.n	80029de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_RCC_OscConfig+0x4fc>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff fa38 	bl	8001df8 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7ff fa34 	bl	8001df8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e020      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x498>
 80029aa:	e018      	b.n	80029de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e013      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	42420060 	.word	0x42420060

080029f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0d0      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d910      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4965      	ldr	r1, [pc, #404]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a58      	ldr	r2, [pc, #352]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d040      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e073      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4936      	ldr	r1, [pc, #216]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7ff f988 	bl	8001df8 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7ff f984 	bl	8001df8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e053      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d210      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4922      	ldr	r1, [pc, #136]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f821 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f8e6 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08005138 	.word	0x08005138
 8002bc0:	20000044 	.word	0x20000044
 8002bc4:	20000048 	.word	0x20000048

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x36>
 8002bf6:	e027      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	e027      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0c5b      	lsrs	r3, r3, #17
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	4a11      	ldr	r2, [pc, #68]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	fb02 f203 	mul.w	r2, r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e004      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	613b      	str	r3, [r7, #16]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	693b      	ldr	r3, [r7, #16]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	007a1200 	.word	0x007a1200
 8002c64:	08005150 	.word	0x08005150
 8002c68:	08005160 	.word	0x08005160
 8002c6c:	003d0900 	.word	0x003d0900

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	20000044 	.word	0x20000044

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08005148 	.word	0x08005148

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0adb      	lsrs	r3, r3, #11
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08005148 	.word	0x08005148

08002cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <RCC_Delay+0x34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <RCC_Delay+0x38>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cf0:	bf00      	nop
  }
  while (Delay --);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f9      	bne.n	8002cf0 <RCC_Delay+0x1c>
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	20000044 	.word	0x20000044
 8002d0c:	10624dd3 	.word	0x10624dd3

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fe8a 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fc30 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e03a      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_TIM_Base_Start_IT+0x98>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x58>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d009      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x58>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_TIM_Base_Start_IT+0x9c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x58>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d010      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	e007      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800

08002e54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e041      	b.n	8002eea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f839 	bl	8002ef2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 fb8e 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start+0x24>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e022      	b.n	8002f6e <HAL_TIM_PWM_Start+0x6a>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d109      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x3e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e015      	b.n	8002f6e <HAL_TIM_PWM_Start+0x6a>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d109      	bne.n	8002f5c <HAL_TIM_PWM_Start+0x58>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e008      	b.n	8002f6e <HAL_TIM_PWM_Start+0x6a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e05e      	b.n	8003034 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x82>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f84:	e013      	b.n	8002fae <HAL_TIM_PWM_Start+0xaa>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x92>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f94:	e00b      	b.n	8002fae <HAL_TIM_PWM_Start+0xaa>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0xa2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa4:	e003      	b.n	8002fae <HAL_TIM_PWM_Start+0xaa>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fd7c 	bl	8003ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_TIM_PWM_Start+0x138>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d107      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_TIM_PWM_Start+0x138>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <HAL_TIM_PWM_Start+0xfa>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d009      	beq.n	8002ffe <HAL_TIM_PWM_Start+0xfa>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <HAL_TIM_PWM_Start+0x13c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_TIM_PWM_Start+0xfa>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_TIM_PWM_Start+0x140>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d010      	beq.n	8003032 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003020:	e007      	b.n	8003032 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800

08003048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d122      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d11b      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0202 	mvn.w	r2, #2
 8003074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa76 	bl	800357c <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fa69 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fa78 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0204 	mvn.w	r2, #4
 80030c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa4c 	bl	800357c <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa3f 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fa4e 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b08      	cmp	r3, #8
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0208 	mvn.w	r2, #8
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2204      	movs	r2, #4
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa22 	bl	800357c <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa15 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa24 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b10      	cmp	r3, #16
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b10      	cmp	r3, #16
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0210 	mvn.w	r2, #16
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2208      	movs	r2, #8
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9f8 	bl	800357c <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9eb 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9fa 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0201 	mvn.w	r2, #1
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe f958 	bl	800147c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d10e      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fce9 	bl	8003bca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f9be 	bl	80035a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b20      	cmp	r3, #32
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b20      	cmp	r3, #32
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0220 	mvn.w	r2, #32
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fcb4 	bl	8003bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003272:	2302      	movs	r3, #2
 8003274:	e0ae      	b.n	80033d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	f200 809f 	bhi.w	80033c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003286:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032c1 	.word	0x080032c1
 8003290:	080033c5 	.word	0x080033c5
 8003294:	080033c5 	.word	0x080033c5
 8003298:	080033c5 	.word	0x080033c5
 800329c:	08003301 	.word	0x08003301
 80032a0:	080033c5 	.word	0x080033c5
 80032a4:	080033c5 	.word	0x080033c5
 80032a8:	080033c5 	.word	0x080033c5
 80032ac:	08003343 	.word	0x08003343
 80032b0:	080033c5 	.word	0x080033c5
 80032b4:	080033c5 	.word	0x080033c5
 80032b8:	080033c5 	.word	0x080033c5
 80032bc:	08003383 	.word	0x08003383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f9d6 	bl	8003678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0208 	orr.w	r2, r2, #8
 80032da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0204 	bic.w	r2, r2, #4
 80032ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6999      	ldr	r1, [r3, #24]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	619a      	str	r2, [r3, #24]
      break;
 80032fe:	e064      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fa1c 	bl	8003744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6999      	ldr	r1, [r3, #24]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	619a      	str	r2, [r3, #24]
      break;
 8003340:	e043      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fa65 	bl	8003818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0208 	orr.w	r2, r2, #8
 800335c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0204 	bic.w	r2, r2, #4
 800336c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69d9      	ldr	r1, [r3, #28]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	61da      	str	r2, [r3, #28]
      break;
 8003380:	e023      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 faaf 	bl	80038ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800339c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69d9      	ldr	r1, [r3, #28]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	021a      	lsls	r2, r3, #8
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	61da      	str	r2, [r3, #28]
      break;
 80033c2:	e002      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
      break;
 80033c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_TIM_ConfigClockSource+0x1c>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e0b4      	b.n	8003562 <HAL_TIM_ConfigClockSource+0x186>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800341e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003430:	d03e      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003436:	f200 8087 	bhi.w	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	f000 8086 	beq.w	800354e <HAL_TIM_ConfigClockSource+0x172>
 8003442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003446:	d87f      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b70      	cmp	r3, #112	; 0x70
 800344a:	d01a      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xa6>
 800344c:	2b70      	cmp	r3, #112	; 0x70
 800344e:	d87b      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b60      	cmp	r3, #96	; 0x60
 8003452:	d050      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003454:	2b60      	cmp	r3, #96	; 0x60
 8003456:	d877      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b50      	cmp	r3, #80	; 0x50
 800345a:	d03c      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xfa>
 800345c:	2b50      	cmp	r3, #80	; 0x50
 800345e:	d873      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d058      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x13a>
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d86f      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b30      	cmp	r3, #48	; 0x30
 800346a:	d064      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15a>
 800346c:	2b30      	cmp	r3, #48	; 0x30
 800346e:	d86b      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d060      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	2b20      	cmp	r3, #32
 8003476:	d867      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d05c      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	2b10      	cmp	r3, #16
 800347e:	d05a      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15a>
 8003480:	e062      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 faf0 	bl	8003a76 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	609a      	str	r2, [r3, #8]
      break;
 80034ae:	e04f      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6899      	ldr	r1, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f000 fad9 	bl	8003a76 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d2:	609a      	str	r2, [r3, #8]
      break;
 80034d4:	e03c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f000 fa50 	bl	8003988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2150      	movs	r1, #80	; 0x50
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 faa7 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 80034f4:	e02c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f000 fa6e 	bl	80039e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2160      	movs	r1, #96	; 0x60
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fa97 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 8003514:	e01c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	f000 fa30 	bl	8003988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fa87 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 8003534:	e00c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f000 fa7e 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 8003546:	e003      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      break;
 800354c:	e000      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800354e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
	...

080035b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a29      	ldr	r2, [pc, #164]	; (800366c <TIM_Base_SetConfig+0xb8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00b      	beq.n	80035e4 <TIM_Base_SetConfig+0x30>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d007      	beq.n	80035e4 <TIM_Base_SetConfig+0x30>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a26      	ldr	r2, [pc, #152]	; (8003670 <TIM_Base_SetConfig+0xbc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_Base_SetConfig+0x30>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a25      	ldr	r2, [pc, #148]	; (8003674 <TIM_Base_SetConfig+0xc0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d108      	bne.n	80035f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a1c      	ldr	r2, [pc, #112]	; (800366c <TIM_Base_SetConfig+0xb8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_Base_SetConfig+0x62>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0x62>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <TIM_Base_SetConfig+0xbc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0x62>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <TIM_Base_SetConfig+0xc0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <TIM_Base_SetConfig+0xb8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d103      	bne.n	800365c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	615a      	str	r2, [r3, #20]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800

08003678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f023 0201 	bic.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 0302 	bic.w	r3, r3, #2
 80036c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <TIM_OC1_SetConfig+0xc8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d10c      	bne.n	80036ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0308 	bic.w	r3, r3, #8
 80036da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <TIM_OC1_SetConfig+0xc8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40012c00 	.word	0x40012c00

08003744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 0210 	bic.w	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0320 	bic.w	r3, r3, #32
 800378e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <TIM_OC2_SetConfig+0xd0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d10d      	bne.n	80037c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <TIM_OC2_SetConfig+0xd0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d113      	bne.n	80037f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00

08003818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <TIM_OC3_SetConfig+0xd0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10d      	bne.n	8003892 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800387c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <TIM_OC3_SetConfig+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d113      	bne.n	80038c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	621a      	str	r2, [r3, #32]
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40012c00 	.word	0x40012c00

080038ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0f      	ldr	r2, [pc, #60]	; (8003984 <TIM_OC4_SetConfig+0x98>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d109      	bne.n	8003960 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00

08003988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f023 030a 	bic.w	r3, r3, #10
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f023 0210 	bic.w	r2, r3, #16
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	031b      	lsls	r3, r3, #12
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	621a      	str	r2, [r3, #32]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f043 0307 	orr.w	r3, r3, #7
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	021a      	lsls	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	609a      	str	r2, [r3, #8]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e046      	b.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b60:	d009      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10c      	bne.n	8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800

08003bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e042      	b.n	8003c74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd ff96 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fd71 	bl	8004708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d16d      	bne.n	8003d78 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Transmit+0x2c>
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e066      	b.n	8003d7a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2221      	movs	r2, #33	; 0x21
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cba:	f7fe f89d 	bl	8001df8 <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd4:	d108      	bne.n	8003ce8 <HAL_UART_Transmit+0x6c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e003      	b.n	8003cf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cf0:	e02a      	b.n	8003d48 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 faf9 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e036      	b.n	8003d7a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10b      	bne.n	8003d2a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3302      	adds	r3, #2
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e007      	b.n	8003d3a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1cf      	bne.n	8003cf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2140      	movs	r1, #64	; 0x40
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fac9 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e006      	b.n	8003d7a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b0ba      	sub	sp, #232	; 0xe8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
 8003dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fbd1 	bl	800458a <UART_Receive_IT>
      return;
 8003de8:	e25b      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80de 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
 8003df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80d1 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
 8003e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	f043 0202 	orr.w	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f043 0208 	orr.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 81f2 	beq.w	8004298 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb5c 	bl	800458a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_UART_IRQHandler+0x17a>
 8003ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04f      	beq.n	8003f9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa66 	bl	80043d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d041      	beq.n	8003f96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1d9      	bne.n	8003f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d013      	beq.n	8003f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	; (8004164 <HAL_UART_IRQHandler+0x3e0>)
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe f892 	bl	800209c <HAL_DMA_Abort_IT>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e00e      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f99c 	bl	80042cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00a      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f998 	bl	80042cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e006      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f994 	bl	80042cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003faa:	e175      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	bf00      	nop
    return;
 8003fae:	e173      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 814f 	bne.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8148 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8141 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80b6 	beq.w	8004168 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8145 	beq.w	800429c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800401a:	429a      	cmp	r2, r3
 800401c:	f080 813e 	bcs.w	800429c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004026:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b20      	cmp	r3, #32
 8004030:	f000 8088 	beq.w	8004144 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800404a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800404e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004060:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800406c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1d9      	bne.n	8004034 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e1      	bne.n	8004080 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004126:	65ba      	str	r2, [r7, #88]	; 0x58
 8004128:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800412c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e3      	bne.n	8004102 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd ff71 	bl	8002026 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004152:	b29b      	uxth	r3, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8bf 	bl	80042de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004160:	e09c      	b.n	800429c <HAL_UART_IRQHandler+0x518>
 8004162:	bf00      	nop
 8004164:	08004495 	.word	0x08004495
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808e 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8089 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041b2:	647a      	str	r2, [r7, #68]	; 0x44
 80041b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	623b      	str	r3, [r7, #32]
   return(result);
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ea:	633a      	str	r2, [r7, #48]	; 0x30
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60fb      	str	r3, [r7, #12]
   return(result);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004230:	61fa      	str	r2, [r7, #28]
 8004232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f844 	bl	80042de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004256:	e023      	b.n	80042a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f923 	bl	80044bc <UART_Transmit_IT>
    return;
 8004276:	e014      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f962 	bl	800455a <UART_EndTransmit_IT>
    return;
 8004296:	e004      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a0:	bf00      	nop
  }
}
 80042a2:	37e8      	adds	r7, #232	; 0xe8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b090      	sub	sp, #64	; 0x40
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	e050      	b.n	80043a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d04c      	beq.n	80043a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
 8004314:	f7fd fd70 	bl	8001df8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004320:	429a      	cmp	r2, r3
 8004322:	d241      	bcs.n	80043a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004344:	637a      	str	r2, [r7, #52]	; 0x34
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800434a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3314      	adds	r3, #20
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004378:	623a      	str	r2, [r7, #32]
 800437a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e00f      	b.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d09f      	beq.n	8004306 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3740      	adds	r7, #64	; 0x40
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b095      	sub	sp, #84	; 0x54
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f8:	643a      	str	r2, [r7, #64]	; 0x40
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	61fb      	str	r3, [r7, #28]
   return(result);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800442c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	2b01      	cmp	r3, #1
 8004446:	d119      	bne.n	800447c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	60bb      	str	r3, [r7, #8]
   return(result);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0310 	bic.w	r3, r3, #16
 800445e:	647b      	str	r3, [r7, #68]	; 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004468:	61ba      	str	r2, [r7, #24]
 800446a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	613b      	str	r3, [r7, #16]
   return(result);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
}
 800448a:	bf00      	nop
 800448c:	3754      	adds	r7, #84	; 0x54
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7ff ff0c 	bl	80042cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b21      	cmp	r3, #33	; 0x21
 80044ce:	d13e      	bne.n	800454e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d114      	bne.n	8004504 <UART_Transmit_IT+0x48>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d110      	bne.n	8004504 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]
 8004502:	e008      	b.n	8004516 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	1c59      	adds	r1, r3, #1
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6211      	str	r1, [r2, #32]
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29b      	uxth	r3, r3
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4619      	mov	r1, r3
 8004524:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004538:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004548:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004570:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fe94 	bl	80042a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b08c      	sub	sp, #48	; 0x30
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b22      	cmp	r3, #34	; 0x22
 800459c:	f040 80ae 	bne.w	80046fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a8:	d117      	bne.n	80045da <UART_Receive_IT+0x50>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d113      	bne.n	80045da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	1c9a      	adds	r2, r3, #2
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
 80045d8:	e026      	b.n	8004628 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ec:	d007      	beq.n	80045fe <UART_Receive_IT+0x74>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <UART_Receive_IT+0x82>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	e008      	b.n	800461e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004618:	b2da      	uxtb	r2, r3
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29b      	uxth	r3, r3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4619      	mov	r1, r3
 8004636:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004638:	2b00      	cmp	r3, #0
 800463a:	d15d      	bne.n	80046f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0220 	bic.w	r2, r2, #32
 800464a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800465a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	2b01      	cmp	r3, #1
 8004680:	d135      	bne.n	80046ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	613b      	str	r3, [r7, #16]
   return(result);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 0310 	bic.w	r3, r3, #16
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	623a      	str	r2, [r7, #32]
 80046aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	69f9      	ldr	r1, [r7, #28]
 80046ae:	6a3a      	ldr	r2, [r7, #32]
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d10a      	bne.n	80046e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff fdf9 	bl	80042de <HAL_UARTEx_RxEventCallback>
 80046ec:	e002      	b.n	80046f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff fde3 	bl	80042ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e002      	b.n	80046fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3730      	adds	r7, #48	; 0x30
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004742:	f023 030c 	bic.w	r3, r3, #12
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	430b      	orrs	r3, r1
 800474e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <UART_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7fe fa9c 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	e002      	b.n	800477e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004778:	f7fe fa84 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 800477c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	4a22      	ldr	r2, [pc, #136]	; (8004820 <UART_SetConfig+0x118>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	0119      	lsls	r1, r3, #4
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009a      	lsls	r2, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <UART_SetConfig+0x118>)
 80047b6:	fba3 0302 	umull	r0, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	2064      	movs	r0, #100	; 0x64
 80047be:	fb00 f303 	mul.w	r3, r0, r3
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	3332      	adds	r3, #50	; 0x32
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <UART_SetConfig+0x118>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d4:	4419      	add	r1, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009a      	lsls	r2, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <UART_SetConfig+0x118>)
 80047ee:	fba3 0302 	umull	r0, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2064      	movs	r0, #100	; 0x64
 80047f6:	fb00 f303 	mul.w	r3, r0, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	3332      	adds	r3, #50	; 0x32
 8004800:	4a07      	ldr	r2, [pc, #28]	; (8004820 <UART_SetConfig+0x118>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	440a      	add	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40013800 	.word	0x40013800
 8004820:	51eb851f 	.word	0x51eb851f

08004824 <__errno>:
 8004824:	4b01      	ldr	r3, [pc, #4]	; (800482c <__errno+0x8>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000050 	.word	0x20000050

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	2600      	movs	r6, #0
 8004834:	4d0c      	ldr	r5, [pc, #48]	; (8004868 <__libc_init_array+0x38>)
 8004836:	4c0d      	ldr	r4, [pc, #52]	; (800486c <__libc_init_array+0x3c>)
 8004838:	1b64      	subs	r4, r4, r5
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	f000 fc5c 	bl	80050fc <_init>
 8004844:	2600      	movs	r6, #0
 8004846:	4d0a      	ldr	r5, [pc, #40]	; (8004870 <__libc_init_array+0x40>)
 8004848:	4c0a      	ldr	r4, [pc, #40]	; (8004874 <__libc_init_array+0x44>)
 800484a:	1b64      	subs	r4, r4, r5
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f855 3b04 	ldr.w	r3, [r5], #4
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	08005198 	.word	0x08005198
 800486c:	08005198 	.word	0x08005198
 8004870:	08005198 	.word	0x08005198
 8004874:	0800519c 	.word	0x0800519c

08004878 <memset>:
 8004878:	4603      	mov	r3, r0
 800487a:	4402      	add	r2, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <siprintf>:
 8004888:	b40e      	push	{r1, r2, r3}
 800488a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800488e:	b500      	push	{lr}
 8004890:	b09c      	sub	sp, #112	; 0x70
 8004892:	ab1d      	add	r3, sp, #116	; 0x74
 8004894:	9002      	str	r0, [sp, #8]
 8004896:	9006      	str	r0, [sp, #24]
 8004898:	9107      	str	r1, [sp, #28]
 800489a:	9104      	str	r1, [sp, #16]
 800489c:	4808      	ldr	r0, [pc, #32]	; (80048c0 <siprintf+0x38>)
 800489e:	4909      	ldr	r1, [pc, #36]	; (80048c4 <siprintf+0x3c>)
 80048a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a4:	9105      	str	r1, [sp, #20]
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	a902      	add	r1, sp, #8
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	f000 f868 	bl	8004980 <_svfiprintf_r>
 80048b0:	2200      	movs	r2, #0
 80048b2:	9b02      	ldr	r3, [sp, #8]
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	b01c      	add	sp, #112	; 0x70
 80048b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048bc:	b003      	add	sp, #12
 80048be:	4770      	bx	lr
 80048c0:	20000050 	.word	0x20000050
 80048c4:	ffff0208 	.word	0xffff0208

080048c8 <__ssputs_r>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	688e      	ldr	r6, [r1, #8]
 80048ce:	4682      	mov	sl, r0
 80048d0:	429e      	cmp	r6, r3
 80048d2:	460c      	mov	r4, r1
 80048d4:	4690      	mov	r8, r2
 80048d6:	461f      	mov	r7, r3
 80048d8:	d838      	bhi.n	800494c <__ssputs_r+0x84>
 80048da:	898a      	ldrh	r2, [r1, #12]
 80048dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048e0:	d032      	beq.n	8004948 <__ssputs_r+0x80>
 80048e2:	6825      	ldr	r5, [r4, #0]
 80048e4:	6909      	ldr	r1, [r1, #16]
 80048e6:	3301      	adds	r3, #1
 80048e8:	eba5 0901 	sub.w	r9, r5, r1
 80048ec:	6965      	ldr	r5, [r4, #20]
 80048ee:	444b      	add	r3, r9
 80048f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048f8:	106d      	asrs	r5, r5, #1
 80048fa:	429d      	cmp	r5, r3
 80048fc:	bf38      	it	cc
 80048fe:	461d      	movcc	r5, r3
 8004900:	0553      	lsls	r3, r2, #21
 8004902:	d531      	bpl.n	8004968 <__ssputs_r+0xa0>
 8004904:	4629      	mov	r1, r5
 8004906:	f000 fb53 	bl	8004fb0 <_malloc_r>
 800490a:	4606      	mov	r6, r0
 800490c:	b950      	cbnz	r0, 8004924 <__ssputs_r+0x5c>
 800490e:	230c      	movs	r3, #12
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	f8ca 3000 	str.w	r3, [sl]
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004924:	464a      	mov	r2, r9
 8004926:	6921      	ldr	r1, [r4, #16]
 8004928:	f000 face 	bl	8004ec8 <memcpy>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	6126      	str	r6, [r4, #16]
 800493a:	444e      	add	r6, r9
 800493c:	6026      	str	r6, [r4, #0]
 800493e:	463e      	mov	r6, r7
 8004940:	6165      	str	r5, [r4, #20]
 8004942:	eba5 0509 	sub.w	r5, r5, r9
 8004946:	60a5      	str	r5, [r4, #8]
 8004948:	42be      	cmp	r6, r7
 800494a:	d900      	bls.n	800494e <__ssputs_r+0x86>
 800494c:	463e      	mov	r6, r7
 800494e:	4632      	mov	r2, r6
 8004950:	4641      	mov	r1, r8
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	f000 fac6 	bl	8004ee4 <memmove>
 8004958:	68a3      	ldr	r3, [r4, #8]
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	1b9b      	subs	r3, r3, r6
 800495e:	4432      	add	r2, r6
 8004960:	2000      	movs	r0, #0
 8004962:	60a3      	str	r3, [r4, #8]
 8004964:	6022      	str	r2, [r4, #0]
 8004966:	e7db      	b.n	8004920 <__ssputs_r+0x58>
 8004968:	462a      	mov	r2, r5
 800496a:	f000 fb7b 	bl	8005064 <_realloc_r>
 800496e:	4606      	mov	r6, r0
 8004970:	2800      	cmp	r0, #0
 8004972:	d1e1      	bne.n	8004938 <__ssputs_r+0x70>
 8004974:	4650      	mov	r0, sl
 8004976:	6921      	ldr	r1, [r4, #16]
 8004978:	f000 face 	bl	8004f18 <_free_r>
 800497c:	e7c7      	b.n	800490e <__ssputs_r+0x46>
	...

08004980 <_svfiprintf_r>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	4698      	mov	r8, r3
 8004986:	898b      	ldrh	r3, [r1, #12]
 8004988:	4607      	mov	r7, r0
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	460d      	mov	r5, r1
 800498e:	4614      	mov	r4, r2
 8004990:	b09d      	sub	sp, #116	; 0x74
 8004992:	d50e      	bpl.n	80049b2 <_svfiprintf_r+0x32>
 8004994:	690b      	ldr	r3, [r1, #16]
 8004996:	b963      	cbnz	r3, 80049b2 <_svfiprintf_r+0x32>
 8004998:	2140      	movs	r1, #64	; 0x40
 800499a:	f000 fb09 	bl	8004fb0 <_malloc_r>
 800499e:	6028      	str	r0, [r5, #0]
 80049a0:	6128      	str	r0, [r5, #16]
 80049a2:	b920      	cbnz	r0, 80049ae <_svfiprintf_r+0x2e>
 80049a4:	230c      	movs	r3, #12
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e0d1      	b.n	8004b52 <_svfiprintf_r+0x1d2>
 80049ae:	2340      	movs	r3, #64	; 0x40
 80049b0:	616b      	str	r3, [r5, #20]
 80049b2:	2300      	movs	r3, #0
 80049b4:	9309      	str	r3, [sp, #36]	; 0x24
 80049b6:	2320      	movs	r3, #32
 80049b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049bc:	2330      	movs	r3, #48	; 0x30
 80049be:	f04f 0901 	mov.w	r9, #1
 80049c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80049c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b6c <_svfiprintf_r+0x1ec>
 80049ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049ce:	4623      	mov	r3, r4
 80049d0:	469a      	mov	sl, r3
 80049d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049d6:	b10a      	cbz	r2, 80049dc <_svfiprintf_r+0x5c>
 80049d8:	2a25      	cmp	r2, #37	; 0x25
 80049da:	d1f9      	bne.n	80049d0 <_svfiprintf_r+0x50>
 80049dc:	ebba 0b04 	subs.w	fp, sl, r4
 80049e0:	d00b      	beq.n	80049fa <_svfiprintf_r+0x7a>
 80049e2:	465b      	mov	r3, fp
 80049e4:	4622      	mov	r2, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	4638      	mov	r0, r7
 80049ea:	f7ff ff6d 	bl	80048c8 <__ssputs_r>
 80049ee:	3001      	adds	r0, #1
 80049f0:	f000 80aa 	beq.w	8004b48 <_svfiprintf_r+0x1c8>
 80049f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049f6:	445a      	add	r2, fp
 80049f8:	9209      	str	r2, [sp, #36]	; 0x24
 80049fa:	f89a 3000 	ldrb.w	r3, [sl]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80a2 	beq.w	8004b48 <_svfiprintf_r+0x1c8>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a0e:	f10a 0a01 	add.w	sl, sl, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	9307      	str	r3, [sp, #28]
 8004a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a1c:	4654      	mov	r4, sl
 8004a1e:	2205      	movs	r2, #5
 8004a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a24:	4851      	ldr	r0, [pc, #324]	; (8004b6c <_svfiprintf_r+0x1ec>)
 8004a26:	f000 fa41 	bl	8004eac <memchr>
 8004a2a:	9a04      	ldr	r2, [sp, #16]
 8004a2c:	b9d8      	cbnz	r0, 8004a66 <_svfiprintf_r+0xe6>
 8004a2e:	06d0      	lsls	r0, r2, #27
 8004a30:	bf44      	itt	mi
 8004a32:	2320      	movmi	r3, #32
 8004a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a38:	0711      	lsls	r1, r2, #28
 8004a3a:	bf44      	itt	mi
 8004a3c:	232b      	movmi	r3, #43	; 0x2b
 8004a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b2a      	cmp	r3, #42	; 0x2a
 8004a48:	d015      	beq.n	8004a76 <_svfiprintf_r+0xf6>
 8004a4a:	4654      	mov	r4, sl
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	f04f 0c0a 	mov.w	ip, #10
 8004a52:	9a07      	ldr	r2, [sp, #28]
 8004a54:	4621      	mov	r1, r4
 8004a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5a:	3b30      	subs	r3, #48	; 0x30
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	d94e      	bls.n	8004afe <_svfiprintf_r+0x17e>
 8004a60:	b1b0      	cbz	r0, 8004a90 <_svfiprintf_r+0x110>
 8004a62:	9207      	str	r2, [sp, #28]
 8004a64:	e014      	b.n	8004a90 <_svfiprintf_r+0x110>
 8004a66:	eba0 0308 	sub.w	r3, r0, r8
 8004a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	46a2      	mov	sl, r4
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	e7d2      	b.n	8004a1c <_svfiprintf_r+0x9c>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	9103      	str	r1, [sp, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfbb      	ittet	lt
 8004a82:	425b      	neglt	r3, r3
 8004a84:	f042 0202 	orrlt.w	r2, r2, #2
 8004a88:	9307      	strge	r3, [sp, #28]
 8004a8a:	9307      	strlt	r3, [sp, #28]
 8004a8c:	bfb8      	it	lt
 8004a8e:	9204      	strlt	r2, [sp, #16]
 8004a90:	7823      	ldrb	r3, [r4, #0]
 8004a92:	2b2e      	cmp	r3, #46	; 0x2e
 8004a94:	d10c      	bne.n	8004ab0 <_svfiprintf_r+0x130>
 8004a96:	7863      	ldrb	r3, [r4, #1]
 8004a98:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9a:	d135      	bne.n	8004b08 <_svfiprintf_r+0x188>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	3402      	adds	r4, #2
 8004aa0:	1d1a      	adds	r2, r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	9203      	str	r2, [sp, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bfb8      	it	lt
 8004aaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b7c <_svfiprintf_r+0x1fc>
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	4650      	mov	r0, sl
 8004ab8:	7821      	ldrb	r1, [r4, #0]
 8004aba:	f000 f9f7 	bl	8004eac <memchr>
 8004abe:	b140      	cbz	r0, 8004ad2 <_svfiprintf_r+0x152>
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	eba0 000a 	sub.w	r0, r0, sl
 8004ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8004aca:	9b04      	ldr	r3, [sp, #16]
 8004acc:	3401      	adds	r4, #1
 8004ace:	4303      	orrs	r3, r0
 8004ad0:	9304      	str	r3, [sp, #16]
 8004ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad6:	2206      	movs	r2, #6
 8004ad8:	4825      	ldr	r0, [pc, #148]	; (8004b70 <_svfiprintf_r+0x1f0>)
 8004ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ade:	f000 f9e5 	bl	8004eac <memchr>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d038      	beq.n	8004b58 <_svfiprintf_r+0x1d8>
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <_svfiprintf_r+0x1f4>)
 8004ae8:	bb1b      	cbnz	r3, 8004b32 <_svfiprintf_r+0x1b2>
 8004aea:	9b03      	ldr	r3, [sp, #12]
 8004aec:	3307      	adds	r3, #7
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	3308      	adds	r3, #8
 8004af4:	9303      	str	r3, [sp, #12]
 8004af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af8:	4433      	add	r3, r6
 8004afa:	9309      	str	r3, [sp, #36]	; 0x24
 8004afc:	e767      	b.n	80049ce <_svfiprintf_r+0x4e>
 8004afe:	460c      	mov	r4, r1
 8004b00:	2001      	movs	r0, #1
 8004b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b06:	e7a5      	b.n	8004a54 <_svfiprintf_r+0xd4>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f04f 0c0a 	mov.w	ip, #10
 8004b0e:	4619      	mov	r1, r3
 8004b10:	3401      	adds	r4, #1
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	4620      	mov	r0, r4
 8004b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b1a:	3a30      	subs	r2, #48	; 0x30
 8004b1c:	2a09      	cmp	r2, #9
 8004b1e:	d903      	bls.n	8004b28 <_svfiprintf_r+0x1a8>
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0c5      	beq.n	8004ab0 <_svfiprintf_r+0x130>
 8004b24:	9105      	str	r1, [sp, #20]
 8004b26:	e7c3      	b.n	8004ab0 <_svfiprintf_r+0x130>
 8004b28:	4604      	mov	r4, r0
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b30:	e7f0      	b.n	8004b14 <_svfiprintf_r+0x194>
 8004b32:	ab03      	add	r3, sp, #12
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	462a      	mov	r2, r5
 8004b38:	4638      	mov	r0, r7
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <_svfiprintf_r+0x1f8>)
 8004b3c:	a904      	add	r1, sp, #16
 8004b3e:	f3af 8000 	nop.w
 8004b42:	1c42      	adds	r2, r0, #1
 8004b44:	4606      	mov	r6, r0
 8004b46:	d1d6      	bne.n	8004af6 <_svfiprintf_r+0x176>
 8004b48:	89ab      	ldrh	r3, [r5, #12]
 8004b4a:	065b      	lsls	r3, r3, #25
 8004b4c:	f53f af2c 	bmi.w	80049a8 <_svfiprintf_r+0x28>
 8004b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b52:	b01d      	add	sp, #116	; 0x74
 8004b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b58:	ab03      	add	r3, sp, #12
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	4638      	mov	r0, r7
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <_svfiprintf_r+0x1f8>)
 8004b62:	a904      	add	r1, sp, #16
 8004b64:	f000 f87c 	bl	8004c60 <_printf_i>
 8004b68:	e7eb      	b.n	8004b42 <_svfiprintf_r+0x1c2>
 8004b6a:	bf00      	nop
 8004b6c:	08005162 	.word	0x08005162
 8004b70:	0800516c 	.word	0x0800516c
 8004b74:	00000000 	.word	0x00000000
 8004b78:	080048c9 	.word	0x080048c9
 8004b7c:	08005168 	.word	0x08005168

08004b80 <_printf_common>:
 8004b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	4616      	mov	r6, r2
 8004b86:	4699      	mov	r9, r3
 8004b88:	688a      	ldr	r2, [r1, #8]
 8004b8a:	690b      	ldr	r3, [r1, #16]
 8004b8c:	4607      	mov	r7, r0
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	bfb8      	it	lt
 8004b92:	4613      	movlt	r3, r2
 8004b94:	6033      	str	r3, [r6, #0]
 8004b96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba0:	b10a      	cbz	r2, 8004ba6 <_printf_common+0x26>
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	6033      	str	r3, [r6, #0]
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	0699      	lsls	r1, r3, #26
 8004baa:	bf42      	ittt	mi
 8004bac:	6833      	ldrmi	r3, [r6, #0]
 8004bae:	3302      	addmi	r3, #2
 8004bb0:	6033      	strmi	r3, [r6, #0]
 8004bb2:	6825      	ldr	r5, [r4, #0]
 8004bb4:	f015 0506 	ands.w	r5, r5, #6
 8004bb8:	d106      	bne.n	8004bc8 <_printf_common+0x48>
 8004bba:	f104 0a19 	add.w	sl, r4, #25
 8004bbe:	68e3      	ldr	r3, [r4, #12]
 8004bc0:	6832      	ldr	r2, [r6, #0]
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	42ab      	cmp	r3, r5
 8004bc6:	dc28      	bgt.n	8004c1a <_printf_common+0x9a>
 8004bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bcc:	1e13      	subs	r3, r2, #0
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	bf18      	it	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	0692      	lsls	r2, r2, #26
 8004bd6:	d42d      	bmi.n	8004c34 <_printf_common+0xb4>
 8004bd8:	4649      	mov	r1, r9
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be0:	47c0      	blx	r8
 8004be2:	3001      	adds	r0, #1
 8004be4:	d020      	beq.n	8004c28 <_printf_common+0xa8>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	68e5      	ldr	r5, [r4, #12]
 8004bea:	f003 0306 	and.w	r3, r3, #6
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	bf18      	it	ne
 8004bf2:	2500      	movne	r5, #0
 8004bf4:	6832      	ldr	r2, [r6, #0]
 8004bf6:	f04f 0600 	mov.w	r6, #0
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	bf08      	it	eq
 8004bfe:	1aad      	subeq	r5, r5, r2
 8004c00:	6922      	ldr	r2, [r4, #16]
 8004c02:	bf08      	it	eq
 8004c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bfc4      	itt	gt
 8004c0c:	1a9b      	subgt	r3, r3, r2
 8004c0e:	18ed      	addgt	r5, r5, r3
 8004c10:	341a      	adds	r4, #26
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	d11a      	bne.n	8004c4c <_printf_common+0xcc>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e008      	b.n	8004c2c <_printf_common+0xac>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4638      	mov	r0, r7
 8004c22:	47c0      	blx	r8
 8004c24:	3001      	adds	r0, #1
 8004c26:	d103      	bne.n	8004c30 <_printf_common+0xb0>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	3501      	adds	r5, #1
 8004c32:	e7c4      	b.n	8004bbe <_printf_common+0x3e>
 8004c34:	2030      	movs	r0, #48	; 0x30
 8004c36:	18e1      	adds	r1, r4, r3
 8004c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c42:	4422      	add	r2, r4
 8004c44:	3302      	adds	r3, #2
 8004c46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c4a:	e7c5      	b.n	8004bd8 <_printf_common+0x58>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d0e6      	beq.n	8004c28 <_printf_common+0xa8>
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7d9      	b.n	8004c12 <_printf_common+0x92>
	...

08004c60 <_printf_i>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	460c      	mov	r4, r1
 8004c66:	7e27      	ldrb	r7, [r4, #24]
 8004c68:	4691      	mov	r9, r2
 8004c6a:	2f78      	cmp	r7, #120	; 0x78
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	469a      	mov	sl, r3
 8004c70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c76:	d807      	bhi.n	8004c88 <_printf_i+0x28>
 8004c78:	2f62      	cmp	r7, #98	; 0x62
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x32>
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	f000 80d9 	beq.w	8004e34 <_printf_i+0x1d4>
 8004c82:	2f58      	cmp	r7, #88	; 0x58
 8004c84:	f000 80a4 	beq.w	8004dd0 <_printf_i+0x170>
 8004c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c90:	e03a      	b.n	8004d08 <_printf_i+0xa8>
 8004c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c96:	2b15      	cmp	r3, #21
 8004c98:	d8f6      	bhi.n	8004c88 <_printf_i+0x28>
 8004c9a:	a001      	add	r0, pc, #4	; (adr r0, 8004ca0 <_printf_i+0x40>)
 8004c9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004c89 	.word	0x08004c89
 8004cac:	08004c89 	.word	0x08004c89
 8004cb0:	08004c89 	.word	0x08004c89
 8004cb4:	08004c89 	.word	0x08004c89
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c89 	.word	0x08004c89
 8004cc0:	08004c89 	.word	0x08004c89
 8004cc4:	08004c89 	.word	0x08004c89
 8004cc8:	08004c89 	.word	0x08004c89
 8004ccc:	08004e1b 	.word	0x08004e1b
 8004cd0:	08004d3d 	.word	0x08004d3d
 8004cd4:	08004dfd 	.word	0x08004dfd
 8004cd8:	08004c89 	.word	0x08004c89
 8004cdc:	08004c89 	.word	0x08004c89
 8004ce0:	08004e3d 	.word	0x08004e3d
 8004ce4:	08004c89 	.word	0x08004c89
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004c89 	.word	0x08004c89
 8004cf0:	08004c89 	.word	0x08004c89
 8004cf4:	08004e05 	.word	0x08004e05
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	600a      	str	r2, [r1, #0]
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0a4      	b.n	8004e56 <_printf_i+0x1f6>
 8004d0c:	6825      	ldr	r5, [r4, #0]
 8004d0e:	6808      	ldr	r0, [r1, #0]
 8004d10:	062e      	lsls	r6, r5, #24
 8004d12:	f100 0304 	add.w	r3, r0, #4
 8004d16:	d50a      	bpl.n	8004d2e <_printf_i+0xce>
 8004d18:	6805      	ldr	r5, [r0, #0]
 8004d1a:	600b      	str	r3, [r1, #0]
 8004d1c:	2d00      	cmp	r5, #0
 8004d1e:	da03      	bge.n	8004d28 <_printf_i+0xc8>
 8004d20:	232d      	movs	r3, #45	; 0x2d
 8004d22:	426d      	negs	r5, r5
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	230a      	movs	r3, #10
 8004d2a:	485e      	ldr	r0, [pc, #376]	; (8004ea4 <_printf_i+0x244>)
 8004d2c:	e019      	b.n	8004d62 <_printf_i+0x102>
 8004d2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d32:	6805      	ldr	r5, [r0, #0]
 8004d34:	600b      	str	r3, [r1, #0]
 8004d36:	bf18      	it	ne
 8004d38:	b22d      	sxthne	r5, r5
 8004d3a:	e7ef      	b.n	8004d1c <_printf_i+0xbc>
 8004d3c:	680b      	ldr	r3, [r1, #0]
 8004d3e:	6825      	ldr	r5, [r4, #0]
 8004d40:	1d18      	adds	r0, r3, #4
 8004d42:	6008      	str	r0, [r1, #0]
 8004d44:	0628      	lsls	r0, r5, #24
 8004d46:	d501      	bpl.n	8004d4c <_printf_i+0xec>
 8004d48:	681d      	ldr	r5, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <_printf_i+0xf2>
 8004d4c:	0669      	lsls	r1, r5, #25
 8004d4e:	d5fb      	bpl.n	8004d48 <_printf_i+0xe8>
 8004d50:	881d      	ldrh	r5, [r3, #0]
 8004d52:	2f6f      	cmp	r7, #111	; 0x6f
 8004d54:	bf0c      	ite	eq
 8004d56:	2308      	moveq	r3, #8
 8004d58:	230a      	movne	r3, #10
 8004d5a:	4852      	ldr	r0, [pc, #328]	; (8004ea4 <_printf_i+0x244>)
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d62:	6866      	ldr	r6, [r4, #4]
 8004d64:	2e00      	cmp	r6, #0
 8004d66:	bfa8      	it	ge
 8004d68:	6821      	ldrge	r1, [r4, #0]
 8004d6a:	60a6      	str	r6, [r4, #8]
 8004d6c:	bfa4      	itt	ge
 8004d6e:	f021 0104 	bicge.w	r1, r1, #4
 8004d72:	6021      	strge	r1, [r4, #0]
 8004d74:	b90d      	cbnz	r5, 8004d7a <_printf_i+0x11a>
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	d04d      	beq.n	8004e16 <_printf_i+0x1b6>
 8004d7a:	4616      	mov	r6, r2
 8004d7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d80:	fb03 5711 	mls	r7, r3, r1, r5
 8004d84:	5dc7      	ldrb	r7, [r0, r7]
 8004d86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d8a:	462f      	mov	r7, r5
 8004d8c:	42bb      	cmp	r3, r7
 8004d8e:	460d      	mov	r5, r1
 8004d90:	d9f4      	bls.n	8004d7c <_printf_i+0x11c>
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d10b      	bne.n	8004dae <_printf_i+0x14e>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	07df      	lsls	r7, r3, #31
 8004d9a:	d508      	bpl.n	8004dae <_printf_i+0x14e>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	6861      	ldr	r1, [r4, #4]
 8004da0:	4299      	cmp	r1, r3
 8004da2:	bfde      	ittt	le
 8004da4:	2330      	movle	r3, #48	; 0x30
 8004da6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004daa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dae:	1b92      	subs	r2, r2, r6
 8004db0:	6122      	str	r2, [r4, #16]
 8004db2:	464b      	mov	r3, r9
 8004db4:	4621      	mov	r1, r4
 8004db6:	4640      	mov	r0, r8
 8004db8:	f8cd a000 	str.w	sl, [sp]
 8004dbc:	aa03      	add	r2, sp, #12
 8004dbe:	f7ff fedf 	bl	8004b80 <_printf_common>
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d14c      	bne.n	8004e60 <_printf_i+0x200>
 8004dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dca:	b004      	add	sp, #16
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	4834      	ldr	r0, [pc, #208]	; (8004ea4 <_printf_i+0x244>)
 8004dd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dd6:	680e      	ldr	r6, [r1, #0]
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dde:	061f      	lsls	r7, r3, #24
 8004de0:	600e      	str	r6, [r1, #0]
 8004de2:	d514      	bpl.n	8004e0e <_printf_i+0x1ae>
 8004de4:	07d9      	lsls	r1, r3, #31
 8004de6:	bf44      	itt	mi
 8004de8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dec:	6023      	strmi	r3, [r4, #0]
 8004dee:	b91d      	cbnz	r5, 8004df8 <_printf_i+0x198>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f023 0320 	bic.w	r3, r3, #32
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	2310      	movs	r3, #16
 8004dfa:	e7af      	b.n	8004d5c <_printf_i+0xfc>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f043 0320 	orr.w	r3, r3, #32
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	2378      	movs	r3, #120	; 0x78
 8004e06:	4828      	ldr	r0, [pc, #160]	; (8004ea8 <_printf_i+0x248>)
 8004e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e0c:	e7e3      	b.n	8004dd6 <_printf_i+0x176>
 8004e0e:	065e      	lsls	r6, r3, #25
 8004e10:	bf48      	it	mi
 8004e12:	b2ad      	uxthmi	r5, r5
 8004e14:	e7e6      	b.n	8004de4 <_printf_i+0x184>
 8004e16:	4616      	mov	r6, r2
 8004e18:	e7bb      	b.n	8004d92 <_printf_i+0x132>
 8004e1a:	680b      	ldr	r3, [r1, #0]
 8004e1c:	6826      	ldr	r6, [r4, #0]
 8004e1e:	1d1d      	adds	r5, r3, #4
 8004e20:	6960      	ldr	r0, [r4, #20]
 8004e22:	600d      	str	r5, [r1, #0]
 8004e24:	0635      	lsls	r5, r6, #24
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	d501      	bpl.n	8004e2e <_printf_i+0x1ce>
 8004e2a:	6018      	str	r0, [r3, #0]
 8004e2c:	e002      	b.n	8004e34 <_printf_i+0x1d4>
 8004e2e:	0671      	lsls	r1, r6, #25
 8004e30:	d5fb      	bpl.n	8004e2a <_printf_i+0x1ca>
 8004e32:	8018      	strh	r0, [r3, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	4616      	mov	r6, r2
 8004e38:	6123      	str	r3, [r4, #16]
 8004e3a:	e7ba      	b.n	8004db2 <_printf_i+0x152>
 8004e3c:	680b      	ldr	r3, [r1, #0]
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	600a      	str	r2, [r1, #0]
 8004e42:	681e      	ldr	r6, [r3, #0]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4630      	mov	r0, r6
 8004e48:	6862      	ldr	r2, [r4, #4]
 8004e4a:	f000 f82f 	bl	8004eac <memchr>
 8004e4e:	b108      	cbz	r0, 8004e54 <_printf_i+0x1f4>
 8004e50:	1b80      	subs	r0, r0, r6
 8004e52:	6060      	str	r0, [r4, #4]
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	6123      	str	r3, [r4, #16]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e5e:	e7a8      	b.n	8004db2 <_printf_i+0x152>
 8004e60:	4632      	mov	r2, r6
 8004e62:	4649      	mov	r1, r9
 8004e64:	4640      	mov	r0, r8
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	47d0      	blx	sl
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d0ab      	beq.n	8004dc6 <_printf_i+0x166>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	079b      	lsls	r3, r3, #30
 8004e72:	d413      	bmi.n	8004e9c <_printf_i+0x23c>
 8004e74:	68e0      	ldr	r0, [r4, #12]
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	4298      	cmp	r0, r3
 8004e7a:	bfb8      	it	lt
 8004e7c:	4618      	movlt	r0, r3
 8004e7e:	e7a4      	b.n	8004dca <_printf_i+0x16a>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4632      	mov	r2, r6
 8004e84:	4649      	mov	r1, r9
 8004e86:	4640      	mov	r0, r8
 8004e88:	47d0      	blx	sl
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d09b      	beq.n	8004dc6 <_printf_i+0x166>
 8004e8e:	3501      	adds	r5, #1
 8004e90:	68e3      	ldr	r3, [r4, #12]
 8004e92:	9903      	ldr	r1, [sp, #12]
 8004e94:	1a5b      	subs	r3, r3, r1
 8004e96:	42ab      	cmp	r3, r5
 8004e98:	dcf2      	bgt.n	8004e80 <_printf_i+0x220>
 8004e9a:	e7eb      	b.n	8004e74 <_printf_i+0x214>
 8004e9c:	2500      	movs	r5, #0
 8004e9e:	f104 0619 	add.w	r6, r4, #25
 8004ea2:	e7f5      	b.n	8004e90 <_printf_i+0x230>
 8004ea4:	08005173 	.word	0x08005173
 8004ea8:	08005184 	.word	0x08005184

08004eac <memchr>:
 8004eac:	4603      	mov	r3, r0
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	b2c9      	uxtb	r1, r1
 8004eb2:	4402      	add	r2, r0
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	d101      	bne.n	8004ebe <memchr+0x12>
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e003      	b.n	8004ec6 <memchr+0x1a>
 8004ebe:	7804      	ldrb	r4, [r0, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	428c      	cmp	r4, r1
 8004ec4:	d1f6      	bne.n	8004eb4 <memchr+0x8>
 8004ec6:	bd10      	pop	{r4, pc}

08004ec8 <memcpy>:
 8004ec8:	440a      	add	r2, r1
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ed0:	d100      	bne.n	8004ed4 <memcpy+0xc>
 8004ed2:	4770      	bx	lr
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eda:	4291      	cmp	r1, r2
 8004edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee0:	d1f9      	bne.n	8004ed6 <memcpy+0xe>
 8004ee2:	bd10      	pop	{r4, pc}

08004ee4 <memmove>:
 8004ee4:	4288      	cmp	r0, r1
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	eb01 0402 	add.w	r4, r1, r2
 8004eec:	d902      	bls.n	8004ef4 <memmove+0x10>
 8004eee:	4284      	cmp	r4, r0
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	d807      	bhi.n	8004f04 <memmove+0x20>
 8004ef4:	1e43      	subs	r3, r0, #1
 8004ef6:	42a1      	cmp	r1, r4
 8004ef8:	d008      	beq.n	8004f0c <memmove+0x28>
 8004efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f02:	e7f8      	b.n	8004ef6 <memmove+0x12>
 8004f04:	4601      	mov	r1, r0
 8004f06:	4402      	add	r2, r0
 8004f08:	428a      	cmp	r2, r1
 8004f0a:	d100      	bne.n	8004f0e <memmove+0x2a>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f16:	e7f7      	b.n	8004f08 <memmove+0x24>

08004f18 <_free_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	d043      	beq.n	8004fa8 <_free_r+0x90>
 8004f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f24:	1f0c      	subs	r4, r1, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfb8      	it	lt
 8004f2a:	18e4      	addlt	r4, r4, r3
 8004f2c:	f000 f8d0 	bl	80050d0 <__malloc_lock>
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <_free_r+0x94>)
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	4610      	mov	r0, r2
 8004f36:	b933      	cbnz	r3, 8004f46 <_free_r+0x2e>
 8004f38:	6063      	str	r3, [r4, #4]
 8004f3a:	6014      	str	r4, [r2, #0]
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f42:	f000 b8cb 	b.w	80050dc <__malloc_unlock>
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	d90a      	bls.n	8004f60 <_free_r+0x48>
 8004f4a:	6821      	ldr	r1, [r4, #0]
 8004f4c:	1862      	adds	r2, r4, r1
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	bf01      	itttt	eq
 8004f52:	681a      	ldreq	r2, [r3, #0]
 8004f54:	685b      	ldreq	r3, [r3, #4]
 8004f56:	1852      	addeq	r2, r2, r1
 8004f58:	6022      	streq	r2, [r4, #0]
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6004      	str	r4, [r0, #0]
 8004f5e:	e7ed      	b.n	8004f3c <_free_r+0x24>
 8004f60:	461a      	mov	r2, r3
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b10b      	cbz	r3, 8004f6a <_free_r+0x52>
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	d9fa      	bls.n	8004f60 <_free_r+0x48>
 8004f6a:	6811      	ldr	r1, [r2, #0]
 8004f6c:	1850      	adds	r0, r2, r1
 8004f6e:	42a0      	cmp	r0, r4
 8004f70:	d10b      	bne.n	8004f8a <_free_r+0x72>
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	4401      	add	r1, r0
 8004f76:	1850      	adds	r0, r2, r1
 8004f78:	4283      	cmp	r3, r0
 8004f7a:	6011      	str	r1, [r2, #0]
 8004f7c:	d1de      	bne.n	8004f3c <_free_r+0x24>
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4401      	add	r1, r0
 8004f84:	6011      	str	r1, [r2, #0]
 8004f86:	6053      	str	r3, [r2, #4]
 8004f88:	e7d8      	b.n	8004f3c <_free_r+0x24>
 8004f8a:	d902      	bls.n	8004f92 <_free_r+0x7a>
 8004f8c:	230c      	movs	r3, #12
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	e7d4      	b.n	8004f3c <_free_r+0x24>
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	1821      	adds	r1, r4, r0
 8004f96:	428b      	cmp	r3, r1
 8004f98:	bf01      	itttt	eq
 8004f9a:	6819      	ldreq	r1, [r3, #0]
 8004f9c:	685b      	ldreq	r3, [r3, #4]
 8004f9e:	1809      	addeq	r1, r1, r0
 8004fa0:	6021      	streq	r1, [r4, #0]
 8004fa2:	6063      	str	r3, [r4, #4]
 8004fa4:	6054      	str	r4, [r2, #4]
 8004fa6:	e7c9      	b.n	8004f3c <_free_r+0x24>
 8004fa8:	bd38      	pop	{r3, r4, r5, pc}
 8004faa:	bf00      	nop
 8004fac:	20000228 	.word	0x20000228

08004fb0 <_malloc_r>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	1ccd      	adds	r5, r1, #3
 8004fb4:	f025 0503 	bic.w	r5, r5, #3
 8004fb8:	3508      	adds	r5, #8
 8004fba:	2d0c      	cmp	r5, #12
 8004fbc:	bf38      	it	cc
 8004fbe:	250c      	movcc	r5, #12
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	db01      	blt.n	8004fca <_malloc_r+0x1a>
 8004fc6:	42a9      	cmp	r1, r5
 8004fc8:	d903      	bls.n	8004fd2 <_malloc_r+0x22>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	6033      	str	r3, [r6, #0]
 8004fce:	2000      	movs	r0, #0
 8004fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd2:	f000 f87d 	bl	80050d0 <__malloc_lock>
 8004fd6:	4921      	ldr	r1, [pc, #132]	; (800505c <_malloc_r+0xac>)
 8004fd8:	680a      	ldr	r2, [r1, #0]
 8004fda:	4614      	mov	r4, r2
 8004fdc:	b99c      	cbnz	r4, 8005006 <_malloc_r+0x56>
 8004fde:	4f20      	ldr	r7, [pc, #128]	; (8005060 <_malloc_r+0xb0>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	b923      	cbnz	r3, 8004fee <_malloc_r+0x3e>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 f862 	bl	80050b0 <_sbrk_r>
 8004fec:	6038      	str	r0, [r7, #0]
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f000 f85d 	bl	80050b0 <_sbrk_r>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d123      	bne.n	8005042 <_malloc_r+0x92>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	6033      	str	r3, [r6, #0]
 8005000:	f000 f86c 	bl	80050dc <__malloc_unlock>
 8005004:	e7e3      	b.n	8004fce <_malloc_r+0x1e>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	1b5b      	subs	r3, r3, r5
 800500a:	d417      	bmi.n	800503c <_malloc_r+0x8c>
 800500c:	2b0b      	cmp	r3, #11
 800500e:	d903      	bls.n	8005018 <_malloc_r+0x68>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	441c      	add	r4, r3
 8005014:	6025      	str	r5, [r4, #0]
 8005016:	e004      	b.n	8005022 <_malloc_r+0x72>
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	42a2      	cmp	r2, r4
 800501c:	bf0c      	ite	eq
 800501e:	600b      	streq	r3, [r1, #0]
 8005020:	6053      	strne	r3, [r2, #4]
 8005022:	4630      	mov	r0, r6
 8005024:	f000 f85a 	bl	80050dc <__malloc_unlock>
 8005028:	f104 000b 	add.w	r0, r4, #11
 800502c:	1d23      	adds	r3, r4, #4
 800502e:	f020 0007 	bic.w	r0, r0, #7
 8005032:	1ac2      	subs	r2, r0, r3
 8005034:	d0cc      	beq.n	8004fd0 <_malloc_r+0x20>
 8005036:	1a1b      	subs	r3, r3, r0
 8005038:	50a3      	str	r3, [r4, r2]
 800503a:	e7c9      	b.n	8004fd0 <_malloc_r+0x20>
 800503c:	4622      	mov	r2, r4
 800503e:	6864      	ldr	r4, [r4, #4]
 8005040:	e7cc      	b.n	8004fdc <_malloc_r+0x2c>
 8005042:	1cc4      	adds	r4, r0, #3
 8005044:	f024 0403 	bic.w	r4, r4, #3
 8005048:	42a0      	cmp	r0, r4
 800504a:	d0e3      	beq.n	8005014 <_malloc_r+0x64>
 800504c:	1a21      	subs	r1, r4, r0
 800504e:	4630      	mov	r0, r6
 8005050:	f000 f82e 	bl	80050b0 <_sbrk_r>
 8005054:	3001      	adds	r0, #1
 8005056:	d1dd      	bne.n	8005014 <_malloc_r+0x64>
 8005058:	e7cf      	b.n	8004ffa <_malloc_r+0x4a>
 800505a:	bf00      	nop
 800505c:	20000228 	.word	0x20000228
 8005060:	2000022c 	.word	0x2000022c

08005064 <_realloc_r>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	4607      	mov	r7, r0
 8005068:	4614      	mov	r4, r2
 800506a:	460e      	mov	r6, r1
 800506c:	b921      	cbnz	r1, 8005078 <_realloc_r+0x14>
 800506e:	4611      	mov	r1, r2
 8005070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005074:	f7ff bf9c 	b.w	8004fb0 <_malloc_r>
 8005078:	b922      	cbnz	r2, 8005084 <_realloc_r+0x20>
 800507a:	f7ff ff4d 	bl	8004f18 <_free_r>
 800507e:	4625      	mov	r5, r4
 8005080:	4628      	mov	r0, r5
 8005082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005084:	f000 f830 	bl	80050e8 <_malloc_usable_size_r>
 8005088:	42a0      	cmp	r0, r4
 800508a:	d20f      	bcs.n	80050ac <_realloc_r+0x48>
 800508c:	4621      	mov	r1, r4
 800508e:	4638      	mov	r0, r7
 8005090:	f7ff ff8e 	bl	8004fb0 <_malloc_r>
 8005094:	4605      	mov	r5, r0
 8005096:	2800      	cmp	r0, #0
 8005098:	d0f2      	beq.n	8005080 <_realloc_r+0x1c>
 800509a:	4631      	mov	r1, r6
 800509c:	4622      	mov	r2, r4
 800509e:	f7ff ff13 	bl	8004ec8 <memcpy>
 80050a2:	4631      	mov	r1, r6
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ff37 	bl	8004f18 <_free_r>
 80050aa:	e7e9      	b.n	8005080 <_realloc_r+0x1c>
 80050ac:	4635      	mov	r5, r6
 80050ae:	e7e7      	b.n	8005080 <_realloc_r+0x1c>

080050b0 <_sbrk_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	2300      	movs	r3, #0
 80050b4:	4d05      	ldr	r5, [pc, #20]	; (80050cc <_sbrk_r+0x1c>)
 80050b6:	4604      	mov	r4, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	f7fc fdd2 	bl	8001c64 <_sbrk>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_sbrk_r+0x1a>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_sbrk_r+0x1a>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	20000318 	.word	0x20000318

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__malloc_lock+0x8>)
 80050d2:	f000 b811 	b.w	80050f8 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000320 	.word	0x20000320

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__malloc_unlock+0x8>)
 80050de:	f000 b80c 	b.w	80050fa <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000320 	.word	0x20000320

080050e8 <_malloc_usable_size_r>:
 80050e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ec:	1f18      	subs	r0, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfbc      	itt	lt
 80050f2:	580b      	ldrlt	r3, [r1, r0]
 80050f4:	18c0      	addlt	r0, r0, r3
 80050f6:	4770      	bx	lr

080050f8 <__retarget_lock_acquire_recursive>:
 80050f8:	4770      	bx	lr

080050fa <__retarget_lock_release_recursive>:
 80050fa:	4770      	bx	lr

080050fc <_init>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr

08005108 <_fini>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr
