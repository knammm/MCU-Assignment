
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000515c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005310  08005310  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08005310  08005310  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005310  08005310  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08005318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200000b4  080053cc  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080053cc  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001803c  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f89  00000000  00000000  00038119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0003b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0003be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198dc  00000000  00000000  0003cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012750  00000000  00000000  000563a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4cd  00000000  00000000  00068af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3fc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000f4014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08005250 	.word	0x08005250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08005250 	.word	0x08005250

0800014c <fsm_automatic_run>:
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af00      	add	r7, sp, #0
 8000152:	4b91      	ldr	r3, [pc, #580]	; (8000398 <fsm_automatic_run+0x24c>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	3b01      	subs	r3, #1
 8000158:	2b17      	cmp	r3, #23
 800015a:	f200 81fb 	bhi.w	8000554 <fsm_automatic_run+0x408>
 800015e:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	080001c5 	.word	0x080001c5
 8000168:	08000555 	.word	0x08000555
 800016c:	08000555 	.word	0x08000555
 8000170:	08000555 	.word	0x08000555
 8000174:	08000555 	.word	0x08000555
 8000178:	08000555 	.word	0x08000555
 800017c:	08000555 	.word	0x08000555
 8000180:	08000555 	.word	0x08000555
 8000184:	08000555 	.word	0x08000555
 8000188:	08000555 	.word	0x08000555
 800018c:	08000555 	.word	0x08000555
 8000190:	08000555 	.word	0x08000555
 8000194:	08000555 	.word	0x08000555
 8000198:	08000555 	.word	0x08000555
 800019c:	08000555 	.word	0x08000555
 80001a0:	08000555 	.word	0x08000555
 80001a4:	08000555 	.word	0x08000555
 80001a8:	08000555 	.word	0x08000555
 80001ac:	08000555 	.word	0x08000555
 80001b0:	08000555 	.word	0x08000555
 80001b4:	08000209 	.word	0x08000209
 80001b8:	080002c3 	.word	0x080002c3
 80001bc:	080003c9 	.word	0x080003c9
 80001c0:	08000481 	.word	0x08000481
 80001c4:	4b75      	ldr	r3, [pc, #468]	; (800039c <fsm_automatic_run+0x250>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a75      	ldr	r2, [pc, #468]	; (80003a0 <fsm_automatic_run+0x254>)
 80001ca:	fb82 1203 	smull	r1, r2, r2, r3
 80001ce:	1192      	asrs	r2, r2, #6
 80001d0:	17db      	asrs	r3, r3, #31
 80001d2:	1ad3      	subs	r3, r2, r3
 80001d4:	4a73      	ldr	r2, [pc, #460]	; (80003a4 <fsm_automatic_run+0x258>)
 80001d6:	6013      	str	r3, [r2, #0]
 80001d8:	4b73      	ldr	r3, [pc, #460]	; (80003a8 <fsm_automatic_run+0x25c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a70      	ldr	r2, [pc, #448]	; (80003a0 <fsm_automatic_run+0x254>)
 80001de:	fb82 1203 	smull	r1, r2, r2, r3
 80001e2:	1192      	asrs	r2, r2, #6
 80001e4:	17db      	asrs	r3, r3, #31
 80001e6:	1ad3      	subs	r3, r2, r3
 80001e8:	4a70      	ldr	r2, [pc, #448]	; (80003ac <fsm_automatic_run+0x260>)
 80001ea:	6013      	str	r3, [r2, #0]
 80001ec:	4b6a      	ldr	r3, [pc, #424]	; (8000398 <fsm_automatic_run+0x24c>)
 80001ee:	2215      	movs	r2, #21
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	4b6d      	ldr	r3, [pc, #436]	; (80003a8 <fsm_automatic_run+0x25c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4619      	mov	r1, r3
 80001f8:	2000      	movs	r0, #0
 80001fa:	f001 fc1d 	bl	8001a38 <setTimer>
 80001fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000202:	f001 fbfd 	bl	8001a00 <setTimerSecond>
 8000206:	e1ae      	b.n	8000566 <fsm_automatic_run+0x41a>
 8000208:	2105      	movs	r1, #5
 800020a:	2001      	movs	r0, #1
 800020c:	f000 fe50 	bl	8000eb0 <Traffic_setColor>
 8000210:	2105      	movs	r1, #5
 8000212:	2002      	movs	r0, #2
 8000214:	f000 fe4c 	bl	8000eb0 <Traffic_setColor>
 8000218:	2102      	movs	r1, #2
 800021a:	2001      	movs	r0, #1
 800021c:	f000 fe48 	bl	8000eb0 <Traffic_setColor>
 8000220:	2103      	movs	r1, #3
 8000222:	2002      	movs	r0, #2
 8000224:	f000 fe44 	bl	8000eb0 <Traffic_setColor>
 8000228:	4b61      	ldr	r3, [pc, #388]	; (80003b0 <fsm_automatic_run+0x264>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b01      	cmp	r3, #1
 800022e:	d139      	bne.n	80002a4 <fsm_automatic_run+0x158>
 8000230:	4b5c      	ldr	r3, [pc, #368]	; (80003a4 <fsm_automatic_run+0x258>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	495f      	ldr	r1, [pc, #380]	; (80003b4 <fsm_automatic_run+0x268>)
 8000238:	4618      	mov	r0, r3
 800023a:	f004 fbcf 	bl	80049dc <siprintf>
 800023e:	4603      	mov	r3, r0
 8000240:	b29a      	uxth	r2, r3
 8000242:	1d39      	adds	r1, r7, #4
 8000244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000248:	485b      	ldr	r0, [pc, #364]	; (80003b8 <fsm_automatic_run+0x26c>)
 800024a:	f003 fdc1 	bl	8003dd0 <HAL_UART_Transmit>
 800024e:	4b57      	ldr	r3, [pc, #348]	; (80003ac <fsm_automatic_run+0x260>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4959      	ldr	r1, [pc, #356]	; (80003bc <fsm_automatic_run+0x270>)
 8000256:	4618      	mov	r0, r3
 8000258:	f004 fbc0 	bl	80049dc <siprintf>
 800025c:	4603      	mov	r3, r0
 800025e:	b29a      	uxth	r2, r3
 8000260:	1d39      	adds	r1, r7, #4
 8000262:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000266:	4854      	ldr	r0, [pc, #336]	; (80003b8 <fsm_automatic_run+0x26c>)
 8000268:	f003 fdb2 	bl	8003dd0 <HAL_UART_Transmit>
 800026c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000270:	f001 fbc6 	bl	8001a00 <setTimerSecond>
 8000274:	4b4b      	ldr	r3, [pc, #300]	; (80003a4 <fsm_automatic_run+0x258>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3b01      	subs	r3, #1
 800027a:	4a4a      	ldr	r2, [pc, #296]	; (80003a4 <fsm_automatic_run+0x258>)
 800027c:	6013      	str	r3, [r2, #0]
 800027e:	4b4b      	ldr	r3, [pc, #300]	; (80003ac <fsm_automatic_run+0x260>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3b01      	subs	r3, #1
 8000284:	4a49      	ldr	r2, [pc, #292]	; (80003ac <fsm_automatic_run+0x260>)
 8000286:	6013      	str	r3, [r2, #0]
 8000288:	4b48      	ldr	r3, [pc, #288]	; (80003ac <fsm_automatic_run+0x260>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	dc09      	bgt.n	80002a4 <fsm_automatic_run+0x158>
 8000290:	4b4b      	ldr	r3, [pc, #300]	; (80003c0 <fsm_automatic_run+0x274>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a42      	ldr	r2, [pc, #264]	; (80003a0 <fsm_automatic_run+0x254>)
 8000296:	fb82 1203 	smull	r1, r2, r2, r3
 800029a:	1192      	asrs	r2, r2, #6
 800029c:	17db      	asrs	r3, r3, #31
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	4a42      	ldr	r2, [pc, #264]	; (80003ac <fsm_automatic_run+0x260>)
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	4b47      	ldr	r3, [pc, #284]	; (80003c4 <fsm_automatic_run+0x278>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	f040 8155 	bne.w	8000558 <fsm_automatic_run+0x40c>
 80002ae:	4b44      	ldr	r3, [pc, #272]	; (80003c0 <fsm_automatic_run+0x274>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4619      	mov	r1, r3
 80002b4:	2000      	movs	r0, #0
 80002b6:	f001 fbbf 	bl	8001a38 <setTimer>
 80002ba:	4b37      	ldr	r3, [pc, #220]	; (8000398 <fsm_automatic_run+0x24c>)
 80002bc:	2216      	movs	r2, #22
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	e14a      	b.n	8000558 <fsm_automatic_run+0x40c>
 80002c2:	2105      	movs	r1, #5
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 fdf3 	bl	8000eb0 <Traffic_setColor>
 80002ca:	2105      	movs	r1, #5
 80002cc:	2002      	movs	r0, #2
 80002ce:	f000 fdef 	bl	8000eb0 <Traffic_setColor>
 80002d2:	2102      	movs	r1, #2
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 fdeb 	bl	8000eb0 <Traffic_setColor>
 80002da:	2104      	movs	r1, #4
 80002dc:	2002      	movs	r0, #2
 80002de:	f000 fde7 	bl	8000eb0 <Traffic_setColor>
 80002e2:	4b33      	ldr	r3, [pc, #204]	; (80003b0 <fsm_automatic_run+0x264>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d147      	bne.n	800037a <fsm_automatic_run+0x22e>
 80002ea:	4b2e      	ldr	r3, [pc, #184]	; (80003a4 <fsm_automatic_run+0x258>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4930      	ldr	r1, [pc, #192]	; (80003b4 <fsm_automatic_run+0x268>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f004 fb72 	bl	80049dc <siprintf>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	1d39      	adds	r1, r7, #4
 80002fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000302:	482d      	ldr	r0, [pc, #180]	; (80003b8 <fsm_automatic_run+0x26c>)
 8000304:	f003 fd64 	bl	8003dd0 <HAL_UART_Transmit>
 8000308:	4b28      	ldr	r3, [pc, #160]	; (80003ac <fsm_automatic_run+0x260>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	492b      	ldr	r1, [pc, #172]	; (80003bc <fsm_automatic_run+0x270>)
 8000310:	4618      	mov	r0, r3
 8000312:	f004 fb63 	bl	80049dc <siprintf>
 8000316:	4603      	mov	r3, r0
 8000318:	b29a      	uxth	r2, r3
 800031a:	1d39      	adds	r1, r7, #4
 800031c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000320:	4825      	ldr	r0, [pc, #148]	; (80003b8 <fsm_automatic_run+0x26c>)
 8000322:	f003 fd55 	bl	8003dd0 <HAL_UART_Transmit>
 8000326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032a:	f001 fb69 	bl	8001a00 <setTimerSecond>
 800032e:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <fsm_automatic_run+0x258>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	3b01      	subs	r3, #1
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <fsm_automatic_run+0x258>)
 8000336:	6013      	str	r3, [r2, #0]
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <fsm_automatic_run+0x258>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	dc09      	bgt.n	8000354 <fsm_automatic_run+0x208>
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <fsm_automatic_run+0x25c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a16      	ldr	r2, [pc, #88]	; (80003a0 <fsm_automatic_run+0x254>)
 8000346:	fb82 1203 	smull	r1, r2, r2, r3
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	17db      	asrs	r3, r3, #31
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <fsm_automatic_run+0x258>)
 8000352:	6013      	str	r3, [r2, #0]
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <fsm_automatic_run+0x260>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <fsm_automatic_run+0x260>)
 800035c:	6013      	str	r3, [r2, #0]
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <fsm_automatic_run+0x260>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	dc09      	bgt.n	800037a <fsm_automatic_run+0x22e>
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <fsm_automatic_run+0x250>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <fsm_automatic_run+0x254>)
 800036c:	fb82 1203 	smull	r1, r2, r2, r3
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	17db      	asrs	r3, r3, #31
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <fsm_automatic_run+0x260>)
 8000378:	6013      	str	r3, [r2, #0]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <fsm_automatic_run+0x278>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	f040 80ec 	bne.w	800055c <fsm_automatic_run+0x410>
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <fsm_automatic_run+0x25c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	2000      	movs	r0, #0
 800038c:	f001 fb54 	bl	8001a38 <setTimer>
 8000390:	4b01      	ldr	r3, [pc, #4]	; (8000398 <fsm_automatic_run+0x24c>)
 8000392:	2217      	movs	r2, #23
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	e0e1      	b.n	800055c <fsm_automatic_run+0x410>
 8000398:	20000018 	.word	0x20000018
 800039c:	2000001c 	.word	0x2000001c
 80003a0:	10624dd3 	.word	0x10624dd3
 80003a4:	200000d8 	.word	0x200000d8
 80003a8:	20000024 	.word	0x20000024
 80003ac:	200000dc 	.word	0x200000dc
 80003b0:	200001ec 	.word	0x200001ec
 80003b4:	08005268 	.word	0x08005268
 80003b8:	200002cc 	.word	0x200002cc
 80003bc:	08005278 	.word	0x08005278
 80003c0:	20000020 	.word	0x20000020
 80003c4:	200001f4 	.word	0x200001f4
 80003c8:	2105      	movs	r1, #5
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 fd70 	bl	8000eb0 <Traffic_setColor>
 80003d0:	2105      	movs	r1, #5
 80003d2:	2002      	movs	r0, #2
 80003d4:	f000 fd6c 	bl	8000eb0 <Traffic_setColor>
 80003d8:	2103      	movs	r1, #3
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 fd68 	bl	8000eb0 <Traffic_setColor>
 80003e0:	2102      	movs	r1, #2
 80003e2:	2002      	movs	r0, #2
 80003e4:	f000 fd64 	bl	8000eb0 <Traffic_setColor>
 80003e8:	4b98      	ldr	r3, [pc, #608]	; (800064c <fsm_automatic_run+0x500>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d139      	bne.n	8000464 <fsm_automatic_run+0x318>
 80003f0:	4b97      	ldr	r3, [pc, #604]	; (8000650 <fsm_automatic_run+0x504>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4997      	ldr	r1, [pc, #604]	; (8000654 <fsm_automatic_run+0x508>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f004 faef 	bl	80049dc <siprintf>
 80003fe:	4603      	mov	r3, r0
 8000400:	b29a      	uxth	r2, r3
 8000402:	1d39      	adds	r1, r7, #4
 8000404:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000408:	4893      	ldr	r0, [pc, #588]	; (8000658 <fsm_automatic_run+0x50c>)
 800040a:	f003 fce1 	bl	8003dd0 <HAL_UART_Transmit>
 800040e:	4b93      	ldr	r3, [pc, #588]	; (800065c <fsm_automatic_run+0x510>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4992      	ldr	r1, [pc, #584]	; (8000660 <fsm_automatic_run+0x514>)
 8000416:	4618      	mov	r0, r3
 8000418:	f004 fae0 	bl	80049dc <siprintf>
 800041c:	4603      	mov	r3, r0
 800041e:	b29a      	uxth	r2, r3
 8000420:	1d39      	adds	r1, r7, #4
 8000422:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000426:	488c      	ldr	r0, [pc, #560]	; (8000658 <fsm_automatic_run+0x50c>)
 8000428:	f003 fcd2 	bl	8003dd0 <HAL_UART_Transmit>
 800042c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000430:	f001 fae6 	bl	8001a00 <setTimerSecond>
 8000434:	4b86      	ldr	r3, [pc, #536]	; (8000650 <fsm_automatic_run+0x504>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3b01      	subs	r3, #1
 800043a:	4a85      	ldr	r2, [pc, #532]	; (8000650 <fsm_automatic_run+0x504>)
 800043c:	6013      	str	r3, [r2, #0]
 800043e:	4b84      	ldr	r3, [pc, #528]	; (8000650 <fsm_automatic_run+0x504>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	dc09      	bgt.n	800045a <fsm_automatic_run+0x30e>
 8000446:	4b87      	ldr	r3, [pc, #540]	; (8000664 <fsm_automatic_run+0x518>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a87      	ldr	r2, [pc, #540]	; (8000668 <fsm_automatic_run+0x51c>)
 800044c:	fb82 1203 	smull	r1, r2, r2, r3
 8000450:	1192      	asrs	r2, r2, #6
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	4a7e      	ldr	r2, [pc, #504]	; (8000650 <fsm_automatic_run+0x504>)
 8000458:	6013      	str	r3, [r2, #0]
 800045a:	4b80      	ldr	r3, [pc, #512]	; (800065c <fsm_automatic_run+0x510>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	3b01      	subs	r3, #1
 8000460:	4a7e      	ldr	r2, [pc, #504]	; (800065c <fsm_automatic_run+0x510>)
 8000462:	6013      	str	r3, [r2, #0]
 8000464:	4b81      	ldr	r3, [pc, #516]	; (800066c <fsm_automatic_run+0x520>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d179      	bne.n	8000560 <fsm_automatic_run+0x414>
 800046c:	4b7d      	ldr	r3, [pc, #500]	; (8000664 <fsm_automatic_run+0x518>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4619      	mov	r1, r3
 8000472:	2000      	movs	r0, #0
 8000474:	f001 fae0 	bl	8001a38 <setTimer>
 8000478:	4b7d      	ldr	r3, [pc, #500]	; (8000670 <fsm_automatic_run+0x524>)
 800047a:	2218      	movs	r2, #24
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	e06f      	b.n	8000560 <fsm_automatic_run+0x414>
 8000480:	2105      	movs	r1, #5
 8000482:	2001      	movs	r0, #1
 8000484:	f000 fd14 	bl	8000eb0 <Traffic_setColor>
 8000488:	2105      	movs	r1, #5
 800048a:	2002      	movs	r0, #2
 800048c:	f000 fd10 	bl	8000eb0 <Traffic_setColor>
 8000490:	2104      	movs	r1, #4
 8000492:	2001      	movs	r0, #1
 8000494:	f000 fd0c 	bl	8000eb0 <Traffic_setColor>
 8000498:	2102      	movs	r1, #2
 800049a:	2002      	movs	r0, #2
 800049c:	f000 fd08 	bl	8000eb0 <Traffic_setColor>
 80004a0:	4b6a      	ldr	r3, [pc, #424]	; (800064c <fsm_automatic_run+0x500>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d147      	bne.n	8000538 <fsm_automatic_run+0x3ec>
 80004a8:	4b69      	ldr	r3, [pc, #420]	; (8000650 <fsm_automatic_run+0x504>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4969      	ldr	r1, [pc, #420]	; (8000654 <fsm_automatic_run+0x508>)
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 fa93 	bl	80049dc <siprintf>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	1d39      	adds	r1, r7, #4
 80004bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004c0:	4865      	ldr	r0, [pc, #404]	; (8000658 <fsm_automatic_run+0x50c>)
 80004c2:	f003 fc85 	bl	8003dd0 <HAL_UART_Transmit>
 80004c6:	4b65      	ldr	r3, [pc, #404]	; (800065c <fsm_automatic_run+0x510>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4964      	ldr	r1, [pc, #400]	; (8000660 <fsm_automatic_run+0x514>)
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 fa84 	bl	80049dc <siprintf>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004de:	485e      	ldr	r0, [pc, #376]	; (8000658 <fsm_automatic_run+0x50c>)
 80004e0:	f003 fc76 	bl	8003dd0 <HAL_UART_Transmit>
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f001 fa8a 	bl	8001a00 <setTimerSecond>
 80004ec:	4b58      	ldr	r3, [pc, #352]	; (8000650 <fsm_automatic_run+0x504>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	4a57      	ldr	r2, [pc, #348]	; (8000650 <fsm_automatic_run+0x504>)
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	4b56      	ldr	r3, [pc, #344]	; (8000650 <fsm_automatic_run+0x504>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	dc09      	bgt.n	8000512 <fsm_automatic_run+0x3c6>
 80004fe:	4b5d      	ldr	r3, [pc, #372]	; (8000674 <fsm_automatic_run+0x528>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a59      	ldr	r2, [pc, #356]	; (8000668 <fsm_automatic_run+0x51c>)
 8000504:	fb82 1203 	smull	r1, r2, r2, r3
 8000508:	1192      	asrs	r2, r2, #6
 800050a:	17db      	asrs	r3, r3, #31
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4a50      	ldr	r2, [pc, #320]	; (8000650 <fsm_automatic_run+0x504>)
 8000510:	6013      	str	r3, [r2, #0]
 8000512:	4b52      	ldr	r3, [pc, #328]	; (800065c <fsm_automatic_run+0x510>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3b01      	subs	r3, #1
 8000518:	4a50      	ldr	r2, [pc, #320]	; (800065c <fsm_automatic_run+0x510>)
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	4b4f      	ldr	r3, [pc, #316]	; (800065c <fsm_automatic_run+0x510>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	dc09      	bgt.n	8000538 <fsm_automatic_run+0x3ec>
 8000524:	4b54      	ldr	r3, [pc, #336]	; (8000678 <fsm_automatic_run+0x52c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a4f      	ldr	r2, [pc, #316]	; (8000668 <fsm_automatic_run+0x51c>)
 800052a:	fb82 1203 	smull	r1, r2, r2, r3
 800052e:	1192      	asrs	r2, r2, #6
 8000530:	17db      	asrs	r3, r3, #31
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	4a49      	ldr	r2, [pc, #292]	; (800065c <fsm_automatic_run+0x510>)
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b4c      	ldr	r3, [pc, #304]	; (800066c <fsm_automatic_run+0x520>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d111      	bne.n	8000564 <fsm_automatic_run+0x418>
 8000540:	4b4d      	ldr	r3, [pc, #308]	; (8000678 <fsm_automatic_run+0x52c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	2000      	movs	r0, #0
 8000548:	f001 fa76 	bl	8001a38 <setTimer>
 800054c:	4b48      	ldr	r3, [pc, #288]	; (8000670 <fsm_automatic_run+0x524>)
 800054e:	2215      	movs	r2, #21
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	e007      	b.n	8000564 <fsm_automatic_run+0x418>
 8000554:	bf00      	nop
 8000556:	e006      	b.n	8000566 <fsm_automatic_run+0x41a>
 8000558:	bf00      	nop
 800055a:	e004      	b.n	8000566 <fsm_automatic_run+0x41a>
 800055c:	bf00      	nop
 800055e:	e002      	b.n	8000566 <fsm_automatic_run+0x41a>
 8000560:	bf00      	nop
 8000562:	e000      	b.n	8000566 <fsm_automatic_run+0x41a>
 8000564:	bf00      	nop
 8000566:	2001      	movs	r0, #1
 8000568:	f000 fe04 	bl	8001174 <isButtonPressed>
 800056c:	4603      	mov	r3, r0
 800056e:	2b01      	cmp	r3, #1
 8000570:	d151      	bne.n	8000616 <fsm_automatic_run+0x4ca>
 8000572:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <fsm_automatic_run+0x524>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b15      	cmp	r3, #21
 8000578:	d00b      	beq.n	8000592 <fsm_automatic_run+0x446>
 800057a:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <fsm_automatic_run+0x524>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b16      	cmp	r3, #22
 8000580:	d007      	beq.n	8000592 <fsm_automatic_run+0x446>
 8000582:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <fsm_automatic_run+0x524>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b17      	cmp	r3, #23
 8000588:	d003      	beq.n	8000592 <fsm_automatic_run+0x446>
 800058a:	4b39      	ldr	r3, [pc, #228]	; (8000670 <fsm_automatic_run+0x524>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b18      	cmp	r3, #24
 8000590:	d13d      	bne.n	800060e <fsm_automatic_run+0x4c2>
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <fsm_automatic_run+0x524>)
 8000594:	220b      	movs	r2, #11
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	210a      	movs	r1, #10
 800059a:	2001      	movs	r0, #1
 800059c:	f001 fa4c 	bl	8001a38 <setTimer>
 80005a0:	f241 3188 	movw	r1, #5000	; 0x1388
 80005a4:	2005      	movs	r0, #5
 80005a6:	f001 fa47 	bl	8001a38 <setTimer>
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f001 fa27 	bl	8001a00 <setTimerSecond>
 80005b2:	2102      	movs	r1, #2
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fc7b 	bl	8000eb0 <Traffic_setColor>
 80005ba:	2102      	movs	r1, #2
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 fc77 	bl	8000eb0 <Traffic_setColor>
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <fsm_automatic_run+0x528>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a28      	ldr	r2, [pc, #160]	; (8000668 <fsm_automatic_run+0x51c>)
 80005c8:	fb82 1203 	smull	r1, r2, r2, r3
 80005cc:	1192      	asrs	r2, r2, #6
 80005ce:	17db      	asrs	r3, r3, #31
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4a2a      	ldr	r2, [pc, #168]	; (800067c <fsm_automatic_run+0x530>)
 80005d4:	6013      	str	r3, [r2, #0]
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <fsm_automatic_run+0x518>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a23      	ldr	r2, [pc, #140]	; (8000668 <fsm_automatic_run+0x51c>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1192      	asrs	r2, r2, #6
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	4a26      	ldr	r2, [pc, #152]	; (8000680 <fsm_automatic_run+0x534>)
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <fsm_automatic_run+0x52c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <fsm_automatic_run+0x51c>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	1192      	asrs	r2, r2, #6
 80005f6:	17db      	asrs	r3, r3, #31
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4a22      	ldr	r2, [pc, #136]	; (8000684 <fsm_automatic_run+0x538>)
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <fsm_automatic_run+0x530>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <fsm_automatic_run+0x504>)
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <fsm_automatic_run+0x510>)
 8000608:	2202      	movs	r2, #2
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	e019      	b.n	8000642 <fsm_automatic_run+0x4f6>
 800060e:	2001      	movs	r0, #1
 8000610:	f000 fdd2 	bl	80011b8 <setBackButtonFlag>
 8000614:	e015      	b.n	8000642 <fsm_automatic_run+0x4f6>
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fdac 	bl	8001174 <isButtonPressed>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d10f      	bne.n	8000642 <fsm_automatic_run+0x4f6>
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <fsm_automatic_run+0x53c>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	f242 7110 	movw	r1, #10000	; 0x2710
 800062c:	2002      	movs	r0, #2
 800062e:	f001 fa03 	bl	8001a38 <setTimer>
 8000632:	2164      	movs	r1, #100	; 0x64
 8000634:	2003      	movs	r0, #3
 8000636:	f001 f9ff 	bl	8001a38 <setTimer>
 800063a:	2164      	movs	r1, #100	; 0x64
 800063c:	2004      	movs	r0, #4
 800063e:	f001 f9fb 	bl	8001a38 <setTimer>
 8000642:	bf00      	nop
 8000644:	3738      	adds	r7, #56	; 0x38
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001ec 	.word	0x200001ec
 8000650:	200000d8 	.word	0x200000d8
 8000654:	08005268 	.word	0x08005268
 8000658:	200002cc 	.word	0x200002cc
 800065c:	200000dc 	.word	0x200000dc
 8000660:	08005278 	.word	0x08005278
 8000664:	20000020 	.word	0x20000020
 8000668:	10624dd3 	.word	0x10624dd3
 800066c:	200001f4 	.word	0x200001f4
 8000670:	20000018 	.word	0x20000018
 8000674:	2000001c 	.word	0x2000001c
 8000678:	20000024 	.word	0x20000024
 800067c:	20000238 	.word	0x20000238
 8000680:	20000234 	.word	0x20000234
 8000684:	20000230 	.word	0x20000230
 8000688:	200000d0 	.word	0x200000d0

0800068c <returnAutomatic>:
 *      Author: olkmphy
 */
#include "fsm_manual.h"

// Return to Automatic
void returnAutomatic(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	durationGREEN = durationRED - durationYELLOW;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <returnAutomatic+0x58>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <returnAutomatic+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <returnAutomatic+0x60>)
 800069c:	6013      	str	r3, [r2, #0]
	timerTraffic1 = durationRED / 1000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <returnAutomatic+0x58>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <returnAutomatic+0x64>)
 80006a4:	fb82 1203 	smull	r1, r2, r2, r3
 80006a8:	1192      	asrs	r2, r2, #6
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <returnAutomatic+0x68>)
 80006b0:	6013      	str	r3, [r2, #0]
	timerTraffic2 = durationGREEN / 1000;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <returnAutomatic+0x60>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <returnAutomatic+0x64>)
 80006b8:	fb82 1203 	smull	r1, r2, r2, r3
 80006bc:	1192      	asrs	r2, r2, #6
 80006be:	17db      	asrs	r3, r3, #31
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <returnAutomatic+0x6c>)
 80006c4:	6013      	str	r3, [r2, #0]
	setTimer(0, durationGREEN);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <returnAutomatic+0x60>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	2000      	movs	r0, #0
 80006ce:	f001 f9b3 	bl	8001a38 <setTimer>
	setTimerSecond(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f001 f993 	bl	8001a00 <setTimerSecond>
	status = RED_GREEN;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <returnAutomatic+0x70>)
 80006dc:	2215      	movs	r2, #21
 80006de:	601a      	str	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	20000020 	.word	0x20000020
 80006ec:	20000024 	.word	0x20000024
 80006f0:	10624dd3 	.word	0x10624dd3
 80006f4:	200000d8 	.word	0x200000d8
 80006f8:	200000dc 	.word	0x200000dc
 80006fc:	20000018 	.word	0x20000018

08000700 <fsm_manual_run>:

void fsm_manual_run(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	; 0x38
 8000704:	af00      	add	r7, sp, #0
	char str[50];
	switch(status){
 8000706:	4bac      	ldr	r3, [pc, #688]	; (80009b8 <fsm_manual_run+0x2b8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b0d      	cmp	r3, #13
 800070c:	f000 8129 	beq.w	8000962 <fsm_manual_run+0x262>
 8000710:	2b0d      	cmp	r3, #13
 8000712:	f300 81c3 	bgt.w	8000a9c <fsm_manual_run+0x39c>
 8000716:	2b0b      	cmp	r3, #11
 8000718:	d003      	beq.n	8000722 <fsm_manual_run+0x22>
 800071a:	2b0c      	cmp	r3, #12
 800071c:	f000 808b 	beq.w	8000836 <fsm_manual_run+0x136>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
			}
			break;
		default:
			break;
 8000720:	e1bc      	b.n	8000a9c <fsm_manual_run+0x39c>
			if(timerFlag[1] == 1){
 8000722:	4ba6      	ldr	r3, [pc, #664]	; (80009bc <fsm_manual_run+0x2bc>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10b      	bne.n	8000742 <fsm_manual_run+0x42>
				setTimer(1, 250); // blink every 0.25s
 800072a:	21fa      	movs	r1, #250	; 0xfa
 800072c:	2001      	movs	r0, #1
 800072e:	f001 f983 	bl	8001a38 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_RED);
 8000732:	2102      	movs	r1, #2
 8000734:	2007      	movs	r0, #7
 8000736:	f000 fb29 	bl	8000d8c <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_RED);
 800073a:	2102      	movs	r1, #2
 800073c:	2008      	movs	r0, #8
 800073e:	f000 fb25 	bl	8000d8c <blinkLEDs>
			if(isButtonPressed(2) == 1){
 8000742:	2002      	movs	r0, #2
 8000744:	f000 fd16 	bl	8001174 <isButtonPressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d119      	bne.n	8000782 <fsm_manual_run+0x82>
				setTimer(5, 5000);
 800074e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000752:	2005      	movs	r0, #5
 8000754:	f001 f970 	bl	8001a38 <setTimer>
				RED_sec++;
 8000758:	4b99      	ldr	r3, [pc, #612]	; (80009c0 <fsm_manual_run+0x2c0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a98      	ldr	r2, [pc, #608]	; (80009c0 <fsm_manual_run+0x2c0>)
 8000760:	6013      	str	r3, [r2, #0]
				if(RED_sec >= 100) {
 8000762:	4b97      	ldr	r3, [pc, #604]	; (80009c0 <fsm_manual_run+0x2c0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b63      	cmp	r3, #99	; 0x63
 8000768:	dd06      	ble.n	8000778 <fsm_manual_run+0x78>
					RED_sec = 1;
 800076a:	4b95      	ldr	r3, [pc, #596]	; (80009c0 <fsm_manual_run+0x2c0>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 8000770:	4b94      	ldr	r3, [pc, #592]	; (80009c4 <fsm_manual_run+0x2c4>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	e004      	b.n	8000782 <fsm_manual_run+0x82>
				else timerTraffic1++;
 8000778:	4b92      	ldr	r3, [pc, #584]	; (80009c4 <fsm_manual_run+0x2c4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a91      	ldr	r2, [pc, #580]	; (80009c4 <fsm_manual_run+0x2c4>)
 8000780:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 8000782:	2003      	movs	r0, #3
 8000784:	f000 fcf6 	bl	8001174 <isButtonPressed>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d10c      	bne.n	80007a8 <fsm_manual_run+0xa8>
				setTimer(5, 5000);
 800078e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000792:	2005      	movs	r0, #5
 8000794:	f001 f950 	bl	8001a38 <setTimer>
				durationRED = RED_sec * 1000;
 8000798:	4b89      	ldr	r3, [pc, #548]	; (80009c0 <fsm_manual_run+0x2c0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a0:	fb02 f303 	mul.w	r3, r2, r3
 80007a4:	4a88      	ldr	r2, [pc, #544]	; (80009c8 <fsm_manual_run+0x2c8>)
 80007a6:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fce3 	bl	8001174 <isButtonPressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d118      	bne.n	80007e6 <fsm_manual_run+0xe6>
				setTimer(5, 5000);
 80007b4:	f241 3188 	movw	r1, #5000	; 0x1388
 80007b8:	2005      	movs	r0, #5
 80007ba:	f001 f93d 	bl	8001a38 <setTimer>
				setTimer(1, 10);
 80007be:	210a      	movs	r1, #10
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 f939 	bl	8001a38 <setTimer>
				status = MOD_YELLOW;
 80007c6:	4b7c      	ldr	r3, [pc, #496]	; (80009b8 <fsm_manual_run+0x2b8>)
 80007c8:	220c      	movs	r2, #12
 80007ca:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationYELLOW / 1000;
 80007cc:	4b7f      	ldr	r3, [pc, #508]	; (80009cc <fsm_manual_run+0x2cc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a7f      	ldr	r2, [pc, #508]	; (80009d0 <fsm_manual_run+0x2d0>)
 80007d2:	fb82 1203 	smull	r1, r2, r2, r3
 80007d6:	1192      	asrs	r2, r2, #6
 80007d8:	17db      	asrs	r3, r3, #31
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	4a79      	ldr	r2, [pc, #484]	; (80009c4 <fsm_manual_run+0x2c4>)
 80007de:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 3;
 80007e0:	4b7c      	ldr	r3, [pc, #496]	; (80009d4 <fsm_manual_run+0x2d4>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	601a      	str	r2, [r3, #0]
			if(timerSecond == 1){
 80007e6:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <fsm_manual_run+0x2d8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	f040 8158 	bne.w	8000aa0 <fsm_manual_run+0x3a0>
				setTimerSecond(1000);
 80007f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f4:	f001 f904 	bl	8001a00 <setTimerSecond>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
 80007f8:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <fsm_manual_run+0x2c4>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	463b      	mov	r3, r7
 80007fe:	4977      	ldr	r1, [pc, #476]	; (80009dc <fsm_manual_run+0x2dc>)
 8000800:	4618      	mov	r0, r3
 8000802:	f004 f8eb 	bl	80049dc <siprintf>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	4639      	mov	r1, r7
 800080c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000810:	4873      	ldr	r0, [pc, #460]	; (80009e0 <fsm_manual_run+0x2e0>)
 8000812:	f003 fadd 	bl	8003dd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
 8000816:	4b6f      	ldr	r3, [pc, #444]	; (80009d4 <fsm_manual_run+0x2d4>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	463b      	mov	r3, r7
 800081c:	4971      	ldr	r1, [pc, #452]	; (80009e4 <fsm_manual_run+0x2e4>)
 800081e:	4618      	mov	r0, r3
 8000820:	f004 f8dc 	bl	80049dc <siprintf>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	4639      	mov	r1, r7
 800082a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800082e:	486c      	ldr	r0, [pc, #432]	; (80009e0 <fsm_manual_run+0x2e0>)
 8000830:	f003 face 	bl	8003dd0 <HAL_UART_Transmit>
			break;
 8000834:	e134      	b.n	8000aa0 <fsm_manual_run+0x3a0>
			if(timerFlag[1] == 1){
 8000836:	4b61      	ldr	r3, [pc, #388]	; (80009bc <fsm_manual_run+0x2bc>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d10b      	bne.n	8000856 <fsm_manual_run+0x156>
				setTimer(1, 250); // blink every 0.25s
 800083e:	21fa      	movs	r1, #250	; 0xfa
 8000840:	2001      	movs	r0, #1
 8000842:	f001 f8f9 	bl	8001a38 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_YELLOW);
 8000846:	2104      	movs	r1, #4
 8000848:	2007      	movs	r0, #7
 800084a:	f000 fa9f 	bl	8000d8c <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_YELLOW);
 800084e:	2104      	movs	r1, #4
 8000850:	2008      	movs	r0, #8
 8000852:	f000 fa9b 	bl	8000d8c <blinkLEDs>
			if(isButtonPressed(2) == 1){
 8000856:	2002      	movs	r0, #2
 8000858:	f000 fc8c 	bl	8001174 <isButtonPressed>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d119      	bne.n	8000896 <fsm_manual_run+0x196>
				setTimer(5, 5000);
 8000862:	f241 3188 	movw	r1, #5000	; 0x1388
 8000866:	2005      	movs	r0, #5
 8000868:	f001 f8e6 	bl	8001a38 <setTimer>
				YELLOW_sec++;
 800086c:	4b5e      	ldr	r3, [pc, #376]	; (80009e8 <fsm_manual_run+0x2e8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a5d      	ldr	r2, [pc, #372]	; (80009e8 <fsm_manual_run+0x2e8>)
 8000874:	6013      	str	r3, [r2, #0]
				if(YELLOW_sec >= 100) {
 8000876:	4b5c      	ldr	r3, [pc, #368]	; (80009e8 <fsm_manual_run+0x2e8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b63      	cmp	r3, #99	; 0x63
 800087c:	dd06      	ble.n	800088c <fsm_manual_run+0x18c>
					YELLOW_sec = 1;
 800087e:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <fsm_manual_run+0x2e8>)
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 8000884:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <fsm_manual_run+0x2c4>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e004      	b.n	8000896 <fsm_manual_run+0x196>
				else timerTraffic1++;
 800088c:	4b4d      	ldr	r3, [pc, #308]	; (80009c4 <fsm_manual_run+0x2c4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a4c      	ldr	r2, [pc, #304]	; (80009c4 <fsm_manual_run+0x2c4>)
 8000894:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 8000896:	2003      	movs	r0, #3
 8000898:	f000 fc6c 	bl	8001174 <isButtonPressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d118      	bne.n	80008d4 <fsm_manual_run+0x1d4>
				setTimer(5, 5000);
 80008a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80008a6:	2005      	movs	r0, #5
 80008a8:	f001 f8c6 	bl	8001a38 <setTimer>
				int prevDurationYELLOW = durationYELLOW;
 80008ac:	4b47      	ldr	r3, [pc, #284]	; (80009cc <fsm_manual_run+0x2cc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
				durationYELLOW = YELLOW_sec * 1000;
 80008b2:	4b4d      	ldr	r3, [pc, #308]	; (80009e8 <fsm_manual_run+0x2e8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	4a43      	ldr	r2, [pc, #268]	; (80009cc <fsm_manual_run+0x2cc>)
 80008c0:	6013      	str	r3, [r2, #0]
				if(durationYELLOW >= durationRED) durationYELLOW = prevDurationYELLOW; // Check the logic
 80008c2:	4b42      	ldr	r3, [pc, #264]	; (80009cc <fsm_manual_run+0x2cc>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <fsm_manual_run+0x2c8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	db02      	blt.n	80008d4 <fsm_manual_run+0x1d4>
 80008ce:	4a3f      	ldr	r2, [pc, #252]	; (80009cc <fsm_manual_run+0x2cc>)
 80008d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d2:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fc4d 	bl	8001174 <isButtonPressed>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d118      	bne.n	8000912 <fsm_manual_run+0x212>
				setTimer(1, 10);
 80008e0:	210a      	movs	r1, #10
 80008e2:	2001      	movs	r0, #1
 80008e4:	f001 f8a8 	bl	8001a38 <setTimer>
				status = MOD_GREEN;
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <fsm_manual_run+0x2b8>)
 80008ea:	220d      	movs	r2, #13
 80008ec:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationGREEN / 1000;
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <fsm_manual_run+0x2ec>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <fsm_manual_run+0x2d0>)
 80008f4:	fb82 1203 	smull	r1, r2, r2, r3
 80008f8:	1192      	asrs	r2, r2, #6
 80008fa:	17db      	asrs	r3, r3, #31
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	4a31      	ldr	r2, [pc, #196]	; (80009c4 <fsm_manual_run+0x2c4>)
 8000900:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 4;
 8000902:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <fsm_manual_run+0x2d4>)
 8000904:	2204      	movs	r2, #4
 8000906:	601a      	str	r2, [r3, #0]
				setTimer(5, 5000);
 8000908:	f241 3188 	movw	r1, #5000	; 0x1388
 800090c:	2005      	movs	r0, #5
 800090e:	f001 f893 	bl	8001a38 <setTimer>
			if(timerSecond == 1){
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <fsm_manual_run+0x2d8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	f040 80c4 	bne.w	8000aa4 <fsm_manual_run+0x3a4>
				setTimerSecond(1000);
 800091c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000920:	f001 f86e 	bl	8001a00 <setTimerSecond>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <fsm_manual_run+0x2c4>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	463b      	mov	r3, r7
 800092a:	492c      	ldr	r1, [pc, #176]	; (80009dc <fsm_manual_run+0x2dc>)
 800092c:	4618      	mov	r0, r3
 800092e:	f004 f855 	bl	80049dc <siprintf>
 8000932:	4603      	mov	r3, r0
 8000934:	b29a      	uxth	r2, r3
 8000936:	4639      	mov	r1, r7
 8000938:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800093c:	4828      	ldr	r0, [pc, #160]	; (80009e0 <fsm_manual_run+0x2e0>)
 800093e:	f003 fa47 	bl	8003dd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <fsm_manual_run+0x2d4>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	463b      	mov	r3, r7
 8000948:	4926      	ldr	r1, [pc, #152]	; (80009e4 <fsm_manual_run+0x2e4>)
 800094a:	4618      	mov	r0, r3
 800094c:	f004 f846 	bl	80049dc <siprintf>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	4639      	mov	r1, r7
 8000956:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800095a:	4821      	ldr	r0, [pc, #132]	; (80009e0 <fsm_manual_run+0x2e0>)
 800095c:	f003 fa38 	bl	8003dd0 <HAL_UART_Transmit>
			break;
 8000960:	e0a0      	b.n	8000aa4 <fsm_manual_run+0x3a4>
			if(timerFlag[1] == 1){
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <fsm_manual_run+0x2bc>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10b      	bne.n	8000982 <fsm_manual_run+0x282>
				setTimer(1, 250); // blink every 0.25s
 800096a:	21fa      	movs	r1, #250	; 0xfa
 800096c:	2001      	movs	r0, #1
 800096e:	f001 f863 	bl	8001a38 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_GREEN);
 8000972:	2103      	movs	r1, #3
 8000974:	2007      	movs	r0, #7
 8000976:	f000 fa09 	bl	8000d8c <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_GREEN);
 800097a:	2103      	movs	r1, #3
 800097c:	2008      	movs	r0, #8
 800097e:	f000 fa05 	bl	8000d8c <blinkLEDs>
			if(isButtonPressed(2) == 1){
 8000982:	2002      	movs	r0, #2
 8000984:	f000 fbf6 	bl	8001174 <isButtonPressed>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d137      	bne.n	80009fe <fsm_manual_run+0x2fe>
				setTimer(5, 5000);
 800098e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000992:	2005      	movs	r0, #5
 8000994:	f001 f850 	bl	8001a38 <setTimer>
				GREEN_sec++;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <fsm_manual_run+0x2f0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <fsm_manual_run+0x2f0>)
 80009a0:	6013      	str	r3, [r2, #0]
				if(GREEN_sec >= 100){
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <fsm_manual_run+0x2f0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b63      	cmp	r3, #99	; 0x63
 80009a8:	dd24      	ble.n	80009f4 <fsm_manual_run+0x2f4>
					GREEN_sec = 1;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <fsm_manual_run+0x2f0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <fsm_manual_run+0x2c4>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	e022      	b.n	80009fe <fsm_manual_run+0x2fe>
 80009b8:	20000018 	.word	0x20000018
 80009bc:	200001f4 	.word	0x200001f4
 80009c0:	20000238 	.word	0x20000238
 80009c4:	200000d8 	.word	0x200000d8
 80009c8:	2000001c 	.word	0x2000001c
 80009cc:	20000020 	.word	0x20000020
 80009d0:	10624dd3 	.word	0x10624dd3
 80009d4:	200000dc 	.word	0x200000dc
 80009d8:	200001ec 	.word	0x200001ec
 80009dc:	0800528c 	.word	0x0800528c
 80009e0:	200002cc 	.word	0x200002cc
 80009e4:	0800529c 	.word	0x0800529c
 80009e8:	20000234 	.word	0x20000234
 80009ec:	20000024 	.word	0x20000024
 80009f0:	20000230 	.word	0x20000230
				else timerTraffic1++;
 80009f4:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <fsm_manual_run+0x3d8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <fsm_manual_run+0x3d8>)
 80009fc:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 80009fe:	2003      	movs	r0, #3
 8000a00:	f000 fbb8 	bl	8001174 <isButtonPressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d119      	bne.n	8000a3e <fsm_manual_run+0x33e>
				setTimer(5, 5000);
 8000a0a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a0e:	2005      	movs	r0, #5
 8000a10:	f001 f812 	bl	8001a38 <setTimer>
				durationGREEN = GREEN_sec * 1000;
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <fsm_manual_run+0x3dc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a1c:	fb02 f303 	mul.w	r3, r2, r3
 8000a20:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <fsm_manual_run+0x3e0>)
 8000a22:	6013      	str	r3, [r2, #0]
				if(durationGREEN < durationRED) durationYELLOW = durationRED - durationGREEN;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <fsm_manual_run+0x3e0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <fsm_manual_run+0x3e4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	da06      	bge.n	8000a3e <fsm_manual_run+0x33e>
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <fsm_manual_run+0x3e4>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <fsm_manual_run+0x3e0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <fsm_manual_run+0x3e8>)
 8000a3c:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1) returnAutomatic();
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f000 fb98 	bl	8001174 <isButtonPressed>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d101      	bne.n	8000a4e <fsm_manual_run+0x34e>
 8000a4a:	f7ff fe1f 	bl	800068c <returnAutomatic>
			if(timerSecond == 1){
 8000a4e:	4b27      	ldr	r3, [pc, #156]	; (8000aec <fsm_manual_run+0x3ec>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d128      	bne.n	8000aa8 <fsm_manual_run+0x3a8>
				setTimerSecond(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f000 ffd1 	bl	8001a00 <setTimerSecond>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",timerTraffic1), 500);
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <fsm_manual_run+0x3d8>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	463b      	mov	r3, r7
 8000a64:	4922      	ldr	r1, [pc, #136]	; (8000af0 <fsm_manual_run+0x3f0>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 ffb8 	bl	80049dc <siprintf>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4639      	mov	r1, r7
 8000a72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a76:	481f      	ldr	r0, [pc, #124]	; (8000af4 <fsm_manual_run+0x3f4>)
 8000a78:	f003 f9aa 	bl	8003dd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",timerTraffic2), 500);
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <fsm_manual_run+0x3f8>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	463b      	mov	r3, r7
 8000a82:	491e      	ldr	r1, [pc, #120]	; (8000afc <fsm_manual_run+0x3fc>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 ffa9 	bl	80049dc <siprintf>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4639      	mov	r1, r7
 8000a90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a94:	4817      	ldr	r0, [pc, #92]	; (8000af4 <fsm_manual_run+0x3f4>)
 8000a96:	f003 f99b 	bl	8003dd0 <HAL_UART_Transmit>
			break;
 8000a9a:	e005      	b.n	8000aa8 <fsm_manual_run+0x3a8>
			break;
 8000a9c:	bf00      	nop
 8000a9e:	e004      	b.n	8000aaa <fsm_manual_run+0x3aa>
			break;
 8000aa0:	bf00      	nop
 8000aa2:	e002      	b.n	8000aaa <fsm_manual_run+0x3aa>
			break;
 8000aa4:	bf00      	nop
 8000aa6:	e000      	b.n	8000aaa <fsm_manual_run+0x3aa>
			break;
 8000aa8:	bf00      	nop
	}
	// Check time out
	if(status == MOD_RED || status == MOD_YELLOW || status == MOD_GREEN){
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <fsm_manual_run+0x400>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b0b      	cmp	r3, #11
 8000ab0:	d007      	beq.n	8000ac2 <fsm_manual_run+0x3c2>
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <fsm_manual_run+0x400>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b0c      	cmp	r3, #12
 8000ab8:	d003      	beq.n	8000ac2 <fsm_manual_run+0x3c2>
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <fsm_manual_run+0x400>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b0d      	cmp	r3, #13
 8000ac0:	d105      	bne.n	8000ace <fsm_manual_run+0x3ce>
		// Go back to automatic...
		if(timerFlag[5] == 1) returnAutomatic();
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <fsm_manual_run+0x404>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d101      	bne.n	8000ace <fsm_manual_run+0x3ce>
 8000aca:	f7ff fddf 	bl	800068c <returnAutomatic>
	}
}
 8000ace:	bf00      	nop
 8000ad0:	3738      	adds	r7, #56	; 0x38
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000d8 	.word	0x200000d8
 8000adc:	20000230 	.word	0x20000230
 8000ae0:	20000024 	.word	0x20000024
 8000ae4:	2000001c 	.word	0x2000001c
 8000ae8:	20000020 	.word	0x20000020
 8000aec:	200001ec 	.word	0x200001ec
 8000af0:	0800528c 	.word	0x0800528c
 8000af4:	200002cc 	.word	0x200002cc
 8000af8:	200000dc 	.word	0x200000dc
 8000afc:	0800529c 	.word	0x0800529c
 8000b00:	20000018 	.word	0x20000018
 8000b04:	200001f4 	.word	0x200001f4

08000b08 <buzzerProcess>:
int pedestrianStatus = INIT;
int speed[5] = {400, 300, 200, 100, 50};
int indexForSpeed = 0;

// Function to handle the buzzer process
void buzzerProcess(int value) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    buzzer_value = value;
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <buzzerProcess+0x1c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
    buzzer();
 8000b16:	f001 f98b 	bl	8001e30 <buzzer>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000e0 	.word	0x200000e0

08000b28 <fsm_pedestrian_run>:

void fsm_pedestrian_run() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    int needMore = 5 - (durationYELLOW / 1000);
 8000b2e:	4b8e      	ldr	r3, [pc, #568]	; (8000d68 <fsm_pedestrian_run+0x240>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a8e      	ldr	r2, [pc, #568]	; (8000d6c <fsm_pedestrian_run+0x244>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1192      	asrs	r2, r2, #6
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	3305      	adds	r3, #5
 8000b40:	607b      	str	r3, [r7, #4]
    switch (pedestrianStatus) {
 8000b42:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <fsm_pedestrian_run+0x248>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d039      	beq.n	8000bbe <fsm_pedestrian_run+0x96>
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	f300 8100 	bgt.w	8000d50 <fsm_pedestrian_run+0x228>
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d003      	beq.n	8000b5c <fsm_pedestrian_run+0x34>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	f000 80d6 	beq.w	8000d06 <fsm_pedestrian_run+0x1de>
                pedestrianStatus = AUTO_GREEN;
            }
            break;

        default:
            break;
 8000b5a:	e0f9      	b.n	8000d50 <fsm_pedestrian_run+0x228>
            buzzerProcess(0);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ffd3 	bl	8000b08 <buzzerProcess>
            indexForSpeed = 0;
 8000b62:	4b84      	ldr	r3, [pc, #528]	; (8000d74 <fsm_pedestrian_run+0x24c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
            setTimer(3, 10);
 8000b68:	210a      	movs	r1, #10
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f000 ff64 	bl	8001a38 <setTimer>
            setTimer(4, 10);
 8000b70:	210a      	movs	r1, #10
 8000b72:	2004      	movs	r0, #4
 8000b74:	f000 ff60 	bl	8001a38 <setTimer>
            Pedestrian_setColor(OFF_LED);
 8000b78:	2005      	movs	r0, #5
 8000b7a:	f000 fa2d 	bl	8000fd8 <Pedestrian_setColor>
            if (pedestrianFlag == 1) {
 8000b7e:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <fsm_pedestrian_run+0x250>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	f040 80e6 	bne.w	8000d54 <fsm_pedestrian_run+0x22c>
                if (status == RED_GREEN || status == RED_YELLOW) {
 8000b88:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b15      	cmp	r3, #21
 8000b8e:	d003      	beq.n	8000b98 <fsm_pedestrian_run+0x70>
 8000b90:	4b7a      	ldr	r3, [pc, #488]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b16      	cmp	r3, #22
 8000b96:	d103      	bne.n	8000ba0 <fsm_pedestrian_run+0x78>
                    pedestrianStatus = AUTO_GREEN;
 8000b98:	4b75      	ldr	r3, [pc, #468]	; (8000d70 <fsm_pedestrian_run+0x248>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e00a      	b.n	8000bb6 <fsm_pedestrian_run+0x8e>
                } else if (status == YELLOW_RED || status == GREEN_RED) {
 8000ba0:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b18      	cmp	r3, #24
 8000ba6:	d003      	beq.n	8000bb0 <fsm_pedestrian_run+0x88>
 8000ba8:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b17      	cmp	r3, #23
 8000bae:	d102      	bne.n	8000bb6 <fsm_pedestrian_run+0x8e>
                    pedestrianStatus = AUTO_RED;
 8000bb0:	4b6f      	ldr	r3, [pc, #444]	; (8000d70 <fsm_pedestrian_run+0x248>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	601a      	str	r2, [r3, #0]
                pedestrianFlag = 0; // Make sure to restart the flag
 8000bb6:	4b70      	ldr	r3, [pc, #448]	; (8000d78 <fsm_pedestrian_run+0x250>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
            break;
 8000bbc:	e0ca      	b.n	8000d54 <fsm_pedestrian_run+0x22c>
            Pedestrian_setColor(AUTO_GREEN);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 fa0a 	bl	8000fd8 <Pedestrian_setColor>
            if (timerFlag[2] == 1) pedestrianStatus = INIT;
 8000bc4:	4b6e      	ldr	r3, [pc, #440]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d103      	bne.n	8000bd4 <fsm_pedestrian_run+0xac>
 8000bcc:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <fsm_pedestrian_run+0x248>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e00a      	b.n	8000bea <fsm_pedestrian_run+0xc2>
            else if (status == YELLOW_RED || status == GREEN_RED) pedestrianStatus = AUTO_RED;
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b18      	cmp	r3, #24
 8000bda:	d003      	beq.n	8000be4 <fsm_pedestrian_run+0xbc>
 8000bdc:	4b67      	ldr	r3, [pc, #412]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b17      	cmp	r3, #23
 8000be2:	d102      	bne.n	8000bea <fsm_pedestrian_run+0xc2>
 8000be4:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <fsm_pedestrian_run+0x248>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	601a      	str	r2, [r3, #0]
            if (durationYELLOW < 5000) {
 8000bea:	4b5f      	ldr	r3, [pc, #380]	; (8000d68 <fsm_pedestrian_run+0x240>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	dc55      	bgt.n	8000ca2 <fsm_pedestrian_run+0x17a>
                if (status == RED_GREEN && timerTraffic2 <= needMore) {
 8000bf6:	4b61      	ldr	r3, [pc, #388]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b15      	cmp	r3, #21
 8000bfc:	d12a      	bne.n	8000c54 <fsm_pedestrian_run+0x12c>
 8000bfe:	4b61      	ldr	r3, [pc, #388]	; (8000d84 <fsm_pedestrian_run+0x25c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	db25      	blt.n	8000c54 <fsm_pedestrian_run+0x12c>
                    indexForSpeed = needMore - timerTraffic2;
 8000c08:	4b5e      	ldr	r3, [pc, #376]	; (8000d84 <fsm_pedestrian_run+0x25c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	4a58      	ldr	r2, [pc, #352]	; (8000d74 <fsm_pedestrian_run+0x24c>)
 8000c12:	6013      	str	r3, [r2, #0]
                    if (timerFlag[3] == 1) {
 8000c14:	4b5a      	ldr	r3, [pc, #360]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d113      	bne.n	8000c44 <fsm_pedestrian_run+0x11c>
                        buzzerProcess(512 * (1 + indexForSpeed));
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <fsm_pedestrian_run+0x24c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff6f 	bl	8000b08 <buzzerProcess>
                        setTimer(3, speed[indexForSpeed]); // Set the speed through array
 8000c2a:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <fsm_pedestrian_run+0x24c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a56      	ldr	r2, [pc, #344]	; (8000d88 <fsm_pedestrian_run+0x260>)
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	4619      	mov	r1, r3
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 fefe 	bl	8001a38 <setTimer>
                        setTimer(4, 20); // Set delay for turn off buzzer
 8000c3c:	2114      	movs	r1, #20
 8000c3e:	2004      	movs	r0, #4
 8000c40:	f000 fefa 	bl	8001a38 <setTimer>
                    if (timerFlag[4]==1){
 8000c44:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d15b      	bne.n	8000d04 <fsm_pedestrian_run+0x1dc>
                    	buzzerProcess(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff ff5b 	bl	8000b08 <buzzerProcess>
                    if (timerFlag[4]==1){
 8000c52:	e057      	b.n	8000d04 <fsm_pedestrian_run+0x1dc>
                } else if (status == RED_YELLOW) {
 8000c54:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b16      	cmp	r3, #22
 8000c5a:	d17d      	bne.n	8000d58 <fsm_pedestrian_run+0x230>
                    if (timerFlag[3] == 1) {
 8000c5c:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d116      	bne.n	8000c92 <fsm_pedestrian_run+0x16a>
                        buzzerProcess(512 * (5 - timerTraffic2 + 1));
 8000c64:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <fsm_pedestrian_run+0x25c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f1c3 0306 	rsb	r3, r3, #6
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff4a 	bl	8000b08 <buzzerProcess>
                        setTimer(3, speed[5 - timerTraffic2]);
 8000c74:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <fsm_pedestrian_run+0x25c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1c3 0305 	rsb	r3, r3, #5
 8000c7c:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <fsm_pedestrian_run+0x260>)
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	4619      	mov	r1, r3
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 fed7 	bl	8001a38 <setTimer>
                        setTimer(4, 20);
 8000c8a:	2114      	movs	r1, #20
 8000c8c:	2004      	movs	r0, #4
 8000c8e:	f000 fed3 	bl	8001a38 <setTimer>
                    if (timerFlag[4] == 1) {
 8000c92:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d15e      	bne.n	8000d58 <fsm_pedestrian_run+0x230>
                        buzzerProcess(0);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff ff34 	bl	8000b08 <buzzerProcess>
            break;
 8000ca0:	e05a      	b.n	8000d58 <fsm_pedestrian_run+0x230>
            } else if (durationYELLOW >= 5000 && status == RED_YELLOW && timerTraffic2 <= 5) {
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <fsm_pedestrian_run+0x240>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f241 3287 	movw	r2, #4999	; 0x1387
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dd54      	ble.n	8000d58 <fsm_pedestrian_run+0x230>
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b16      	cmp	r3, #22
 8000cb4:	d150      	bne.n	8000d58 <fsm_pedestrian_run+0x230>
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <fsm_pedestrian_run+0x25c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	dc4c      	bgt.n	8000d58 <fsm_pedestrian_run+0x230>
                if (timerFlag[3] == 1) {
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d116      	bne.n	8000cf4 <fsm_pedestrian_run+0x1cc>
                    buzzerProcess(512 * (5 - timerTraffic2 + 1));
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <fsm_pedestrian_run+0x25c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f1c3 0306 	rsb	r3, r3, #6
 8000cce:	025b      	lsls	r3, r3, #9
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff19 	bl	8000b08 <buzzerProcess>
                    setTimer(3, speed[5 - timerTraffic2]);
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <fsm_pedestrian_run+0x25c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f1c3 0305 	rsb	r3, r3, #5
 8000cde:	4a2a      	ldr	r2, [pc, #168]	; (8000d88 <fsm_pedestrian_run+0x260>)
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 fea6 	bl	8001a38 <setTimer>
                    setTimer(4, 20);
 8000cec:	2114      	movs	r1, #20
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f000 fea2 	bl	8001a38 <setTimer>
                if (timerFlag[4] == 1) {
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d12d      	bne.n	8000d58 <fsm_pedestrian_run+0x230>
                    buzzerProcess(0);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff ff03 	bl	8000b08 <buzzerProcess>
            break;
 8000d02:	e029      	b.n	8000d58 <fsm_pedestrian_run+0x230>
 8000d04:	e028      	b.n	8000d58 <fsm_pedestrian_run+0x230>
            buzzerProcess(0);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fefe 	bl	8000b08 <buzzerProcess>
            indexForSpeed = 0;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <fsm_pedestrian_run+0x24c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
            setTimer(3, 10);
 8000d12:	210a      	movs	r1, #10
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 fe8f 	bl	8001a38 <setTimer>
            setTimer(4, 10);
 8000d1a:	210a      	movs	r1, #10
 8000d1c:	2004      	movs	r0, #4
 8000d1e:	f000 fe8b 	bl	8001a38 <setTimer>
            Pedestrian_setColor(AUTO_RED);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f000 f958 	bl	8000fd8 <Pedestrian_setColor>
            if (timerFlag[2] == 1) {
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <fsm_pedestrian_run+0x258>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d103      	bne.n	8000d38 <fsm_pedestrian_run+0x210>
                pedestrianStatus = INIT;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <fsm_pedestrian_run+0x248>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
            break;
 8000d36:	e011      	b.n	8000d5c <fsm_pedestrian_run+0x234>
            } else if (status == RED_GREEN || status == RED_YELLOW) {
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b15      	cmp	r3, #21
 8000d3e:	d003      	beq.n	8000d48 <fsm_pedestrian_run+0x220>
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <fsm_pedestrian_run+0x254>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b16      	cmp	r3, #22
 8000d46:	d109      	bne.n	8000d5c <fsm_pedestrian_run+0x234>
                pedestrianStatus = AUTO_GREEN;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <fsm_pedestrian_run+0x248>)
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	601a      	str	r2, [r3, #0]
            break;
 8000d4e:	e005      	b.n	8000d5c <fsm_pedestrian_run+0x234>
            break;
 8000d50:	bf00      	nop
 8000d52:	e004      	b.n	8000d5e <fsm_pedestrian_run+0x236>
            break;
 8000d54:	bf00      	nop
 8000d56:	e002      	b.n	8000d5e <fsm_pedestrian_run+0x236>
            break;
 8000d58:	bf00      	nop
 8000d5a:	e000      	b.n	8000d5e <fsm_pedestrian_run+0x236>
            break;
 8000d5c:	bf00      	nop
    }
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000020 	.word	0x20000020
 8000d6c:	10624dd3 	.word	0x10624dd3
 8000d70:	20000000 	.word	0x20000000
 8000d74:	200000d4 	.word	0x200000d4
 8000d78:	200000d0 	.word	0x200000d0
 8000d7c:	20000018 	.word	0x20000018
 8000d80:	200001f4 	.word	0x200001f4
 8000d84:	200000dc 	.word	0x200000dc
 8000d88:	20000004 	.word	0x20000004

08000d8c <blinkLEDs>:
 */
#include "handle_leds.h"
int blinkFlag1 = 0;
int blinkFlag2 = 0;

void blinkLEDs(int traffic, int color){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	// set flag for blinking
	if(traffic == TRAFFIC_1){
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	d13c      	bne.n	8000e16 <blinkLEDs+0x8a>
		blinkFlag1 = 1 - blinkFlag1;
 8000d9c:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <blinkLEDs+0x11c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1c3 0301 	rsb	r3, r3, #1
 8000da4:	4a40      	ldr	r2, [pc, #256]	; (8000ea8 <blinkLEDs+0x11c>)
 8000da6:	6013      	str	r3, [r2, #0]
		switch(color){
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d017      	beq.n	8000dde <blinkLEDs+0x52>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	dc70      	bgt.n	8000e96 <blinkLEDs+0x10a>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d003      	beq.n	8000dc2 <blinkLEDs+0x36>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d01c      	beq.n	8000dfa <blinkLEDs+0x6e>
			case AUTO_GREEN:
				if(blinkFlag1) Traffic_setColor(1, AUTO_GREEN);
				else Traffic_setColor(1, OFF_LED);
				break;
			default:
				break;
 8000dc0:	e069      	b.n	8000e96 <blinkLEDs+0x10a>
				if(blinkFlag1) Traffic_setColor(1, AUTO_RED);
 8000dc2:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <blinkLEDs+0x11c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <blinkLEDs+0x48>
 8000dca:	2102      	movs	r1, #2
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 f86f 	bl	8000eb0 <Traffic_setColor>
				break;
 8000dd2:	e065      	b.n	8000ea0 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 f86a 	bl	8000eb0 <Traffic_setColor>
				break;
 8000ddc:	e060      	b.n	8000ea0 <blinkLEDs+0x114>
				if(blinkFlag1) Traffic_setColor(1, AUTO_YELLOW);
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <blinkLEDs+0x11c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <blinkLEDs+0x64>
 8000de6:	2104      	movs	r1, #4
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 f861 	bl	8000eb0 <Traffic_setColor>
				break;
 8000dee:	e057      	b.n	8000ea0 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 8000df0:	2105      	movs	r1, #5
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 f85c 	bl	8000eb0 <Traffic_setColor>
				break;
 8000df8:	e052      	b.n	8000ea0 <blinkLEDs+0x114>
				if(blinkFlag1) Traffic_setColor(1, AUTO_GREEN);
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <blinkLEDs+0x11c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d004      	beq.n	8000e0c <blinkLEDs+0x80>
 8000e02:	2103      	movs	r1, #3
 8000e04:	2001      	movs	r0, #1
 8000e06:	f000 f853 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e0a:	e049      	b.n	8000ea0 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 f84e 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e14:	e044      	b.n	8000ea0 <blinkLEDs+0x114>
		}
	}

	else if(traffic == TRAFFIC_2){
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d13e      	bne.n	8000e9a <blinkLEDs+0x10e>
		blinkFlag2 = 1 - blinkFlag2;
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <blinkLEDs+0x120>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1c3 0301 	rsb	r3, r3, #1
 8000e24:	4a21      	ldr	r2, [pc, #132]	; (8000eac <blinkLEDs+0x120>)
 8000e26:	6013      	str	r3, [r2, #0]
		switch(color){
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d017      	beq.n	8000e5e <blinkLEDs+0xd2>
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	dc34      	bgt.n	8000e9e <blinkLEDs+0x112>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d003      	beq.n	8000e42 <blinkLEDs+0xb6>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d01c      	beq.n	8000e7a <blinkLEDs+0xee>
			case AUTO_GREEN:
				if(blinkFlag2) Traffic_setColor(2, AUTO_GREEN);
				else Traffic_setColor(2, OFF_LED);
				break;
			default:
				break;
 8000e40:	e02d      	b.n	8000e9e <blinkLEDs+0x112>
				if(blinkFlag2) Traffic_setColor(2, AUTO_RED);
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <blinkLEDs+0x120>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <blinkLEDs+0xc8>
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 f82f 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e52:	e025      	b.n	8000ea0 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000e54:	2105      	movs	r1, #5
 8000e56:	2002      	movs	r0, #2
 8000e58:	f000 f82a 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e5c:	e020      	b.n	8000ea0 <blinkLEDs+0x114>
				if(blinkFlag2) Traffic_setColor(2, AUTO_YELLOW);
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <blinkLEDs+0x120>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <blinkLEDs+0xe4>
 8000e66:	2104      	movs	r1, #4
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f000 f821 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e6e:	e017      	b.n	8000ea0 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000e70:	2105      	movs	r1, #5
 8000e72:	2002      	movs	r0, #2
 8000e74:	f000 f81c 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e78:	e012      	b.n	8000ea0 <blinkLEDs+0x114>
				if(blinkFlag2) Traffic_setColor(2, AUTO_GREEN);
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <blinkLEDs+0x120>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <blinkLEDs+0x100>
 8000e82:	2103      	movs	r1, #3
 8000e84:	2002      	movs	r0, #2
 8000e86:	f000 f813 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e8a:	e009      	b.n	8000ea0 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f000 f80e 	bl	8000eb0 <Traffic_setColor>
				break;
 8000e94:	e004      	b.n	8000ea0 <blinkLEDs+0x114>
				break;
 8000e96:	bf00      	nop
 8000e98:	e002      	b.n	8000ea0 <blinkLEDs+0x114>
		}
	}
 8000e9a:	bf00      	nop
 8000e9c:	e000      	b.n	8000ea0 <blinkLEDs+0x114>
				break;
 8000e9e:	bf00      	nop
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200000e4 	.word	0x200000e4
 8000eac:	200000e8 	.word	0x200000e8

08000eb0 <Traffic_setColor>:

void Traffic_setColor(int option, int color){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	if(option == 1){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d13f      	bne.n	8000f40 <Traffic_setColor+0x90>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d879      	bhi.n	8000fbc <Traffic_setColor+0x10c>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <Traffic_setColor+0x20>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000f11 	.word	0x08000f11
 8000ed8:	08000ef9 	.word	0x08000ef9
 8000edc:	08000f29 	.word	0x08000f29
		switch(color){
			case AUTO_RED:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee6:	483a      	ldr	r0, [pc, #232]	; (8000fd0 <Traffic_setColor+0x120>)
 8000ee8:	f001 fb95 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2108      	movs	r1, #8
 8000ef0:	4838      	ldr	r0, [pc, #224]	; (8000fd4 <Traffic_setColor+0x124>)
 8000ef2:	f001 fb90 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000ef6:	e066      	b.n	8000fc6 <Traffic_setColor+0x116>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ef8:	2210      	movs	r2, #16
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	4834      	ldr	r0, [pc, #208]	; (8000fd0 <Traffic_setColor+0x120>)
 8000f00:	f001 fb89 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000f04:	2210      	movs	r2, #16
 8000f06:	2108      	movs	r1, #8
 8000f08:	4832      	ldr	r0, [pc, #200]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f0a:	f001 fb84 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000f0e:	e05a      	b.n	8000fc6 <Traffic_setColor+0x116>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f16:	482e      	ldr	r0, [pc, #184]	; (8000fd0 <Traffic_setColor+0x120>)
 8000f18:	f001 fb7d 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	2108      	movs	r1, #8
 8000f20:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f22:	f001 fb78 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000f26:	e04e      	b.n	8000fc6 <Traffic_setColor+0x116>
			case OFF_LED:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2e:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <Traffic_setColor+0x120>)
 8000f30:	f001 fb71 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2108      	movs	r1, #8
 8000f38:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f3a:	f001 fb6c 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000f3e:	e042      	b.n	8000fc6 <Traffic_setColor+0x116>
			default:
				break;
		}
	}
	else if(option == 2){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d13c      	bne.n	8000fc0 <Traffic_setColor+0x110>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d83a      	bhi.n	8000fc4 <Traffic_setColor+0x114>
 8000f4e:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <Traffic_setColor+0xa4>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f91 	.word	0x08000f91
 8000f5c:	08000f7b 	.word	0x08000f7b
 8000f60:	08000fa7 	.word	0x08000fa7
		switch(color){
			case AUTO_RED:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000f64:	2210      	movs	r2, #16
 8000f66:	2120      	movs	r1, #32
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f6a:	f001 fb54 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f74:	f001 fb4f 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000f78:	e025      	b.n	8000fc6 <Traffic_setColor+0x116>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f80:	f001 fb49 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000f84:	2210      	movs	r2, #16
 8000f86:	2110      	movs	r1, #16
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f8a:	f001 fb44 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000f8e:	e01a      	b.n	8000fc6 <Traffic_setColor+0x116>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2120      	movs	r1, #32
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <Traffic_setColor+0x124>)
 8000f96:	f001 fb3e 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <Traffic_setColor+0x124>)
 8000fa0:	f001 fb39 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000fa4:	e00f      	b.n	8000fc6 <Traffic_setColor+0x116>
			case OFF_LED:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2120      	movs	r1, #32
 8000faa:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <Traffic_setColor+0x124>)
 8000fac:	f001 fb33 	bl	8002616 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <Traffic_setColor+0x124>)
 8000fb6:	f001 fb2e 	bl	8002616 <HAL_GPIO_WritePin>
				break;
 8000fba:	e004      	b.n	8000fc6 <Traffic_setColor+0x116>
				break;
 8000fbc:	bf00      	nop
 8000fbe:	e002      	b.n	8000fc6 <Traffic_setColor+0x116>
			default:
				break;
		}
	}
 8000fc0:	bf00      	nop
 8000fc2:	e000      	b.n	8000fc6 <Traffic_setColor+0x116>
				break;
 8000fc4:	bf00      	nop
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	40010c00 	.word	0x40010c00

08000fd8 <Pedestrian_setColor>:

void Pedestrian_setColor(int color){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if(color == AUTO_RED){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d10c      	bne.n	8001000 <Pedestrian_setColor+0x28>
		// RED LED
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fec:	4816      	ldr	r0, [pc, #88]	; (8001048 <Pedestrian_setColor+0x70>)
 8000fee:	f001 fb12 	bl	8002616 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <Pedestrian_setColor+0x74>)
 8000ffa:	f001 fb0c 	bl	8002616 <HAL_GPIO_WritePin>
	else if(color == OFF_LED){
		// OFF LED
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
	}
}
 8000ffe:	e01e      	b.n	800103e <Pedestrian_setColor+0x66>
	else if(color == AUTO_GREEN){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d10c      	bne.n	8001020 <Pedestrian_setColor+0x48>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100c:	480e      	ldr	r0, [pc, #56]	; (8001048 <Pedestrian_setColor+0x70>)
 800100e:	f001 fb02 	bl	8002616 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8001012:	2210      	movs	r2, #16
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <Pedestrian_setColor+0x74>)
 800101a:	f001 fafc 	bl	8002616 <HAL_GPIO_WritePin>
}
 800101e:	e00e      	b.n	800103e <Pedestrian_setColor+0x66>
	else if(color == OFF_LED){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d10b      	bne.n	800103e <Pedestrian_setColor+0x66>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <Pedestrian_setColor+0x70>)
 800102e:	f001 faf2 	bl	8002616 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <Pedestrian_setColor+0x74>)
 800103a:	f001 faec 	bl	8002616 <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40010c00 	.word	0x40010c00
 800104c:	40010800 	.word	0x40010800

08001050 <button_reading>:
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e073      	b.n	8001144 <button_reading+0xf4>
 800105c:	4a3d      	ldr	r2, [pc, #244]	; (8001154 <button_reading+0x104>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	7819      	ldrb	r1, [r3, #0]
 8001064:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <button_reading+0x108>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	4a3b      	ldr	r2, [pc, #236]	; (800115c <button_reading+0x10c>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	7819      	ldrb	r1, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	; (8001154 <button_reading+0x104>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	460a      	mov	r2, r1
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	4a37      	ldr	r2, [pc, #220]	; (8001160 <button_reading+0x110>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001088:	4936      	ldr	r1, [pc, #216]	; (8001164 <button_reading+0x114>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001090:	4619      	mov	r1, r3
 8001092:	4610      	mov	r0, r2
 8001094:	f001 faa8 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	4619      	mov	r1, r3
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <button_reading+0x10c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	460a      	mov	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	4a2c      	ldr	r2, [pc, #176]	; (8001158 <button_reading+0x108>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	4929      	ldr	r1, [pc, #164]	; (8001154 <button_reading+0x104>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	440b      	add	r3, r1
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d141      	bne.n	800113e <button_reading+0xee>
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <button_reading+0x104>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	4926      	ldr	r1, [pc, #152]	; (800115c <button_reading+0x10c>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	440b      	add	r3, r1
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d137      	bne.n	800113e <button_reading+0xee>
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <button_reading+0x10c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	4924      	ldr	r1, [pc, #144]	; (8001168 <button_reading+0x118>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	440b      	add	r3, r1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d019      	beq.n	8001116 <button_reading+0xc6>
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <button_reading+0x10c>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	7819      	ldrb	r1, [r3, #0]
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <button_reading+0x118>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <button_reading+0x118>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d11e      	bne.n	800113e <button_reading+0xee>
 8001100:	4a1a      	ldr	r2, [pc, #104]	; (800116c <button_reading+0x11c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2101      	movs	r1, #1
 8001106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <button_reading+0x120>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2164      	movs	r1, #100	; 0x64
 8001110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001114:	e013      	b.n	800113e <button_reading+0xee>
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <button_reading+0x120>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	4913      	ldr	r1, [pc, #76]	; (8001170 <button_reading+0x120>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <button_reading+0x120>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dc04      	bgt.n	800113e <button_reading+0xee>
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <button_reading+0x118>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3301      	adds	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b03      	cmp	r3, #3
 8001148:	dd88      	ble.n	800105c <button_reading+0xc>
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000f0 	.word	0x200000f0
 8001158:	200000f4 	.word	0x200000f4
 800115c:	200000ec 	.word	0x200000ec
 8001160:	20000034 	.word	0x20000034
 8001164:	2000002c 	.word	0x2000002c
 8001168:	20000028 	.word	0x20000028
 800116c:	200000f8 	.word	0x200000f8
 8001170:	20000108 	.word	0x20000108

08001174 <isButtonPressed>:
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b03      	cmp	r3, #3
 8001180:	dc02      	bgt.n	8001188 <isButtonPressed+0x14>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da01      	bge.n	800118c <isButtonPressed+0x18>
 8001188:	2300      	movs	r3, #0
 800118a:	e00d      	b.n	80011a8 <isButtonPressed+0x34>
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <isButtonPressed+0x40>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <isButtonPressed+0x32>
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <isButtonPressed+0x40>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2100      	movs	r1, #0
 800119e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <isButtonPressed+0x34>
 80011a6:	2300      	movs	r3, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200000f8 	.word	0x200000f8

080011b8 <setBackButtonFlag>:
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <setBackButtonFlag+0x1c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2101      	movs	r1, #1
 80011c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	200000f8 	.word	0x200000f8

080011d8 <main>:
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
 80011dc:	f000 fe5e 	bl	8001e9c <HAL_Init>
 80011e0:	f000 f85a 	bl	8001298 <SystemClock_Config>
 80011e4:	f000 f986 	bl	80014f4 <MX_GPIO_Init>
 80011e8:	f000 f898 	bl	800131c <MX_TIM2_Init>
 80011ec:	f000 f8e2 	bl	80013b4 <MX_TIM3_Init>
 80011f0:	f000 f956 	bl	80014a0 <MX_USART2_UART_Init>
 80011f4:	481f      	ldr	r0, [pc, #124]	; (8001274 <main+0x9c>)
 80011f6:	f001 fe85 	bl	8002f04 <HAL_TIM_Base_Start_IT>
 80011fa:	2100      	movs	r1, #0
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <main+0xa0>)
 80011fe:	f001 ff2b 	bl	8003058 <HAL_TIM_PWM_Start>
 8001202:	210a      	movs	r1, #10
 8001204:	2000      	movs	r0, #0
 8001206:	f000 fc17 	bl	8001a38 <setTimer>
 800120a:	210a      	movs	r1, #10
 800120c:	2001      	movs	r0, #1
 800120e:	f000 fc13 	bl	8001a38 <setTimer>
 8001212:	210a      	movs	r1, #10
 8001214:	2002      	movs	r0, #2
 8001216:	f000 fc0f 	bl	8001a38 <setTimer>
 800121a:	210a      	movs	r1, #10
 800121c:	2003      	movs	r0, #3
 800121e:	f000 fc0b 	bl	8001a38 <setTimer>
 8001222:	f000 f9e5 	bl	80015f0 <SCH_Init>
 8001226:	2201      	movs	r2, #1
 8001228:	2100      	movs	r1, #0
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <main+0xa4>)
 800122c:	f000 fa46 	bl	80016bc <SCH_Add_Task>
 8001230:	2201      	movs	r2, #1
 8001232:	2100      	movs	r1, #0
 8001234:	4812      	ldr	r0, [pc, #72]	; (8001280 <main+0xa8>)
 8001236:	f000 fa41 	bl	80016bc <SCH_Add_Task>
 800123a:	2201      	movs	r2, #1
 800123c:	2100      	movs	r1, #0
 800123e:	4811      	ldr	r0, [pc, #68]	; (8001284 <main+0xac>)
 8001240:	f000 fa3c 	bl	80016bc <SCH_Add_Task>
 8001244:	2201      	movs	r2, #1
 8001246:	2100      	movs	r1, #0
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <main+0xb0>)
 800124a:	f000 fa37 	bl	80016bc <SCH_Add_Task>
 800124e:	2201      	movs	r2, #1
 8001250:	2100      	movs	r1, #0
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <main+0xb4>)
 8001254:	f000 fa32 	bl	80016bc <SCH_Add_Task>
 8001258:	2201      	movs	r2, #1
 800125a:	2100      	movs	r1, #0
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <main+0xb8>)
 800125e:	f000 fa2d 	bl	80016bc <SCH_Add_Task>
 8001262:	2201      	movs	r2, #1
 8001264:	2100      	movs	r1, #0
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <main+0xbc>)
 8001268:	f000 fa28 	bl	80016bc <SCH_Add_Task>
 800126c:	f000 fb90 	bl	8001990 <SCH_Dispatch_Tasks>
 8001270:	e7fc      	b.n	800126c <main+0x94>
 8001272:	bf00      	nop
 8001274:	20000284 	.word	0x20000284
 8001278:	2000023c 	.word	0x2000023c
 800127c:	08001a79 	.word	0x08001a79
 8001280:	08001ad9 	.word	0x08001ad9
 8001284:	08001b0d 	.word	0x08001b0d
 8001288:	08001051 	.word	0x08001051
 800128c:	08000b29 	.word	0x08000b29
 8001290:	0800014d 	.word	0x0800014d
 8001294:	08000701 	.word	0x08000701

08001298 <SystemClock_Config>:
 8001298:	b580      	push	{r7, lr}
 800129a:	b090      	sub	sp, #64	; 0x40
 800129c:	af00      	add	r7, sp, #0
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	2228      	movs	r2, #40	; 0x28
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fb90 	bl	80049cc <memset>
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	2301      	movs	r3, #1
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c2:	2310      	movs	r3, #16
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c6:	2302      	movs	r3, #2
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
 80012ca:	2300      	movs	r3, #0
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80012ce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 f9b5 	bl	8002648 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x50>
 80012e4:	f000 f97e 	bl	80015e4 <Error_Handler>
 80012e8:	230f      	movs	r3, #15
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	2302      	movs	r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fc20 	bl	8002b48 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x7a>
 800130e:	f000 f969 	bl	80015e4 <Error_Handler>
 8001312:	bf00      	nop
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_TIM2_Init>:
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM2_Init+0x94>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001342:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM2_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001350:	2263      	movs	r2, #99	; 0x63
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001362:	f001 fd7f 	bl	8002e64 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x54>
 800136c:	f000 f93a 	bl	80015e4 <Error_Handler>
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_TIM2_Init+0x94>)
 800137e:	f002 f8d7 	bl	8003530 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x70>
 8001388:	f000 f92c 	bl	80015e4 <Error_Handler>
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM2_Init+0x94>)
 800139a:	f002 fc59 	bl	8003c50 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x8c>
 80013a4:	f000 f91e 	bl	80015e4 <Error_Handler>
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000284 	.word	0x20000284

080013b4 <MX_TIM3_Init>:
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	619a      	str	r2, [r3, #24]
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MX_TIM3_Init+0xe4>)
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <MX_TIM3_Init+0xe8>)
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <MX_TIM3_Init+0xe4>)
 80013ec:	223f      	movs	r2, #63	; 0x3f
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_TIM3_Init+0xe4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MX_TIM3_Init+0xe4>)
 80013f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <MX_TIM3_Init+0xe4>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MX_TIM3_Init+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
 800140a:	4823      	ldr	r0, [pc, #140]	; (8001498 <MX_TIM3_Init+0xe4>)
 800140c:	f001 fd2a 	bl	8002e64 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x66>
 8001416:	f000 f8e5 	bl	80015e4 <Error_Handler>
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001424:	4619      	mov	r1, r3
 8001426:	481c      	ldr	r0, [pc, #112]	; (8001498 <MX_TIM3_Init+0xe4>)
 8001428:	f002 f882 	bl	8003530 <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x82>
 8001432:	f000 f8d7 	bl	80015e4 <Error_Handler>
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <MX_TIM3_Init+0xe4>)
 8001438:	f001 fdb6 	bl	8002fa8 <HAL_TIM_PWM_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x92>
 8001442:	f000 f8cf 	bl	80015e4 <Error_Handler>
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4619      	mov	r1, r3
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <MX_TIM3_Init+0xe4>)
 8001456:	f002 fbfb 	bl	8003c50 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM3_Init+0xb0>
 8001460:	f000 f8c0 	bl	80015e4 <Error_Handler>
 8001464:	2360      	movs	r3, #96	; 0x60
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_TIM3_Init+0xe4>)
 800147c:	f001 ff96 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0xd6>
 8001486:	f000 f8ad 	bl	80015e4 <Error_Handler>
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_TIM3_Init+0xe4>)
 800148c:	f000 fbca 	bl	8001c24 <HAL_TIM_MspPostInit>
 8001490:	bf00      	nop
 8001492:	3738      	adds	r7, #56	; 0x38
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000023c 	.word	0x2000023c
 800149c:	40000400 	.word	0x40000400

080014a0 <MX_USART2_UART_Init>:
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MX_USART2_UART_Init+0x50>)
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014d8:	f002 fc2a 	bl	8003d30 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART2_UART_Init+0x46>
 80014e2:	f000 f87f 	bl	80015e4 <Error_Handler>
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002cc 	.word	0x200002cc
 80014f0:	40004400 	.word	0x40004400

080014f4 <MX_GPIO_Init>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_GPIO_Init+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <MX_GPIO_Init+0xd0>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <MX_GPIO_Init+0xd0>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800153e:	4822      	ldr	r0, [pc, #136]	; (80015c8 <MX_GPIO_Init+0xd4>)
 8001540:	f001 f869 	bl	8002616 <HAL_GPIO_WritePin>
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800154a:	4820      	ldr	r0, [pc, #128]	; (80015cc <MX_GPIO_Init+0xd8>)
 800154c:	f001 f863 	bl	8002616 <HAL_GPIO_WritePin>
 8001550:	2313      	movs	r3, #19
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	2301      	movs	r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	4619      	mov	r1, r3
 8001562:	481a      	ldr	r0, [pc, #104]	; (80015cc <MX_GPIO_Init+0xd8>)
 8001564:	f000 febc 	bl	80022e0 <HAL_GPIO_Init>
 8001568:	2301      	movs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4619      	mov	r1, r3
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_GPIO_Init+0xd4>)
 800157c:	f000 feb0 	bl	80022e0 <HAL_GPIO_Init>
 8001580:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	2301      	movs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	2302      	movs	r3, #2
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4619      	mov	r1, r3
 8001598:	480b      	ldr	r0, [pc, #44]	; (80015c8 <MX_GPIO_Init+0xd4>)
 800159a:	f000 fea1 	bl	80022e0 <HAL_GPIO_Init>
 800159e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	2301      	movs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	2302      	movs	r3, #2
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_GPIO_Init+0xd8>)
 80015b8:	f000 fe92 	bl	80022e0 <HAL_GPIO_Init>
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010c00 	.word	0x40010c00
 80015cc:	40010800 	.word	0x40010800

080015d0 <HAL_TIM_PeriodElapsedCallback>:
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	f000 f850 	bl	800167c <SCH_Update>
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <Error_Handler>:
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	b672      	cpsid	i
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <SCH_Init>:
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e034      	b.n	8001666 <SCH_Init+0x76>
 80015fc:	491e      	ldr	r1, [pc, #120]	; (8001678 <SCH_Init+0x88>)
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	491a      	ldr	r1, [pc, #104]	; (8001678 <SCH_Init+0x88>)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	3304      	adds	r3, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	4915      	ldr	r1, [pc, #84]	; (8001678 <SCH_Init+0x88>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3308      	adds	r3, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	4910      	ldr	r1, [pc, #64]	; (8001678 <SCH_Init+0x88>)
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	330c      	adds	r3, #12
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	490b      	ldr	r1, [pc, #44]	; (8001678 <SCH_Init+0x88>)
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3310      	adds	r3, #16
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b09      	cmp	r3, #9
 800166a:	ddc7      	ble.n	80015fc <SCH_Init+0xc>
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000118 	.word	0x20000118

0800167c <SCH_Update>:
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <SCH_Update+0x3c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <SCH_Update+0x34>
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <SCH_Update+0x3c>)
 800168a:	7b1b      	ldrb	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10f      	bne.n	80016b0 <SCH_Update+0x34>
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <SCH_Update+0x3c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <SCH_Update+0x26>
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <SCH_Update+0x3c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <SCH_Update+0x3c>)
 80016a0:	6053      	str	r3, [r2, #4]
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SCH_Update+0x3c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <SCH_Update+0x34>
 80016aa:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <SCH_Update+0x3c>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	731a      	strb	r2, [r3, #12]
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000118 	.word	0x20000118

080016bc <SCH_Add_Task>:
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	b093      	sub	sp, #76	; 0x4c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80016ce:	2300      	movs	r3, #0
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80016dc:	e0d5      	b.n	800188a <SCH_Add_Task+0x1ce>
 80016de:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80016e2:	496e      	ldr	r1, [pc, #440]	; (800189c <SCH_Add_Task+0x1e0>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016f4:	4413      	add	r3, r2
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
 80016f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d979      	bls.n	80017f4 <SCH_Add_Task+0x138>
 8001700:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001704:	4965      	ldr	r1, [pc, #404]	; (800189c <SCH_Add_Task+0x1e0>)
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3304      	adds	r3, #4
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	4413      	add	r3, r2
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
 800171e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1ac9      	subs	r1, r1, r3
 8001728:	485c      	ldr	r0, [pc, #368]	; (800189c <SCH_Add_Task+0x1e0>)
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4403      	add	r3, r0
 8001734:	3304      	adds	r3, #4
 8001736:	6019      	str	r1, [r3, #0]
 8001738:	2309      	movs	r3, #9
 800173a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800173e:	e01b      	b.n	8001778 <SCH_Add_Task+0xbc>
 8001740:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800174a:	4854      	ldr	r0, [pc, #336]	; (800189c <SCH_Add_Task+0x1e0>)
 800174c:	460b      	mov	r3, r1
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4418      	add	r0, r3
 8001756:	4951      	ldr	r1, [pc, #324]	; (800189c <SCH_Add_Task+0x1e0>)
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	4604      	mov	r4, r0
 8001764:	461d      	mov	r5, r3
 8001766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	6023      	str	r3, [r4, #0]
 800176e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001772:	3b01      	subs	r3, #1
 8001774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001778:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800177c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001780:	429a      	cmp	r2, r3
 8001782:	d8dd      	bhi.n	8001740 <SCH_Add_Task+0x84>
 8001784:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461d      	mov	r5, r3
 8001796:	f000 f923 	bl	80019e0 <Get_New_Task_ID>
 800179a:	4601      	mov	r1, r0
 800179c:	4a3f      	ldr	r2, [pc, #252]	; (800189c <SCH_Add_Task+0x1e0>)
 800179e:	4623      	mov	r3, r4
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4423      	add	r3, r4
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	4a3b      	ldr	r2, [pc, #236]	; (800189c <SCH_Add_Task+0x1e0>)
 80017ae:	4623      	mov	r3, r4
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4423      	add	r3, r4
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3304      	adds	r3, #4
 80017ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	4a37      	ldr	r2, [pc, #220]	; (800189c <SCH_Add_Task+0x1e0>)
 80017c0:	4623      	mov	r3, r4
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4423      	add	r3, r4
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3308      	adds	r3, #8
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	4a32      	ldr	r2, [pc, #200]	; (800189c <SCH_Add_Task+0x1e0>)
 80017d2:	4623      	mov	r3, r4
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4423      	add	r3, r4
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	330c      	adds	r3, #12
 80017de:	462a      	mov	r2, r5
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	4a2e      	ldr	r2, [pc, #184]	; (800189c <SCH_Add_Task+0x1e0>)
 80017e4:	4623      	mov	r3, r4
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4423      	add	r3, r4
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3310      	adds	r3, #16
 80017f0:	6019      	str	r1, [r3, #0]
 80017f2:	e04f      	b.n	8001894 <SCH_Add_Task+0x1d8>
 80017f4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80017f8:	4928      	ldr	r1, [pc, #160]	; (800189c <SCH_Add_Task+0x1e0>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d13a      	bne.n	8001880 <SCH_Add_Task+0x1c4>
 800180a:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001812:	1ad5      	subs	r5, r2, r3
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001818:	429a      	cmp	r2, r3
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461e      	mov	r6, r3
 8001824:	f000 f8dc 	bl	80019e0 <Get_New_Task_ID>
 8001828:	4601      	mov	r1, r0
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <SCH_Add_Task+0x1e0>)
 800182c:	4623      	mov	r3, r4
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4423      	add	r3, r4
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <SCH_Add_Task+0x1e0>)
 800183c:	4623      	mov	r3, r4
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4423      	add	r3, r4
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3304      	adds	r3, #4
 8001848:	601d      	str	r5, [r3, #0]
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <SCH_Add_Task+0x1e0>)
 800184c:	4623      	mov	r3, r4
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4423      	add	r3, r4
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	3308      	adds	r3, #8
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <SCH_Add_Task+0x1e0>)
 800185e:	4623      	mov	r3, r4
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4423      	add	r3, r4
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	330c      	adds	r3, #12
 800186a:	4632      	mov	r2, r6
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <SCH_Add_Task+0x1e0>)
 8001870:	4623      	mov	r3, r4
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4423      	add	r3, r4
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3310      	adds	r3, #16
 800187c:	6019      	str	r1, [r3, #0]
 800187e:	e009      	b.n	8001894 <SCH_Add_Task+0x1d8>
 8001880:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001884:	3301      	adds	r3, #1
 8001886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800188a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800188e:	2b09      	cmp	r3, #9
 8001890:	f67f af25 	bls.w	80016de <SCH_Add_Task+0x22>
 8001894:	374c      	adds	r7, #76	; 0x4c
 8001896:	46bd      	mov	sp, r7
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189a:	bf00      	nop
 800189c:	20000118 	.word	0x20000118

080018a0 <SCH_Delete_Task>:
 80018a0:	b4b0      	push	{r4, r5, r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d068      	beq.n	8001980 <SCH_Delete_Task+0xe0>
 80018ae:	2300      	movs	r3, #0
 80018b0:	77fb      	strb	r3, [r7, #31]
 80018b2:	e061      	b.n	8001978 <SCH_Delete_Task+0xd8>
 80018b4:	7ffa      	ldrb	r2, [r7, #31]
 80018b6:	4935      	ldr	r1, [pc, #212]	; (800198c <SCH_Delete_Task+0xec>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3310      	adds	r3, #16
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d152      	bne.n	8001972 <SCH_Delete_Task+0xd2>
 80018cc:	7ffb      	ldrb	r3, [r7, #31]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d828      	bhi.n	8001924 <SCH_Delete_Task+0x84>
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	492d      	ldr	r1, [pc, #180]	; (800198c <SCH_Delete_Task+0xec>)
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01d      	beq.n	8001924 <SCH_Delete_Task+0x84>
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	4927      	ldr	r1, [pc, #156]	; (800198c <SCH_Delete_Task+0xec>)
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3304      	adds	r3, #4
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	7ffa      	ldrb	r2, [r7, #31]
 80018fe:	4823      	ldr	r0, [pc, #140]	; (800198c <SCH_Delete_Task+0xec>)
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4403      	add	r3, r0
 800190a:	3304      	adds	r3, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	7ffa      	ldrb	r2, [r7, #31]
 8001910:	3201      	adds	r2, #1
 8001912:	4419      	add	r1, r3
 8001914:	481d      	ldr	r0, [pc, #116]	; (800198c <SCH_Delete_Task+0xec>)
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4403      	add	r3, r0
 8001920:	3304      	adds	r3, #4
 8001922:	6019      	str	r1, [r3, #0]
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	77bb      	strb	r3, [r7, #30]
 8001928:	e017      	b.n	800195a <SCH_Delete_Task+0xba>
 800192a:	7fbb      	ldrb	r3, [r7, #30]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	7fb9      	ldrb	r1, [r7, #30]
 8001930:	4816      	ldr	r0, [pc, #88]	; (800198c <SCH_Delete_Task+0xec>)
 8001932:	460b      	mov	r3, r1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4418      	add	r0, r3
 800193c:	4913      	ldr	r1, [pc, #76]	; (800198c <SCH_Delete_Task+0xec>)
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	4604      	mov	r4, r0
 800194a:	461d      	mov	r5, r3
 800194c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	6023      	str	r3, [r4, #0]
 8001954:	7fbb      	ldrb	r3, [r7, #30]
 8001956:	3301      	adds	r3, #1
 8001958:	77bb      	strb	r3, [r7, #30]
 800195a:	7fbb      	ldrb	r3, [r7, #30]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d9e4      	bls.n	800192a <SCH_Delete_Task+0x8a>
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <SCH_Delete_Task+0xec>)
 8001962:	33b4      	adds	r3, #180	; 0xb4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	e007      	b.n	8001982 <SCH_Delete_Task+0xe2>
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	3301      	adds	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	2b09      	cmp	r3, #9
 800197c:	d99a      	bls.n	80018b4 <SCH_Delete_Task+0x14>
 800197e:	e000      	b.n	8001982 <SCH_Delete_Task+0xe2>
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	bcb0      	pop	{r4, r5, r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000118 	.word	0x20000118

08001990 <SCH_Dispatch_Tasks>:
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <SCH_Dispatch_Tasks+0x4c>)
 8001998:	7b1b      	ldrb	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d019      	beq.n	80019d2 <SCH_Dispatch_Tasks+0x42>
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <SCH_Dispatch_Tasks+0x4c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4798      	blx	r3
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <SCH_Dispatch_Tasks+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	731a      	strb	r2, [r3, #12]
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <SCH_Dispatch_Tasks+0x4c>)
 80019ac:	1d3c      	adds	r4, r7, #4
 80019ae:	461d      	mov	r5, r3
 80019b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b4:	682b      	ldr	r3, [r5, #0]
 80019b6:	6023      	str	r3, [r4, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff70 	bl	80018a0 <SCH_Delete_Task>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <SCH_Dispatch_Tasks+0x42>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fe75 	bl	80016bc <SCH_Add_Task>
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdb0      	pop	{r4, r5, r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000118 	.word	0x20000118

080019e0 <Get_New_Task_ID>:
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <Get_New_Task_ID+0x1c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <Get_New_Task_ID+0x1c>)
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b03      	ldr	r3, [pc, #12]	; (80019fc <Get_New_Task_ID+0x1c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200001e0 	.word	0x200001e0

08001a00 <setTimerSecond>:
void setTimer7SEG(int duration){
	counter7SEG = duration/PERIOD;
	timer7SEG=0;
}

void setTimerSecond(int duration){
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	counterSecond = duration/PERIOD;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <setTimerSecond+0x2c>)
 8001a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a10:	1092      	asrs	r2, r2, #2
 8001a12:	17db      	asrs	r3, r3, #31
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <setTimerSecond+0x30>)
 8001a18:	6013      	str	r3, [r2, #0]
	timerSecond = 0;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <setTimerSecond+0x34>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	66666667 	.word	0x66666667
 8001a30:	200001f0 	.word	0x200001f0
 8001a34:	200001ec 	.word	0x200001ec

08001a38 <setTimer>:

void setTimer(int index, int duration){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	counter[index] = duration/PERIOD;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <setTimer+0x34>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	1092      	asrs	r2, r2, #2
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1ad2      	subs	r2, r2, r3
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <setTimer+0x38>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index] = 0;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <setTimer+0x3c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	66666667 	.word	0x66666667
 8001a70:	2000020c 	.word	0x2000020c
 8001a74:	200001f4 	.word	0x200001f4

08001a78 <timerRun>:

void timerRun(){
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	e01c      	b.n	8001abe <timerRun+0x46>
		if (counter[i] > 0){
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <timerRun+0x58>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	dd13      	ble.n	8001ab8 <timerRun+0x40>
			counter[i]--;
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <timerRun+0x58>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	490d      	ldr	r1, [pc, #52]	; (8001ad0 <timerRun+0x58>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (counter[i] <= 0){
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <timerRun+0x58>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	dc04      	bgt.n	8001ab8 <timerRun+0x40>
				timerFlag[i] = 1;
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <timerRun+0x5c>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3301      	adds	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	dddf      	ble.n	8001a84 <timerRun+0xc>
			}
		}
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	2000020c 	.word	0x2000020c
 8001ad4:	200001f4 	.word	0x200001f4

08001ad8 <timerRunSecond>:

void timerRunSecond(){
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
	if (counterSecond > 0){
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <timerRunSecond+0x2c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	dd0b      	ble.n	8001afc <timerRunSecond+0x24>
		counterSecond--;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <timerRunSecond+0x2c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <timerRunSecond+0x2c>)
 8001aec:	6013      	str	r3, [r2, #0]
		if (counterSecond <= 0){
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <timerRunSecond+0x2c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	dc02      	bgt.n	8001afc <timerRunSecond+0x24>
			timerSecond = 1;
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <timerRunSecond+0x30>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	200001f0 	.word	0x200001f0
 8001b08:	200001ec 	.word	0x200001ec

08001b0c <timerRun7SEG>:

void timerRun7SEG(){
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	if (counter7SEG > 0){
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <timerRun7SEG+0x2c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	dd0b      	ble.n	8001b30 <timerRun7SEG+0x24>
		counter7SEG--;
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <timerRun7SEG+0x2c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <timerRun7SEG+0x2c>)
 8001b20:	6013      	str	r3, [r2, #0]
		if (counter7SEG <= 0){
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <timerRun7SEG+0x2c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	dc02      	bgt.n	8001b30 <timerRun7SEG+0x24>
			timer7SEG = 1;
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <timerRun7SEG+0x30>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	200001e8 	.word	0x200001e8
 8001b3c:	200001e4 	.word	0x200001e4

08001b40 <HAL_MspInit>:
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	61d3      	str	r3, [r2, #28]
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_MspInit+0x60>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_MspInit+0x60>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6053      	str	r3, [r2, #4]
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010000 	.word	0x40010000

08001ba4 <HAL_TIM_Base_MspInit>:
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d114      	bne.n	8001be0 <HAL_TIM_Base_MspInit+0x3c>
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_TIM_Base_MspInit+0x78>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_TIM_Base_MspInit+0x78>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_TIM_Base_MspInit+0x78>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	201c      	movs	r0, #28
 8001bd4:	f000 fa9b 	bl	800210e <HAL_NVIC_SetPriority>
 8001bd8:	201c      	movs	r0, #28
 8001bda:	f000 fab4 	bl	8002146 <HAL_NVIC_EnableIRQ>
 8001bde:	e018      	b.n	8001c12 <HAL_TIM_Base_MspInit+0x6e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_TIM_Base_MspInit+0x7c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d113      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x6e>
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_TIM_Base_MspInit+0x78>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_TIM_Base_MspInit+0x78>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_TIM_Base_MspInit+0x78>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	201d      	movs	r0, #29
 8001c08:	f000 fa81 	bl	800210e <HAL_NVIC_SetPriority>
 8001c0c:	201d      	movs	r0, #29
 8001c0e:	f000 fa9a 	bl	8002146 <HAL_NVIC_EnableIRQ>
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40000400 	.word	0x40000400

08001c24 <HAL_TIM_MspPostInit>:
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <HAL_TIM_MspPostInit+0x58>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d117      	bne.n	8001c74 <HAL_TIM_MspPostInit+0x50>
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <HAL_TIM_MspPostInit+0x5c>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <HAL_TIM_MspPostInit+0x5c>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_TIM_MspPostInit+0x5c>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	2302      	movs	r3, #2
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	2302      	movs	r3, #2
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <HAL_TIM_MspPostInit+0x60>)
 8001c70:	f000 fb36 	bl	80022e0 <HAL_GPIO_Init>
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010800 	.word	0x40010800

08001c88 <HAL_UART_MspInit>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d137      	bne.n	8001d18 <HAL_UART_MspInit+0x90>
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb2:	61d3      	str	r3, [r2, #28]
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2304      	movs	r3, #4
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <HAL_UART_MspInit+0xa0>)
 8001cec:	f000 faf8 	bl	80022e0 <HAL_GPIO_Init>
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_UART_MspInit+0xa0>)
 8001d04:	f000 faec 	bl	80022e0 <HAL_GPIO_Init>
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2026      	movs	r0, #38	; 0x26
 8001d0e:	f000 f9fe 	bl	800210e <HAL_NVIC_SetPriority>
 8001d12:	2026      	movs	r0, #38	; 0x26
 8001d14:	f000 fa17 	bl	8002146 <HAL_NVIC_EnableIRQ>
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40004400 	.word	0x40004400
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010800 	.word	0x40010800

08001d2c <NMI_Handler>:
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <SVC_Handler>:
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <SysTick_Handler>:
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	f000 f8d9 	bl	8001f28 <HAL_IncTick>
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <TIM2_IRQHandler>:
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM2_IRQHandler+0x10>)
 8001d82:	f001 fa0b 	bl	800319c <HAL_TIM_IRQHandler>
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000284 	.word	0x20000284

08001d90 <TIM3_IRQHandler>:
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <TIM3_IRQHandler+0x10>)
 8001d96:	f001 fa01 	bl	800319c <HAL_TIM_IRQHandler>
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000023c 	.word	0x2000023c

08001da4 <USART2_IRQHandler>:
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <USART2_IRQHandler+0x10>)
 8001daa:	f002 f895 	bl	8003ed8 <HAL_UART_IRQHandler>
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200002cc 	.word	0x200002cc

08001db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <_sbrk+0x5c>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <_sbrk+0x60>)
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <_sbrk+0x64>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <_sbrk+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d207      	bcs.n	8001df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de8:	f002 fdc6 	bl	8004978 <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	220c      	movs	r2, #12
 8001df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e009      	b.n	8001e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <_sbrk+0x64>)
 8001e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20005000 	.word	0x20005000
 8001e18:	00000400 	.word	0x00000400
 8001e1c:	20000224 	.word	0x20000224
 8001e20:	20000328 	.word	0x20000328

08001e24 <SystemInit>:
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <buzzer>:
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <buzzer+0x18>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <buzzer+0x1c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200000e0 	.word	0x200000e0
 8001e4c:	2000023c 	.word	0x2000023c

08001e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff ffe8 	bl	8001e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e56:	490c      	ldr	r1, [pc, #48]	; (8001e88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e6c:	4c09      	ldr	r4, [pc, #36]	; (8001e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f002 fd83 	bl	8004984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e7e:	f7ff f9ab 	bl	80011d8 <main>
  bx lr
 8001e82:	4770      	bx	lr
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001e8c:	08005318 	.word	0x08005318
  ldr r2, =_sbss
 8001e90:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001e94:	20000328 	.word	0x20000328

08001e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_2_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_Init+0x28>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_Init+0x28>)
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f923 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fe42 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f93b 	bl	8002162 <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f903 	bl	800210e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000044 	.word	0x20000044
 8001f20:	2000004c 	.word	0x2000004c
 8001f24:	20000048 	.word	0x20000048

08001f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_IncTick+0x1c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_IncTick+0x20>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a03      	ldr	r2, [pc, #12]	; (8001f48 <HAL_IncTick+0x20>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	2000004c 	.word	0x2000004c
 8001f48:	20000314 	.word	0x20000314

08001f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_GetTick+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000314 	.word	0x20000314

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4906      	ldr	r1, [pc, #24]	; (8001ff8 <__NVIC_EnableIRQ+0x34>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff90 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff2d 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002120:	f7ff ff42 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 8002124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f7ff ff90 	bl	8002050 <NVIC_EncodePriority>
 8002130:	4602      	mov	r2, r0
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff5f 	bl	8001ffc <__NVIC_SetPriority>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff35 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffa2 	bl	80020b4 <SysTick_Config>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d008      	beq.n	80021a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e020      	b.n	80021e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 020e 	bic.w	r2, r2, #14
 80021b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d005      	beq.n	8002214 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2204      	movs	r2, #4
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e051      	b.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 020e 	bic.w	r2, r2, #14
 8002222:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_DMA_Abort_IT+0xd4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d029      	beq.n	8002292 <HAL_DMA_Abort_IT+0xa2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <HAL_DMA_Abort_IT+0xd8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d022      	beq.n	800228e <HAL_DMA_Abort_IT+0x9e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_DMA_Abort_IT+0xdc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01a      	beq.n	8002288 <HAL_DMA_Abort_IT+0x98>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_DMA_Abort_IT+0xe0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d012      	beq.n	8002282 <HAL_DMA_Abort_IT+0x92>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_DMA_Abort_IT+0xe4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00a      	beq.n	800227c <HAL_DMA_Abort_IT+0x8c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_DMA_Abort_IT+0xe8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <HAL_DMA_Abort_IT+0x86>
 8002270:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002274:	e00e      	b.n	8002294 <HAL_DMA_Abort_IT+0xa4>
 8002276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800227a:	e00b      	b.n	8002294 <HAL_DMA_Abort_IT+0xa4>
 800227c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002280:	e008      	b.n	8002294 <HAL_DMA_Abort_IT+0xa4>
 8002282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002286:	e005      	b.n	8002294 <HAL_DMA_Abort_IT+0xa4>
 8002288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228c:	e002      	b.n	8002294 <HAL_DMA_Abort_IT+0xa4>
 800228e:	2310      	movs	r3, #16
 8002290:	e000      	b.n	8002294 <HAL_DMA_Abort_IT+0xa4>
 8002292:	2301      	movs	r3, #1
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_DMA_Abort_IT+0xec>)
 8002296:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
    } 
  }
  return status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40020008 	.word	0x40020008
 80022c8:	4002001c 	.word	0x4002001c
 80022cc:	40020030 	.word	0x40020030
 80022d0:	40020044 	.word	0x40020044
 80022d4:	40020058 	.word	0x40020058
 80022d8:	4002006c 	.word	0x4002006c
 80022dc:	40020000 	.word	0x40020000

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b08b      	sub	sp, #44	; 0x2c
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e169      	b.n	80025c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f4:	2201      	movs	r2, #1
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	429a      	cmp	r2, r3
 800230e:	f040 8158 	bne.w	80025c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a9a      	ldr	r2, [pc, #616]	; (8002580 <HAL_GPIO_Init+0x2a0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d05e      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 800231c:	4a98      	ldr	r2, [pc, #608]	; (8002580 <HAL_GPIO_Init+0x2a0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d875      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 8002322:	4a98      	ldr	r2, [pc, #608]	; (8002584 <HAL_GPIO_Init+0x2a4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d058      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 8002328:	4a96      	ldr	r2, [pc, #600]	; (8002584 <HAL_GPIO_Init+0x2a4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d86f      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 800232e:	4a96      	ldr	r2, [pc, #600]	; (8002588 <HAL_GPIO_Init+0x2a8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d052      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 8002334:	4a94      	ldr	r2, [pc, #592]	; (8002588 <HAL_GPIO_Init+0x2a8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d869      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 800233a:	4a94      	ldr	r2, [pc, #592]	; (800258c <HAL_GPIO_Init+0x2ac>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d04c      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 8002340:	4a92      	ldr	r2, [pc, #584]	; (800258c <HAL_GPIO_Init+0x2ac>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d863      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 8002346:	4a92      	ldr	r2, [pc, #584]	; (8002590 <HAL_GPIO_Init+0x2b0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d046      	beq.n	80023da <HAL_GPIO_Init+0xfa>
 800234c:	4a90      	ldr	r2, [pc, #576]	; (8002590 <HAL_GPIO_Init+0x2b0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d85d      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 8002352:	2b12      	cmp	r3, #18
 8002354:	d82a      	bhi.n	80023ac <HAL_GPIO_Init+0xcc>
 8002356:	2b12      	cmp	r3, #18
 8002358:	d859      	bhi.n	800240e <HAL_GPIO_Init+0x12e>
 800235a:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <HAL_GPIO_Init+0x80>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	080023db 	.word	0x080023db
 8002364:	080023b5 	.word	0x080023b5
 8002368:	080023c7 	.word	0x080023c7
 800236c:	08002409 	.word	0x08002409
 8002370:	0800240f 	.word	0x0800240f
 8002374:	0800240f 	.word	0x0800240f
 8002378:	0800240f 	.word	0x0800240f
 800237c:	0800240f 	.word	0x0800240f
 8002380:	0800240f 	.word	0x0800240f
 8002384:	0800240f 	.word	0x0800240f
 8002388:	0800240f 	.word	0x0800240f
 800238c:	0800240f 	.word	0x0800240f
 8002390:	0800240f 	.word	0x0800240f
 8002394:	0800240f 	.word	0x0800240f
 8002398:	0800240f 	.word	0x0800240f
 800239c:	0800240f 	.word	0x0800240f
 80023a0:	0800240f 	.word	0x0800240f
 80023a4:	080023bd 	.word	0x080023bd
 80023a8:	080023d1 	.word	0x080023d1
 80023ac:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_GPIO_Init+0x2b4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023b2:	e02c      	b.n	800240e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	623b      	str	r3, [r7, #32]
          break;
 80023ba:	e029      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	3304      	adds	r3, #4
 80023c2:	623b      	str	r3, [r7, #32]
          break;
 80023c4:	e024      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	3308      	adds	r3, #8
 80023cc:	623b      	str	r3, [r7, #32]
          break;
 80023ce:	e01f      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	330c      	adds	r3, #12
 80023d6:	623b      	str	r3, [r7, #32]
          break;
 80023d8:	e01a      	b.n	8002410 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e2:	2304      	movs	r3, #4
 80023e4:	623b      	str	r3, [r7, #32]
          break;
 80023e6:	e013      	b.n	8002410 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f0:	2308      	movs	r3, #8
 80023f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	611a      	str	r2, [r3, #16]
          break;
 80023fa:	e009      	b.n	8002410 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023fc:	2308      	movs	r3, #8
 80023fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	615a      	str	r2, [r3, #20]
          break;
 8002406:	e003      	b.n	8002410 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
          break;
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x130>
          break;
 800240e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d801      	bhi.n	800241a <HAL_GPIO_Init+0x13a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	e001      	b.n	800241e <HAL_GPIO_Init+0x13e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d802      	bhi.n	800242c <HAL_GPIO_Init+0x14c>
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	e002      	b.n	8002432 <HAL_GPIO_Init+0x152>
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3b08      	subs	r3, #8
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	210f      	movs	r1, #15
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	431a      	orrs	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80b1 	beq.w	80025c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a4c      	ldr	r2, [pc, #304]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002478:	4a48      	ldr	r2, [pc, #288]	; (800259c <HAL_GPIO_Init+0x2bc>)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <HAL_GPIO_Init+0x2c0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_GPIO_Init+0x1ec>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3f      	ldr	r2, [pc, #252]	; (80025a4 <HAL_GPIO_Init+0x2c4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00d      	beq.n	80024c8 <HAL_GPIO_Init+0x1e8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3e      	ldr	r2, [pc, #248]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <HAL_GPIO_Init+0x1e4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3d      	ldr	r2, [pc, #244]	; (80025ac <HAL_GPIO_Init+0x2cc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_GPIO_Init+0x1e0>
 80024bc:	2303      	movs	r3, #3
 80024be:	e006      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c0:	2304      	movs	r3, #4
 80024c2:	e004      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e002      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024cc:	2300      	movs	r3, #0
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	f002 0203 	and.w	r2, r2, #3
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	4093      	lsls	r3, r2
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024de:	492f      	ldr	r1, [pc, #188]	; (800259c <HAL_GPIO_Init+0x2bc>)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3302      	adds	r3, #2
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	492c      	ldr	r1, [pc, #176]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	43db      	mvns	r3, r3
 800250e:	4928      	ldr	r1, [pc, #160]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002510:	4013      	ands	r3, r2
 8002512:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	4922      	ldr	r1, [pc, #136]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	43db      	mvns	r3, r3
 8002536:	491e      	ldr	r1, [pc, #120]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002538:	4013      	ands	r3, r2
 800253a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4918      	ldr	r1, [pc, #96]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	43db      	mvns	r3, r3
 800255e:	4914      	ldr	r1, [pc, #80]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002560:	4013      	ands	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d021      	beq.n	80025b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	490e      	ldr	r1, [pc, #56]	; (80025b0 <HAL_GPIO_Init+0x2d0>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
 800257c:	e021      	b.n	80025c2 <HAL_GPIO_Init+0x2e2>
 800257e:	bf00      	nop
 8002580:	10320000 	.word	0x10320000
 8002584:	10310000 	.word	0x10310000
 8002588:	10220000 	.word	0x10220000
 800258c:	10210000 	.word	0x10210000
 8002590:	10120000 	.word	0x10120000
 8002594:	10110000 	.word	0x10110000
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	40010800 	.word	0x40010800
 80025a4:	40010c00 	.word	0x40010c00
 80025a8:	40011000 	.word	0x40011000
 80025ac:	40011400 	.word	0x40011400
 80025b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_GPIO_Init+0x304>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	4909      	ldr	r1, [pc, #36]	; (80025e4 <HAL_GPIO_Init+0x304>)
 80025be:	4013      	ands	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	3301      	adds	r3, #1
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f ae8e 	bne.w	80022f4 <HAL_GPIO_Init+0x14>
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	372c      	adds	r7, #44	; 0x2c
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]
 8002622:	4613      	mov	r3, r2
 8002624:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002626:	787b      	ldrb	r3, [r7, #1]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262c:	887a      	ldrh	r2, [r7, #2]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002632:	e003      	b.n	800263c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	041a      	lsls	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	611a      	str	r2, [r3, #16]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
	...

08002648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e26c      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8087 	beq.w	8002776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002668:	4b92      	ldr	r3, [pc, #584]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b04      	cmp	r3, #4
 8002672:	d00c      	beq.n	800268e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d112      	bne.n	80026a6 <HAL_RCC_OscConfig+0x5e>
 8002680:	4b8c      	ldr	r3, [pc, #560]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d10b      	bne.n	80026a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268e:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d06c      	beq.n	8002774 <HAL_RCC_OscConfig+0x12c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d168      	bne.n	8002774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e246      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x76>
 80026b0:	4b80      	ldr	r3, [pc, #512]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a7f      	ldr	r2, [pc, #508]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e02e      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b7b      	ldr	r3, [pc, #492]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7a      	ldr	r2, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b78      	ldr	r3, [pc, #480]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a77      	ldr	r2, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e01d      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0xbc>
 80026ea:	4b72      	ldr	r3, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a71      	ldr	r2, [pc, #452]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b6f      	ldr	r3, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6e      	ldr	r2, [pc, #440]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 8002704:	4b6b      	ldr	r3, [pc, #428]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6a      	ldr	r2, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a67      	ldr	r2, [pc, #412]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fc12 	bl	8001f4c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7ff fc0e 	bl	8001f4c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1fa      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0xe4>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fbfe 	bl	8001f4c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7ff fbfa 	bl	8001f4c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1e6      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x10c>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x18c>
 800279a:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x176>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1ba      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4939      	ldr	r1, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x270>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff fbb3 	bl	8001f4c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7ff fbaf 	bl	8001f4c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e19b      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4927      	ldr	r1, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCC_OscConfig+0x270>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff fb92 	bl	8001f4c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff fb8e 	bl	8001f4c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e17a      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d03a      	beq.n	80028cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d019      	beq.n	8002892 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_RCC_OscConfig+0x274>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7ff fb72 	bl	8001f4c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7ff fb6e 	bl	8001f4c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e15a      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288a:	2001      	movs	r0, #1
 800288c:	f000 facc 	bl	8002e28 <RCC_Delay>
 8002890:	e01c      	b.n	80028cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_OscConfig+0x274>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7ff fb58 	bl	8001f4c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289e:	e00f      	b.n	80028c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7ff fb54 	bl	8001f4c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d908      	bls.n	80028c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e140      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	42420000 	.word	0x42420000
 80028bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b9e      	ldr	r3, [pc, #632]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e9      	bne.n	80028a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a6 	beq.w	8002a26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b97      	ldr	r3, [pc, #604]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10d      	bne.n	8002906 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b94      	ldr	r3, [pc, #592]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a93      	ldr	r2, [pc, #588]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]
 80028f6:	4b91      	ldr	r3, [pc, #580]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4b8e      	ldr	r3, [pc, #568]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d118      	bne.n	8002944 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a8a      	ldr	r2, [pc, #552]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291e:	f7ff fb15 	bl	8001f4c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002926:	f7ff fb11 	bl	8001f4c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0fd      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	4b81      	ldr	r3, [pc, #516]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x312>
 800294c:	4b7b      	ldr	r3, [pc, #492]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a7a      	ldr	r2, [pc, #488]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e02d      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x334>
 8002962:	4b76      	ldr	r3, [pc, #472]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a75      	ldr	r2, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a72      	ldr	r2, [pc, #456]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	e01c      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d10c      	bne.n	800299e <HAL_RCC_OscConfig+0x356>
 8002984:	4b6d      	ldr	r3, [pc, #436]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4a6c      	ldr	r2, [pc, #432]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6213      	str	r3, [r2, #32]
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a69      	ldr	r2, [pc, #420]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	e00b      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a66      	ldr	r2, [pc, #408]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6213      	str	r3, [r2, #32]
 80029aa:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a63      	ldr	r2, [pc, #396]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d015      	beq.n	80029ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff fac5 	bl	8001f4c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7ff fac1 	bl	8001f4c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e0ab      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ee      	beq.n	80029c6 <HAL_RCC_OscConfig+0x37e>
 80029e8:	e014      	b.n	8002a14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7ff faaf 	bl	8001f4c <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7ff faab 	bl	8001f4c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e095      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ee      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4a47      	ldr	r2, [pc, #284]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8081 	beq.w	8002b32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a30:	4b42      	ldr	r3, [pc, #264]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d061      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d146      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_OscConfig+0x4fc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fa7f 	bl	8001f4c <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7ff fa7b 	bl	8001f4c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e067      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	492d      	ldr	r1, [pc, #180]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a19      	ldr	r1, [r3, #32]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	4927      	ldr	r1, [pc, #156]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x4fc>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff fa4f 	bl	8001f4c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7ff fa4b 	bl	8001f4c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e037      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46a>
 8002ad0:	e02f      	b.n	8002b32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_RCC_OscConfig+0x4fc>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fa38 	bl	8001f4c <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7ff fa34 	bl	8001f4c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e020      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x498>
 8002afe:	e018      	b.n	8002b32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e013      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42420060 	.word	0x42420060

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0d0      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4965      	ldr	r1, [pc, #404]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d040      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e073      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06b      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4936      	ldr	r1, [pc, #216]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7ff f988 	bl	8001f4c <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7ff f984 	bl	8001f4c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e053      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d210      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1cc>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f8e6 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	080052b0 	.word	0x080052b0
 8002d14:	20000044 	.word	0x20000044
 8002d18:	20000048 	.word	0x20000048

08002d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x30>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x36>
 8002d4a:	e027      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	e027      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0c5b      	lsrs	r3, r3, #17
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7e:	fb02 f203 	mul.w	r2, r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e004      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	613b      	str	r3, [r7, #16]
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9e:	613b      	str	r3, [r7, #16]
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	693b      	ldr	r3, [r7, #16]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	080052c8 	.word	0x080052c8
 8002dbc:	080052d8 	.word	0x080052d8
 8002dc0:	003d0900 	.word	0x003d0900

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b02      	ldr	r3, [pc, #8]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000044 	.word	0x20000044

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	f7ff fff2 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	080052c0 	.word	0x080052c0

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0adb      	lsrs	r3, r3, #11
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	080052c0 	.word	0x080052c0

08002e28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <RCC_Delay+0x34>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <RCC_Delay+0x38>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0a5b      	lsrs	r3, r3, #9
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e44:	bf00      	nop
  }
  while (Delay --);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e5a      	subs	r2, r3, #1
 8002e4a:	60fa      	str	r2, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f9      	bne.n	8002e44 <RCC_Delay+0x1c>
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	20000044 	.word	0x20000044
 8002e60:	10624dd3 	.word	0x10624dd3

08002e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e041      	b.n	8002efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fe8a 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f000 fc30 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e03a      	b.n	8002f92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_TIM_Base_Start_IT+0x98>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x58>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d009      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x58>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x58>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d111      	bne.n	8002f80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d010      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	e007      	b.n	8002f90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800

08002fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e041      	b.n	800303e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f839 	bl	8003046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f000 fb8e 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_TIM_PWM_Start+0x24>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e022      	b.n	80030c2 <HAL_TIM_PWM_Start+0x6a>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d109      	bne.n	8003096 <HAL_TIM_PWM_Start+0x3e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e015      	b.n	80030c2 <HAL_TIM_PWM_Start+0x6a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d109      	bne.n	80030b0 <HAL_TIM_PWM_Start+0x58>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e008      	b.n	80030c2 <HAL_TIM_PWM_Start+0x6a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e05e      	b.n	8003188 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_TIM_PWM_Start+0x82>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d8:	e013      	b.n	8003102 <HAL_TIM_PWM_Start+0xaa>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PWM_Start+0x92>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e8:	e00b      	b.n	8003102 <HAL_TIM_PWM_Start+0xaa>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_PWM_Start+0xa2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f8:	e003      	b.n	8003102 <HAL_TIM_PWM_Start+0xaa>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2201      	movs	r2, #1
 8003108:	6839      	ldr	r1, [r7, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fd7c 	bl	8003c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_TIM_PWM_Start+0x138>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d107      	bne.n	800312a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_TIM_PWM_Start+0x138>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_TIM_PWM_Start+0xfa>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d009      	beq.n	8003152 <HAL_TIM_PWM_Start+0xfa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_TIM_PWM_Start+0x13c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_TIM_PWM_Start+0xfa>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <HAL_TIM_PWM_Start+0x140>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d111      	bne.n	8003176 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b06      	cmp	r3, #6
 8003162:	d010      	beq.n	8003186 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	e007      	b.n	8003186 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800

0800319c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0202 	mvn.w	r2, #2
 80031c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa76 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa69 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fa78 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0204 	mvn.w	r2, #4
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa4c 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa3f 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fa4e 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b08      	cmp	r3, #8
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0208 	mvn.w	r2, #8
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa22 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa15 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa24 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0210 	mvn.w	r2, #16
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2208      	movs	r2, #8
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9f8 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9eb 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9fa 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe f958 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b80      	cmp	r3, #128	; 0x80
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fce9 	bl	8003d1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9be 	bl	80036f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b20      	cmp	r3, #32
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b20      	cmp	r3, #32
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0220 	mvn.w	r2, #32
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fcb4 	bl	8003d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ae      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	f200 809f 	bhi.w	8003518 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003415 	.word	0x08003415
 80033e4:	08003519 	.word	0x08003519
 80033e8:	08003519 	.word	0x08003519
 80033ec:	08003519 	.word	0x08003519
 80033f0:	08003455 	.word	0x08003455
 80033f4:	08003519 	.word	0x08003519
 80033f8:	08003519 	.word	0x08003519
 80033fc:	08003519 	.word	0x08003519
 8003400:	08003497 	.word	0x08003497
 8003404:	08003519 	.word	0x08003519
 8003408:	08003519 	.word	0x08003519
 800340c:	08003519 	.word	0x08003519
 8003410:	080034d7 	.word	0x080034d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f9d6 	bl	80037cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0208 	orr.w	r2, r2, #8
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0204 	bic.w	r2, r2, #4
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	619a      	str	r2, [r3, #24]
      break;
 8003452:	e064      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fa1c 	bl	8003898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	619a      	str	r2, [r3, #24]
      break;
 8003494:	e043      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fa65 	bl	800396c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0208 	orr.w	r2, r2, #8
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0204 	bic.w	r2, r2, #4
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
      break;
 80034d4:	e023      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 faaf 	bl	8003a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	021a      	lsls	r2, r3, #8
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	61da      	str	r2, [r3, #28]
      break;
 8003516:	e002      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIM_ConfigClockSource+0x1c>
 8003548:	2302      	movs	r3, #2
 800354a:	e0b4      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x186>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d03e      	beq.n	8003604 <HAL_TIM_ConfigClockSource+0xd4>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	f200 8087 	bhi.w	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	f000 8086 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x172>
 8003596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359a:	d87f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b70      	cmp	r3, #112	; 0x70
 800359e:	d01a      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xa6>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d87b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b60      	cmp	r3, #96	; 0x60
 80035a6:	d050      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x11a>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d877      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d03c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xfa>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d873      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d058      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x13a>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d86f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d064      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d86b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d060      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d867      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d05a      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	e062      	b.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 faf0 	bl	8003bca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	609a      	str	r2, [r3, #8]
      break;
 8003602:	e04f      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f000 fad9 	bl	8003bca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003626:	609a      	str	r2, [r3, #8]
      break;
 8003628:	e03c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	461a      	mov	r2, r3
 8003638:	f000 fa50 	bl	8003adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2150      	movs	r1, #80	; 0x50
 8003642:	4618      	mov	r0, r3
 8003644:	f000 faa7 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 8003648:	e02c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	461a      	mov	r2, r3
 8003658:	f000 fa6e 	bl	8003b38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2160      	movs	r1, #96	; 0x60
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fa97 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 8003668:	e01c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	461a      	mov	r2, r3
 8003678:	f000 fa30 	bl	8003adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fa87 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 8003688:	e00c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f000 fa7e 	bl	8003b96 <TIM_ITRx_SetConfig>
      break;
 800369a:	e003      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e000      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <TIM_Base_SetConfig+0xbc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <TIM_Base_SetConfig+0xc0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <TIM_Base_SetConfig+0xbc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <TIM_Base_SetConfig+0xc0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	615a      	str	r2, [r3, #20]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800

080037cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f023 0201 	bic.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 0302 	bic.w	r3, r3, #2
 8003814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <TIM_OC1_SetConfig+0xc8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10c      	bne.n	8003842 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0308 	bic.w	r3, r3, #8
 800382e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <TIM_OC1_SetConfig+0xc8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d111      	bne.n	800386e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	621a      	str	r2, [r3, #32]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40012c00 	.word	0x40012c00

08003898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f023 0210 	bic.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0320 	bic.w	r3, r3, #32
 80038e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <TIM_OC2_SetConfig+0xd0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d10d      	bne.n	8003914 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a14      	ldr	r2, [pc, #80]	; (8003968 <TIM_OC2_SetConfig+0xd0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d113      	bne.n	8003944 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800392a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00

0800396c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <TIM_OC3_SetConfig+0xd0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10d      	bne.n	80039e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <TIM_OC3_SetConfig+0xd0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d113      	bne.n	8003a16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	621a      	str	r2, [r3, #32]
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00

08003a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	031b      	lsls	r3, r3, #12
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <TIM_OC4_SetConfig+0x98>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d109      	bne.n	8003ab4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	019b      	lsls	r3, r3, #6
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	40012c00 	.word	0x40012c00

08003adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0201 	bic.w	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f023 030a 	bic.w	r3, r3, #10
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f023 0210 	bic.w	r2, r3, #16
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	031b      	lsls	r3, r3, #12
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f043 0307 	orr.w	r3, r3, #7
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	021a      	lsls	r2, r3, #8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	609a      	str	r2, [r3, #8]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1a      	ldr	r2, [r3, #32]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e046      	b.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00e      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d009      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800

08003d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e042      	b.n	8003dc8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd ff96 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fd71 	bl	800485c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d16d      	bne.n	8003ecc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_UART_Transmit+0x2c>
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e066      	b.n	8003ece <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2221      	movs	r2, #33	; 0x21
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0e:	f7fe f89d 	bl	8001f4c <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d108      	bne.n	8003e3c <HAL_UART_Transmit+0x6c>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	e003      	b.n	8003e44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e44:	e02a      	b.n	8003e9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 faf9 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e036      	b.n	8003ece <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3302      	adds	r3, #2
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e007      	b.n	8003e8e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1cf      	bne.n	8003e46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2140      	movs	r1, #64	; 0x40
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fac9 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e006      	b.n	8003ece <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0ba      	sub	sp, #232	; 0xe8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
 8003f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fbd1 	bl	80046de <UART_Receive_IT>
      return;
 8003f3c:	e25b      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80de 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
 8003f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80d1 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
 8003f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
 8003fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
 8003fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f043 0208 	orr.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 81f2 	beq.w	80043ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fb5c 	bl	80046de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_UART_IRQHandler+0x17a>
 800404a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04f      	beq.n	80040f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa66 	bl	8004524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d041      	beq.n	80040ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800407c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800409e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1d9      	bne.n	8004066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	4a7e      	ldr	r2, [pc, #504]	; (80042b8 <HAL_UART_IRQHandler+0x3e0>)
 80040c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe f892 	bl	80021f0 <HAL_DMA_Abort_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00e      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f99c 	bl	8004420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00a      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f998 	bl	8004420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e006      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f994 	bl	8004420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80040fe:	e175      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	bf00      	nop
    return;
 8004102:	e173      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 814f 	bne.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8148 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8141 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80b6 	beq.w	80042bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800415c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8145 	beq.w	80043f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800416e:	429a      	cmp	r2, r3
 8004170:	f080 813e 	bcs.w	80043f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800417a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b20      	cmp	r3, #32
 8004184:	f000 8088 	beq.w	8004298 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800419e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041b4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1d9      	bne.n	8004188 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004200:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800420a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e1      	bne.n	80041d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3314      	adds	r3, #20
 8004216:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004234:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004236:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800423a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e3      	bne.n	8004210 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004268:	f023 0310 	bic.w	r3, r3, #16
 800426c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800427a:	65ba      	str	r2, [r7, #88]	; 0x58
 800427c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e3      	bne.n	8004256 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd ff71 	bl	800217a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f8bf 	bl	8004432 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b4:	e09c      	b.n	80043f0 <HAL_UART_IRQHandler+0x518>
 80042b6:	bf00      	nop
 80042b8:	080045e9 	.word	0x080045e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 808e 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8089 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004306:	647a      	str	r2, [r7, #68]	; 0x44
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800430c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e3      	bne.n	80042e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	623b      	str	r3, [r7, #32]
   return(result);
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800433e:	633a      	str	r2, [r7, #48]	; 0x30
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0310 	bic.w	r3, r3, #16
 8004376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	69b9      	ldr	r1, [r7, #24]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	617b      	str	r3, [r7, #20]
   return(result);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e3      	bne.n	8004360 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800439e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f844 	bl	8004432 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043aa:	e023      	b.n	80043f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f923 	bl	8004610 <UART_Transmit_IT>
    return;
 80043ca:	e014      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f962 	bl	80046ae <UART_EndTransmit_IT>
    return;
 80043ea:	e004      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f4:	bf00      	nop
  }
}
 80043f6:	37e8      	adds	r7, #232	; 0xe8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b090      	sub	sp, #64	; 0x40
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004458:	e050      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d04c      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0x30>
 8004468:	f7fd fd70 	bl	8001f4c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004474:	429a      	cmp	r2, r3
 8004476:	d241      	bcs.n	80044fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004498:	637a      	str	r2, [r7, #52]	; 0x34
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800449e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	613b      	str	r3, [r7, #16]
   return(result);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044cc:	623a      	str	r2, [r7, #32]
 80044ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	69f9      	ldr	r1, [r7, #28]
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e00f      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4013      	ands	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	429a      	cmp	r2, r3
 8004518:	d09f      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3740      	adds	r7, #64	; 0x40
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b095      	sub	sp, #84	; 0x54
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800454c:	643a      	str	r2, [r7, #64]	; 0x40
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	64bb      	str	r3, [r7, #72]	; 0x48
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	2b01      	cmp	r3, #1
 800459a:	d119      	bne.n	80045d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	647b      	str	r3, [r7, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	330c      	adds	r3, #12
 80045ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045bc:	61ba      	str	r2, [r7, #24]
 80045be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045de:	bf00      	nop
 80045e0:	3754      	adds	r7, #84	; 0x54
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff ff0c 	bl	8004420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b21      	cmp	r3, #33	; 0x21
 8004622:	d13e      	bne.n	80046a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d114      	bne.n	8004658 <UART_Transmit_IT+0x48>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d110      	bne.n	8004658 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	1c9a      	adds	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]
 8004656:	e008      	b.n	800466a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	1c59      	adds	r1, r3, #1
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6211      	str	r1, [r2, #32]
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29b      	uxth	r3, r3
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4619      	mov	r1, r3
 8004678:	84d1      	strh	r1, [r2, #38]	; 0x26
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800468c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800469c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fe94 	bl	80043fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b08c      	sub	sp, #48	; 0x30
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b22      	cmp	r3, #34	; 0x22
 80046f0:	f040 80ae 	bne.w	8004850 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d117      	bne.n	800472e <UART_Receive_IT+0x50>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d113      	bne.n	800472e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471c:	b29a      	uxth	r2, r3
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	1c9a      	adds	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
 800472c:	e026      	b.n	800477c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004740:	d007      	beq.n	8004752 <UART_Receive_IT+0x74>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <UART_Receive_IT+0x82>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e008      	b.n	8004772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476c:	b2da      	uxtb	r2, r3
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29b      	uxth	r3, r3
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4619      	mov	r1, r3
 800478a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800478c:	2b00      	cmp	r3, #0
 800478e:	d15d      	bne.n	800484c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0220 	bic.w	r2, r2, #32
 800479e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d135      	bne.n	8004842 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	613b      	str	r3, [r7, #16]
   return(result);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	623a      	str	r2, [r7, #32]
 80047fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	69f9      	ldr	r1, [r7, #28]
 8004802:	6a3a      	ldr	r2, [r7, #32]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	61bb      	str	r3, [r7, #24]
   return(result);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b10      	cmp	r3, #16
 800481c:	d10a      	bne.n	8004834 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fdf9 	bl	8004432 <HAL_UARTEx_RxEventCallback>
 8004840:	e002      	b.n	8004848 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fde3 	bl	800440e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e002      	b.n	8004852 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
  }
}
 8004852:	4618      	mov	r0, r3
 8004854:	3730      	adds	r7, #48	; 0x30
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004896:	f023 030c 	bic.w	r3, r3, #12
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <UART_SetConfig+0x114>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d103      	bne.n	80048cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7fe fa9c 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	e002      	b.n	80048d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7fe fa84 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80048d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009a      	lsls	r2, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	4a22      	ldr	r2, [pc, #136]	; (8004974 <UART_SetConfig+0x118>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	0119      	lsls	r1, r3, #4
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009a      	lsls	r2, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <UART_SetConfig+0x118>)
 800490a:	fba3 0302 	umull	r0, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2064      	movs	r0, #100	; 0x64
 8004912:	fb00 f303 	mul.w	r3, r0, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	; 0x32
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <UART_SetConfig+0x118>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004928:	4419      	add	r1, r3
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <UART_SetConfig+0x118>)
 8004942:	fba3 0302 	umull	r0, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2064      	movs	r0, #100	; 0x64
 800494a:	fb00 f303 	mul.w	r3, r0, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	3332      	adds	r3, #50	; 0x32
 8004954:	4a07      	ldr	r2, [pc, #28]	; (8004974 <UART_SetConfig+0x118>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	440a      	add	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40013800 	.word	0x40013800
 8004974:	51eb851f 	.word	0x51eb851f

08004978 <__errno>:
 8004978:	4b01      	ldr	r3, [pc, #4]	; (8004980 <__errno+0x8>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000050 	.word	0x20000050

08004984 <__libc_init_array>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	2600      	movs	r6, #0
 8004988:	4d0c      	ldr	r5, [pc, #48]	; (80049bc <__libc_init_array+0x38>)
 800498a:	4c0d      	ldr	r4, [pc, #52]	; (80049c0 <__libc_init_array+0x3c>)
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	42a6      	cmp	r6, r4
 8004992:	d109      	bne.n	80049a8 <__libc_init_array+0x24>
 8004994:	f000 fc5c 	bl	8005250 <_init>
 8004998:	2600      	movs	r6, #0
 800499a:	4d0a      	ldr	r5, [pc, #40]	; (80049c4 <__libc_init_array+0x40>)
 800499c:	4c0a      	ldr	r4, [pc, #40]	; (80049c8 <__libc_init_array+0x44>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	42a6      	cmp	r6, r4
 80049a4:	d105      	bne.n	80049b2 <__libc_init_array+0x2e>
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ac:	4798      	blx	r3
 80049ae:	3601      	adds	r6, #1
 80049b0:	e7ee      	b.n	8004990 <__libc_init_array+0xc>
 80049b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b6:	4798      	blx	r3
 80049b8:	3601      	adds	r6, #1
 80049ba:	e7f2      	b.n	80049a2 <__libc_init_array+0x1e>
 80049bc:	08005310 	.word	0x08005310
 80049c0:	08005310 	.word	0x08005310
 80049c4:	08005310 	.word	0x08005310
 80049c8:	08005314 	.word	0x08005314

080049cc <memset>:
 80049cc:	4603      	mov	r3, r0
 80049ce:	4402      	add	r2, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <siprintf>:
 80049dc:	b40e      	push	{r1, r2, r3}
 80049de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049e2:	b500      	push	{lr}
 80049e4:	b09c      	sub	sp, #112	; 0x70
 80049e6:	ab1d      	add	r3, sp, #116	; 0x74
 80049e8:	9002      	str	r0, [sp, #8]
 80049ea:	9006      	str	r0, [sp, #24]
 80049ec:	9107      	str	r1, [sp, #28]
 80049ee:	9104      	str	r1, [sp, #16]
 80049f0:	4808      	ldr	r0, [pc, #32]	; (8004a14 <siprintf+0x38>)
 80049f2:	4909      	ldr	r1, [pc, #36]	; (8004a18 <siprintf+0x3c>)
 80049f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f8:	9105      	str	r1, [sp, #20]
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	a902      	add	r1, sp, #8
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	f000 f868 	bl	8004ad4 <_svfiprintf_r>
 8004a04:	2200      	movs	r2, #0
 8004a06:	9b02      	ldr	r3, [sp, #8]
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	b01c      	add	sp, #112	; 0x70
 8004a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a10:	b003      	add	sp, #12
 8004a12:	4770      	bx	lr
 8004a14:	20000050 	.word	0x20000050
 8004a18:	ffff0208 	.word	0xffff0208

08004a1c <__ssputs_r>:
 8004a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a20:	688e      	ldr	r6, [r1, #8]
 8004a22:	4682      	mov	sl, r0
 8004a24:	429e      	cmp	r6, r3
 8004a26:	460c      	mov	r4, r1
 8004a28:	4690      	mov	r8, r2
 8004a2a:	461f      	mov	r7, r3
 8004a2c:	d838      	bhi.n	8004aa0 <__ssputs_r+0x84>
 8004a2e:	898a      	ldrh	r2, [r1, #12]
 8004a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a34:	d032      	beq.n	8004a9c <__ssputs_r+0x80>
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	6909      	ldr	r1, [r1, #16]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	eba5 0901 	sub.w	r9, r5, r1
 8004a40:	6965      	ldr	r5, [r4, #20]
 8004a42:	444b      	add	r3, r9
 8004a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a4c:	106d      	asrs	r5, r5, #1
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	bf38      	it	cc
 8004a52:	461d      	movcc	r5, r3
 8004a54:	0553      	lsls	r3, r2, #21
 8004a56:	d531      	bpl.n	8004abc <__ssputs_r+0xa0>
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f000 fb53 	bl	8005104 <_malloc_r>
 8004a5e:	4606      	mov	r6, r0
 8004a60:	b950      	cbnz	r0, 8004a78 <__ssputs_r+0x5c>
 8004a62:	230c      	movs	r3, #12
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	f8ca 3000 	str.w	r3, [sl]
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a72:	81a3      	strh	r3, [r4, #12]
 8004a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a78:	464a      	mov	r2, r9
 8004a7a:	6921      	ldr	r1, [r4, #16]
 8004a7c:	f000 face 	bl	800501c <memcpy>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	6126      	str	r6, [r4, #16]
 8004a8e:	444e      	add	r6, r9
 8004a90:	6026      	str	r6, [r4, #0]
 8004a92:	463e      	mov	r6, r7
 8004a94:	6165      	str	r5, [r4, #20]
 8004a96:	eba5 0509 	sub.w	r5, r5, r9
 8004a9a:	60a5      	str	r5, [r4, #8]
 8004a9c:	42be      	cmp	r6, r7
 8004a9e:	d900      	bls.n	8004aa2 <__ssputs_r+0x86>
 8004aa0:	463e      	mov	r6, r7
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	6820      	ldr	r0, [r4, #0]
 8004aa8:	f000 fac6 	bl	8005038 <memmove>
 8004aac:	68a3      	ldr	r3, [r4, #8]
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	1b9b      	subs	r3, r3, r6
 8004ab2:	4432      	add	r2, r6
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	60a3      	str	r3, [r4, #8]
 8004ab8:	6022      	str	r2, [r4, #0]
 8004aba:	e7db      	b.n	8004a74 <__ssputs_r+0x58>
 8004abc:	462a      	mov	r2, r5
 8004abe:	f000 fb7b 	bl	80051b8 <_realloc_r>
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d1e1      	bne.n	8004a8c <__ssputs_r+0x70>
 8004ac8:	4650      	mov	r0, sl
 8004aca:	6921      	ldr	r1, [r4, #16]
 8004acc:	f000 face 	bl	800506c <_free_r>
 8004ad0:	e7c7      	b.n	8004a62 <__ssputs_r+0x46>
	...

08004ad4 <_svfiprintf_r>:
 8004ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad8:	4698      	mov	r8, r3
 8004ada:	898b      	ldrh	r3, [r1, #12]
 8004adc:	4607      	mov	r7, r0
 8004ade:	061b      	lsls	r3, r3, #24
 8004ae0:	460d      	mov	r5, r1
 8004ae2:	4614      	mov	r4, r2
 8004ae4:	b09d      	sub	sp, #116	; 0x74
 8004ae6:	d50e      	bpl.n	8004b06 <_svfiprintf_r+0x32>
 8004ae8:	690b      	ldr	r3, [r1, #16]
 8004aea:	b963      	cbnz	r3, 8004b06 <_svfiprintf_r+0x32>
 8004aec:	2140      	movs	r1, #64	; 0x40
 8004aee:	f000 fb09 	bl	8005104 <_malloc_r>
 8004af2:	6028      	str	r0, [r5, #0]
 8004af4:	6128      	str	r0, [r5, #16]
 8004af6:	b920      	cbnz	r0, 8004b02 <_svfiprintf_r+0x2e>
 8004af8:	230c      	movs	r3, #12
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	e0d1      	b.n	8004ca6 <_svfiprintf_r+0x1d2>
 8004b02:	2340      	movs	r3, #64	; 0x40
 8004b04:	616b      	str	r3, [r5, #20]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b10:	2330      	movs	r3, #48	; 0x30
 8004b12:	f04f 0901 	mov.w	r9, #1
 8004b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004cc0 <_svfiprintf_r+0x1ec>
 8004b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b22:	4623      	mov	r3, r4
 8004b24:	469a      	mov	sl, r3
 8004b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b2a:	b10a      	cbz	r2, 8004b30 <_svfiprintf_r+0x5c>
 8004b2c:	2a25      	cmp	r2, #37	; 0x25
 8004b2e:	d1f9      	bne.n	8004b24 <_svfiprintf_r+0x50>
 8004b30:	ebba 0b04 	subs.w	fp, sl, r4
 8004b34:	d00b      	beq.n	8004b4e <_svfiprintf_r+0x7a>
 8004b36:	465b      	mov	r3, fp
 8004b38:	4622      	mov	r2, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	f7ff ff6d 	bl	8004a1c <__ssputs_r>
 8004b42:	3001      	adds	r0, #1
 8004b44:	f000 80aa 	beq.w	8004c9c <_svfiprintf_r+0x1c8>
 8004b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b4a:	445a      	add	r2, fp
 8004b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80a2 	beq.w	8004c9c <_svfiprintf_r+0x1c8>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b62:	f10a 0a01 	add.w	sl, sl, #1
 8004b66:	9304      	str	r3, [sp, #16]
 8004b68:	9307      	str	r3, [sp, #28]
 8004b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b70:	4654      	mov	r4, sl
 8004b72:	2205      	movs	r2, #5
 8004b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b78:	4851      	ldr	r0, [pc, #324]	; (8004cc0 <_svfiprintf_r+0x1ec>)
 8004b7a:	f000 fa41 	bl	8005000 <memchr>
 8004b7e:	9a04      	ldr	r2, [sp, #16]
 8004b80:	b9d8      	cbnz	r0, 8004bba <_svfiprintf_r+0xe6>
 8004b82:	06d0      	lsls	r0, r2, #27
 8004b84:	bf44      	itt	mi
 8004b86:	2320      	movmi	r3, #32
 8004b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b8c:	0711      	lsls	r1, r2, #28
 8004b8e:	bf44      	itt	mi
 8004b90:	232b      	movmi	r3, #43	; 0x2b
 8004b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b96:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9c:	d015      	beq.n	8004bca <_svfiprintf_r+0xf6>
 8004b9e:	4654      	mov	r4, sl
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f04f 0c0a 	mov.w	ip, #10
 8004ba6:	9a07      	ldr	r2, [sp, #28]
 8004ba8:	4621      	mov	r1, r4
 8004baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bae:	3b30      	subs	r3, #48	; 0x30
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d94e      	bls.n	8004c52 <_svfiprintf_r+0x17e>
 8004bb4:	b1b0      	cbz	r0, 8004be4 <_svfiprintf_r+0x110>
 8004bb6:	9207      	str	r2, [sp, #28]
 8004bb8:	e014      	b.n	8004be4 <_svfiprintf_r+0x110>
 8004bba:	eba0 0308 	sub.w	r3, r0, r8
 8004bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	46a2      	mov	sl, r4
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	e7d2      	b.n	8004b70 <_svfiprintf_r+0x9c>
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	1d19      	adds	r1, r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	9103      	str	r1, [sp, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfbb      	ittet	lt
 8004bd6:	425b      	neglt	r3, r3
 8004bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bdc:	9307      	strge	r3, [sp, #28]
 8004bde:	9307      	strlt	r3, [sp, #28]
 8004be0:	bfb8      	it	lt
 8004be2:	9204      	strlt	r2, [sp, #16]
 8004be4:	7823      	ldrb	r3, [r4, #0]
 8004be6:	2b2e      	cmp	r3, #46	; 0x2e
 8004be8:	d10c      	bne.n	8004c04 <_svfiprintf_r+0x130>
 8004bea:	7863      	ldrb	r3, [r4, #1]
 8004bec:	2b2a      	cmp	r3, #42	; 0x2a
 8004bee:	d135      	bne.n	8004c5c <_svfiprintf_r+0x188>
 8004bf0:	9b03      	ldr	r3, [sp, #12]
 8004bf2:	3402      	adds	r4, #2
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	9203      	str	r2, [sp, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bfb8      	it	lt
 8004bfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cd0 <_svfiprintf_r+0x1fc>
 8004c08:	2203      	movs	r2, #3
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	7821      	ldrb	r1, [r4, #0]
 8004c0e:	f000 f9f7 	bl	8005000 <memchr>
 8004c12:	b140      	cbz	r0, 8004c26 <_svfiprintf_r+0x152>
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	eba0 000a 	sub.w	r0, r0, sl
 8004c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	3401      	adds	r4, #1
 8004c22:	4303      	orrs	r3, r0
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c2a:	2206      	movs	r2, #6
 8004c2c:	4825      	ldr	r0, [pc, #148]	; (8004cc4 <_svfiprintf_r+0x1f0>)
 8004c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c32:	f000 f9e5 	bl	8005000 <memchr>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d038      	beq.n	8004cac <_svfiprintf_r+0x1d8>
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <_svfiprintf_r+0x1f4>)
 8004c3c:	bb1b      	cbnz	r3, 8004c86 <_svfiprintf_r+0x1b2>
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	3307      	adds	r3, #7
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	3308      	adds	r3, #8
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4c:	4433      	add	r3, r6
 8004c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c50:	e767      	b.n	8004b22 <_svfiprintf_r+0x4e>
 8004c52:	460c      	mov	r4, r1
 8004c54:	2001      	movs	r0, #1
 8004c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c5a:	e7a5      	b.n	8004ba8 <_svfiprintf_r+0xd4>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f04f 0c0a 	mov.w	ip, #10
 8004c62:	4619      	mov	r1, r3
 8004c64:	3401      	adds	r4, #1
 8004c66:	9305      	str	r3, [sp, #20]
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c6e:	3a30      	subs	r2, #48	; 0x30
 8004c70:	2a09      	cmp	r2, #9
 8004c72:	d903      	bls.n	8004c7c <_svfiprintf_r+0x1a8>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0c5      	beq.n	8004c04 <_svfiprintf_r+0x130>
 8004c78:	9105      	str	r1, [sp, #20]
 8004c7a:	e7c3      	b.n	8004c04 <_svfiprintf_r+0x130>
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	2301      	movs	r3, #1
 8004c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c84:	e7f0      	b.n	8004c68 <_svfiprintf_r+0x194>
 8004c86:	ab03      	add	r3, sp, #12
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <_svfiprintf_r+0x1f8>)
 8004c90:	a904      	add	r1, sp, #16
 8004c92:	f3af 8000 	nop.w
 8004c96:	1c42      	adds	r2, r0, #1
 8004c98:	4606      	mov	r6, r0
 8004c9a:	d1d6      	bne.n	8004c4a <_svfiprintf_r+0x176>
 8004c9c:	89ab      	ldrh	r3, [r5, #12]
 8004c9e:	065b      	lsls	r3, r3, #25
 8004ca0:	f53f af2c 	bmi.w	8004afc <_svfiprintf_r+0x28>
 8004ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ca6:	b01d      	add	sp, #116	; 0x74
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	ab03      	add	r3, sp, #12
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	462a      	mov	r2, r5
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <_svfiprintf_r+0x1f8>)
 8004cb6:	a904      	add	r1, sp, #16
 8004cb8:	f000 f87c 	bl	8004db4 <_printf_i>
 8004cbc:	e7eb      	b.n	8004c96 <_svfiprintf_r+0x1c2>
 8004cbe:	bf00      	nop
 8004cc0:	080052da 	.word	0x080052da
 8004cc4:	080052e4 	.word	0x080052e4
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	08004a1d 	.word	0x08004a1d
 8004cd0:	080052e0 	.word	0x080052e0

08004cd4 <_printf_common>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	4616      	mov	r6, r2
 8004cda:	4699      	mov	r9, r3
 8004cdc:	688a      	ldr	r2, [r1, #8]
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	bfb8      	it	lt
 8004ce6:	4613      	movlt	r3, r2
 8004ce8:	6033      	str	r3, [r6, #0]
 8004cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cee:	460c      	mov	r4, r1
 8004cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cf4:	b10a      	cbz	r2, 8004cfa <_printf_common+0x26>
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	6033      	str	r3, [r6, #0]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	0699      	lsls	r1, r3, #26
 8004cfe:	bf42      	ittt	mi
 8004d00:	6833      	ldrmi	r3, [r6, #0]
 8004d02:	3302      	addmi	r3, #2
 8004d04:	6033      	strmi	r3, [r6, #0]
 8004d06:	6825      	ldr	r5, [r4, #0]
 8004d08:	f015 0506 	ands.w	r5, r5, #6
 8004d0c:	d106      	bne.n	8004d1c <_printf_common+0x48>
 8004d0e:	f104 0a19 	add.w	sl, r4, #25
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	6832      	ldr	r2, [r6, #0]
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	42ab      	cmp	r3, r5
 8004d1a:	dc28      	bgt.n	8004d6e <_printf_common+0x9a>
 8004d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d20:	1e13      	subs	r3, r2, #0
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	bf18      	it	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	0692      	lsls	r2, r2, #26
 8004d2a:	d42d      	bmi.n	8004d88 <_printf_common+0xb4>
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d020      	beq.n	8004d7c <_printf_common+0xa8>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	68e5      	ldr	r5, [r4, #12]
 8004d3e:	f003 0306 	and.w	r3, r3, #6
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	bf18      	it	ne
 8004d46:	2500      	movne	r5, #0
 8004d48:	6832      	ldr	r2, [r6, #0]
 8004d4a:	f04f 0600 	mov.w	r6, #0
 8004d4e:	68a3      	ldr	r3, [r4, #8]
 8004d50:	bf08      	it	eq
 8004d52:	1aad      	subeq	r5, r5, r2
 8004d54:	6922      	ldr	r2, [r4, #16]
 8004d56:	bf08      	it	eq
 8004d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bfc4      	itt	gt
 8004d60:	1a9b      	subgt	r3, r3, r2
 8004d62:	18ed      	addgt	r5, r5, r3
 8004d64:	341a      	adds	r4, #26
 8004d66:	42b5      	cmp	r5, r6
 8004d68:	d11a      	bne.n	8004da0 <_printf_common+0xcc>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e008      	b.n	8004d80 <_printf_common+0xac>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4652      	mov	r2, sl
 8004d72:	4649      	mov	r1, r9
 8004d74:	4638      	mov	r0, r7
 8004d76:	47c0      	blx	r8
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d103      	bne.n	8004d84 <_printf_common+0xb0>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d84:	3501      	adds	r5, #1
 8004d86:	e7c4      	b.n	8004d12 <_printf_common+0x3e>
 8004d88:	2030      	movs	r0, #48	; 0x30
 8004d8a:	18e1      	adds	r1, r4, r3
 8004d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d96:	4422      	add	r2, r4
 8004d98:	3302      	adds	r3, #2
 8004d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d9e:	e7c5      	b.n	8004d2c <_printf_common+0x58>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4622      	mov	r2, r4
 8004da4:	4649      	mov	r1, r9
 8004da6:	4638      	mov	r0, r7
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0e6      	beq.n	8004d7c <_printf_common+0xa8>
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7d9      	b.n	8004d66 <_printf_common+0x92>
	...

08004db4 <_printf_i>:
 8004db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	460c      	mov	r4, r1
 8004dba:	7e27      	ldrb	r7, [r4, #24]
 8004dbc:	4691      	mov	r9, r2
 8004dbe:	2f78      	cmp	r7, #120	; 0x78
 8004dc0:	4680      	mov	r8, r0
 8004dc2:	469a      	mov	sl, r3
 8004dc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dca:	d807      	bhi.n	8004ddc <_printf_i+0x28>
 8004dcc:	2f62      	cmp	r7, #98	; 0x62
 8004dce:	d80a      	bhi.n	8004de6 <_printf_i+0x32>
 8004dd0:	2f00      	cmp	r7, #0
 8004dd2:	f000 80d9 	beq.w	8004f88 <_printf_i+0x1d4>
 8004dd6:	2f58      	cmp	r7, #88	; 0x58
 8004dd8:	f000 80a4 	beq.w	8004f24 <_printf_i+0x170>
 8004ddc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004de4:	e03a      	b.n	8004e5c <_printf_i+0xa8>
 8004de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dea:	2b15      	cmp	r3, #21
 8004dec:	d8f6      	bhi.n	8004ddc <_printf_i+0x28>
 8004dee:	a001      	add	r0, pc, #4	; (adr r0, 8004df4 <_printf_i+0x40>)
 8004df0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e61 	.word	0x08004e61
 8004dfc:	08004ddd 	.word	0x08004ddd
 8004e00:	08004ddd 	.word	0x08004ddd
 8004e04:	08004ddd 	.word	0x08004ddd
 8004e08:	08004ddd 	.word	0x08004ddd
 8004e0c:	08004e61 	.word	0x08004e61
 8004e10:	08004ddd 	.word	0x08004ddd
 8004e14:	08004ddd 	.word	0x08004ddd
 8004e18:	08004ddd 	.word	0x08004ddd
 8004e1c:	08004ddd 	.word	0x08004ddd
 8004e20:	08004f6f 	.word	0x08004f6f
 8004e24:	08004e91 	.word	0x08004e91
 8004e28:	08004f51 	.word	0x08004f51
 8004e2c:	08004ddd 	.word	0x08004ddd
 8004e30:	08004ddd 	.word	0x08004ddd
 8004e34:	08004f91 	.word	0x08004f91
 8004e38:	08004ddd 	.word	0x08004ddd
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08004ddd 	.word	0x08004ddd
 8004e44:	08004ddd 	.word	0x08004ddd
 8004e48:	08004f59 	.word	0x08004f59
 8004e4c:	680b      	ldr	r3, [r1, #0]
 8004e4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	600a      	str	r2, [r1, #0]
 8004e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0a4      	b.n	8004faa <_printf_i+0x1f6>
 8004e60:	6825      	ldr	r5, [r4, #0]
 8004e62:	6808      	ldr	r0, [r1, #0]
 8004e64:	062e      	lsls	r6, r5, #24
 8004e66:	f100 0304 	add.w	r3, r0, #4
 8004e6a:	d50a      	bpl.n	8004e82 <_printf_i+0xce>
 8004e6c:	6805      	ldr	r5, [r0, #0]
 8004e6e:	600b      	str	r3, [r1, #0]
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	da03      	bge.n	8004e7c <_printf_i+0xc8>
 8004e74:	232d      	movs	r3, #45	; 0x2d
 8004e76:	426d      	negs	r5, r5
 8004e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e7c:	230a      	movs	r3, #10
 8004e7e:	485e      	ldr	r0, [pc, #376]	; (8004ff8 <_printf_i+0x244>)
 8004e80:	e019      	b.n	8004eb6 <_printf_i+0x102>
 8004e82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e86:	6805      	ldr	r5, [r0, #0]
 8004e88:	600b      	str	r3, [r1, #0]
 8004e8a:	bf18      	it	ne
 8004e8c:	b22d      	sxthne	r5, r5
 8004e8e:	e7ef      	b.n	8004e70 <_printf_i+0xbc>
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	6825      	ldr	r5, [r4, #0]
 8004e94:	1d18      	adds	r0, r3, #4
 8004e96:	6008      	str	r0, [r1, #0]
 8004e98:	0628      	lsls	r0, r5, #24
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_i+0xec>
 8004e9c:	681d      	ldr	r5, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <_printf_i+0xf2>
 8004ea0:	0669      	lsls	r1, r5, #25
 8004ea2:	d5fb      	bpl.n	8004e9c <_printf_i+0xe8>
 8004ea4:	881d      	ldrh	r5, [r3, #0]
 8004ea6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2308      	moveq	r3, #8
 8004eac:	230a      	movne	r3, #10
 8004eae:	4852      	ldr	r0, [pc, #328]	; (8004ff8 <_printf_i+0x244>)
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eb6:	6866      	ldr	r6, [r4, #4]
 8004eb8:	2e00      	cmp	r6, #0
 8004eba:	bfa8      	it	ge
 8004ebc:	6821      	ldrge	r1, [r4, #0]
 8004ebe:	60a6      	str	r6, [r4, #8]
 8004ec0:	bfa4      	itt	ge
 8004ec2:	f021 0104 	bicge.w	r1, r1, #4
 8004ec6:	6021      	strge	r1, [r4, #0]
 8004ec8:	b90d      	cbnz	r5, 8004ece <_printf_i+0x11a>
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	d04d      	beq.n	8004f6a <_printf_i+0x1b6>
 8004ece:	4616      	mov	r6, r2
 8004ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ed8:	5dc7      	ldrb	r7, [r0, r7]
 8004eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ede:	462f      	mov	r7, r5
 8004ee0:	42bb      	cmp	r3, r7
 8004ee2:	460d      	mov	r5, r1
 8004ee4:	d9f4      	bls.n	8004ed0 <_printf_i+0x11c>
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d10b      	bne.n	8004f02 <_printf_i+0x14e>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	07df      	lsls	r7, r3, #31
 8004eee:	d508      	bpl.n	8004f02 <_printf_i+0x14e>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	6861      	ldr	r1, [r4, #4]
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	bfde      	ittt	le
 8004ef8:	2330      	movle	r3, #48	; 0x30
 8004efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004efe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f02:	1b92      	subs	r2, r2, r6
 8004f04:	6122      	str	r2, [r4, #16]
 8004f06:	464b      	mov	r3, r9
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f8cd a000 	str.w	sl, [sp]
 8004f10:	aa03      	add	r2, sp, #12
 8004f12:	f7ff fedf 	bl	8004cd4 <_printf_common>
 8004f16:	3001      	adds	r0, #1
 8004f18:	d14c      	bne.n	8004fb4 <_printf_i+0x200>
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	b004      	add	sp, #16
 8004f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f24:	4834      	ldr	r0, [pc, #208]	; (8004ff8 <_printf_i+0x244>)
 8004f26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f2a:	680e      	ldr	r6, [r1, #0]
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f32:	061f      	lsls	r7, r3, #24
 8004f34:	600e      	str	r6, [r1, #0]
 8004f36:	d514      	bpl.n	8004f62 <_printf_i+0x1ae>
 8004f38:	07d9      	lsls	r1, r3, #31
 8004f3a:	bf44      	itt	mi
 8004f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f40:	6023      	strmi	r3, [r4, #0]
 8004f42:	b91d      	cbnz	r5, 8004f4c <_printf_i+0x198>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	f023 0320 	bic.w	r3, r3, #32
 8004f4a:	6023      	str	r3, [r4, #0]
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	e7af      	b.n	8004eb0 <_printf_i+0xfc>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	f043 0320 	orr.w	r3, r3, #32
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	2378      	movs	r3, #120	; 0x78
 8004f5a:	4828      	ldr	r0, [pc, #160]	; (8004ffc <_printf_i+0x248>)
 8004f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f60:	e7e3      	b.n	8004f2a <_printf_i+0x176>
 8004f62:	065e      	lsls	r6, r3, #25
 8004f64:	bf48      	it	mi
 8004f66:	b2ad      	uxthmi	r5, r5
 8004f68:	e7e6      	b.n	8004f38 <_printf_i+0x184>
 8004f6a:	4616      	mov	r6, r2
 8004f6c:	e7bb      	b.n	8004ee6 <_printf_i+0x132>
 8004f6e:	680b      	ldr	r3, [r1, #0]
 8004f70:	6826      	ldr	r6, [r4, #0]
 8004f72:	1d1d      	adds	r5, r3, #4
 8004f74:	6960      	ldr	r0, [r4, #20]
 8004f76:	600d      	str	r5, [r1, #0]
 8004f78:	0635      	lsls	r5, r6, #24
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	d501      	bpl.n	8004f82 <_printf_i+0x1ce>
 8004f7e:	6018      	str	r0, [r3, #0]
 8004f80:	e002      	b.n	8004f88 <_printf_i+0x1d4>
 8004f82:	0671      	lsls	r1, r6, #25
 8004f84:	d5fb      	bpl.n	8004f7e <_printf_i+0x1ca>
 8004f86:	8018      	strh	r0, [r3, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4616      	mov	r6, r2
 8004f8c:	6123      	str	r3, [r4, #16]
 8004f8e:	e7ba      	b.n	8004f06 <_printf_i+0x152>
 8004f90:	680b      	ldr	r3, [r1, #0]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	600a      	str	r2, [r1, #0]
 8004f96:	681e      	ldr	r6, [r3, #0]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	6862      	ldr	r2, [r4, #4]
 8004f9e:	f000 f82f 	bl	8005000 <memchr>
 8004fa2:	b108      	cbz	r0, 8004fa8 <_printf_i+0x1f4>
 8004fa4:	1b80      	subs	r0, r0, r6
 8004fa6:	6060      	str	r0, [r4, #4]
 8004fa8:	6863      	ldr	r3, [r4, #4]
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	2300      	movs	r3, #0
 8004fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb2:	e7a8      	b.n	8004f06 <_printf_i+0x152>
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	4640      	mov	r0, r8
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	47d0      	blx	sl
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d0ab      	beq.n	8004f1a <_printf_i+0x166>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	079b      	lsls	r3, r3, #30
 8004fc6:	d413      	bmi.n	8004ff0 <_printf_i+0x23c>
 8004fc8:	68e0      	ldr	r0, [r4, #12]
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	4298      	cmp	r0, r3
 8004fce:	bfb8      	it	lt
 8004fd0:	4618      	movlt	r0, r3
 8004fd2:	e7a4      	b.n	8004f1e <_printf_i+0x16a>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4640      	mov	r0, r8
 8004fdc:	47d0      	blx	sl
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d09b      	beq.n	8004f1a <_printf_i+0x166>
 8004fe2:	3501      	adds	r5, #1
 8004fe4:	68e3      	ldr	r3, [r4, #12]
 8004fe6:	9903      	ldr	r1, [sp, #12]
 8004fe8:	1a5b      	subs	r3, r3, r1
 8004fea:	42ab      	cmp	r3, r5
 8004fec:	dcf2      	bgt.n	8004fd4 <_printf_i+0x220>
 8004fee:	e7eb      	b.n	8004fc8 <_printf_i+0x214>
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	f104 0619 	add.w	r6, r4, #25
 8004ff6:	e7f5      	b.n	8004fe4 <_printf_i+0x230>
 8004ff8:	080052eb 	.word	0x080052eb
 8004ffc:	080052fc 	.word	0x080052fc

08005000 <memchr>:
 8005000:	4603      	mov	r3, r0
 8005002:	b510      	push	{r4, lr}
 8005004:	b2c9      	uxtb	r1, r1
 8005006:	4402      	add	r2, r0
 8005008:	4293      	cmp	r3, r2
 800500a:	4618      	mov	r0, r3
 800500c:	d101      	bne.n	8005012 <memchr+0x12>
 800500e:	2000      	movs	r0, #0
 8005010:	e003      	b.n	800501a <memchr+0x1a>
 8005012:	7804      	ldrb	r4, [r0, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	428c      	cmp	r4, r1
 8005018:	d1f6      	bne.n	8005008 <memchr+0x8>
 800501a:	bd10      	pop	{r4, pc}

0800501c <memcpy>:
 800501c:	440a      	add	r2, r1
 800501e:	4291      	cmp	r1, r2
 8005020:	f100 33ff 	add.w	r3, r0, #4294967295
 8005024:	d100      	bne.n	8005028 <memcpy+0xc>
 8005026:	4770      	bx	lr
 8005028:	b510      	push	{r4, lr}
 800502a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800502e:	4291      	cmp	r1, r2
 8005030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005034:	d1f9      	bne.n	800502a <memcpy+0xe>
 8005036:	bd10      	pop	{r4, pc}

08005038 <memmove>:
 8005038:	4288      	cmp	r0, r1
 800503a:	b510      	push	{r4, lr}
 800503c:	eb01 0402 	add.w	r4, r1, r2
 8005040:	d902      	bls.n	8005048 <memmove+0x10>
 8005042:	4284      	cmp	r4, r0
 8005044:	4623      	mov	r3, r4
 8005046:	d807      	bhi.n	8005058 <memmove+0x20>
 8005048:	1e43      	subs	r3, r0, #1
 800504a:	42a1      	cmp	r1, r4
 800504c:	d008      	beq.n	8005060 <memmove+0x28>
 800504e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005056:	e7f8      	b.n	800504a <memmove+0x12>
 8005058:	4601      	mov	r1, r0
 800505a:	4402      	add	r2, r0
 800505c:	428a      	cmp	r2, r1
 800505e:	d100      	bne.n	8005062 <memmove+0x2a>
 8005060:	bd10      	pop	{r4, pc}
 8005062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800506a:	e7f7      	b.n	800505c <memmove+0x24>

0800506c <_free_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4605      	mov	r5, r0
 8005070:	2900      	cmp	r1, #0
 8005072:	d043      	beq.n	80050fc <_free_r+0x90>
 8005074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005078:	1f0c      	subs	r4, r1, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	bfb8      	it	lt
 800507e:	18e4      	addlt	r4, r4, r3
 8005080:	f000 f8d0 	bl	8005224 <__malloc_lock>
 8005084:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <_free_r+0x94>)
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	4610      	mov	r0, r2
 800508a:	b933      	cbnz	r3, 800509a <_free_r+0x2e>
 800508c:	6063      	str	r3, [r4, #4]
 800508e:	6014      	str	r4, [r2, #0]
 8005090:	4628      	mov	r0, r5
 8005092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005096:	f000 b8cb 	b.w	8005230 <__malloc_unlock>
 800509a:	42a3      	cmp	r3, r4
 800509c:	d90a      	bls.n	80050b4 <_free_r+0x48>
 800509e:	6821      	ldr	r1, [r4, #0]
 80050a0:	1862      	adds	r2, r4, r1
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bf01      	itttt	eq
 80050a6:	681a      	ldreq	r2, [r3, #0]
 80050a8:	685b      	ldreq	r3, [r3, #4]
 80050aa:	1852      	addeq	r2, r2, r1
 80050ac:	6022      	streq	r2, [r4, #0]
 80050ae:	6063      	str	r3, [r4, #4]
 80050b0:	6004      	str	r4, [r0, #0]
 80050b2:	e7ed      	b.n	8005090 <_free_r+0x24>
 80050b4:	461a      	mov	r2, r3
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	b10b      	cbz	r3, 80050be <_free_r+0x52>
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	d9fa      	bls.n	80050b4 <_free_r+0x48>
 80050be:	6811      	ldr	r1, [r2, #0]
 80050c0:	1850      	adds	r0, r2, r1
 80050c2:	42a0      	cmp	r0, r4
 80050c4:	d10b      	bne.n	80050de <_free_r+0x72>
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	4401      	add	r1, r0
 80050ca:	1850      	adds	r0, r2, r1
 80050cc:	4283      	cmp	r3, r0
 80050ce:	6011      	str	r1, [r2, #0]
 80050d0:	d1de      	bne.n	8005090 <_free_r+0x24>
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4401      	add	r1, r0
 80050d8:	6011      	str	r1, [r2, #0]
 80050da:	6053      	str	r3, [r2, #4]
 80050dc:	e7d8      	b.n	8005090 <_free_r+0x24>
 80050de:	d902      	bls.n	80050e6 <_free_r+0x7a>
 80050e0:	230c      	movs	r3, #12
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	e7d4      	b.n	8005090 <_free_r+0x24>
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1821      	adds	r1, r4, r0
 80050ea:	428b      	cmp	r3, r1
 80050ec:	bf01      	itttt	eq
 80050ee:	6819      	ldreq	r1, [r3, #0]
 80050f0:	685b      	ldreq	r3, [r3, #4]
 80050f2:	1809      	addeq	r1, r1, r0
 80050f4:	6021      	streq	r1, [r4, #0]
 80050f6:	6063      	str	r3, [r4, #4]
 80050f8:	6054      	str	r4, [r2, #4]
 80050fa:	e7c9      	b.n	8005090 <_free_r+0x24>
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
 80050fe:	bf00      	nop
 8005100:	20000228 	.word	0x20000228

08005104 <_malloc_r>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	1ccd      	adds	r5, r1, #3
 8005108:	f025 0503 	bic.w	r5, r5, #3
 800510c:	3508      	adds	r5, #8
 800510e:	2d0c      	cmp	r5, #12
 8005110:	bf38      	it	cc
 8005112:	250c      	movcc	r5, #12
 8005114:	2d00      	cmp	r5, #0
 8005116:	4606      	mov	r6, r0
 8005118:	db01      	blt.n	800511e <_malloc_r+0x1a>
 800511a:	42a9      	cmp	r1, r5
 800511c:	d903      	bls.n	8005126 <_malloc_r+0x22>
 800511e:	230c      	movs	r3, #12
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	2000      	movs	r0, #0
 8005124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005126:	f000 f87d 	bl	8005224 <__malloc_lock>
 800512a:	4921      	ldr	r1, [pc, #132]	; (80051b0 <_malloc_r+0xac>)
 800512c:	680a      	ldr	r2, [r1, #0]
 800512e:	4614      	mov	r4, r2
 8005130:	b99c      	cbnz	r4, 800515a <_malloc_r+0x56>
 8005132:	4f20      	ldr	r7, [pc, #128]	; (80051b4 <_malloc_r+0xb0>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	b923      	cbnz	r3, 8005142 <_malloc_r+0x3e>
 8005138:	4621      	mov	r1, r4
 800513a:	4630      	mov	r0, r6
 800513c:	f000 f862 	bl	8005204 <_sbrk_r>
 8005140:	6038      	str	r0, [r7, #0]
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f85d 	bl	8005204 <_sbrk_r>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	d123      	bne.n	8005196 <_malloc_r+0x92>
 800514e:	230c      	movs	r3, #12
 8005150:	4630      	mov	r0, r6
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	f000 f86c 	bl	8005230 <__malloc_unlock>
 8005158:	e7e3      	b.n	8005122 <_malloc_r+0x1e>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	1b5b      	subs	r3, r3, r5
 800515e:	d417      	bmi.n	8005190 <_malloc_r+0x8c>
 8005160:	2b0b      	cmp	r3, #11
 8005162:	d903      	bls.n	800516c <_malloc_r+0x68>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	441c      	add	r4, r3
 8005168:	6025      	str	r5, [r4, #0]
 800516a:	e004      	b.n	8005176 <_malloc_r+0x72>
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	42a2      	cmp	r2, r4
 8005170:	bf0c      	ite	eq
 8005172:	600b      	streq	r3, [r1, #0]
 8005174:	6053      	strne	r3, [r2, #4]
 8005176:	4630      	mov	r0, r6
 8005178:	f000 f85a 	bl	8005230 <__malloc_unlock>
 800517c:	f104 000b 	add.w	r0, r4, #11
 8005180:	1d23      	adds	r3, r4, #4
 8005182:	f020 0007 	bic.w	r0, r0, #7
 8005186:	1ac2      	subs	r2, r0, r3
 8005188:	d0cc      	beq.n	8005124 <_malloc_r+0x20>
 800518a:	1a1b      	subs	r3, r3, r0
 800518c:	50a3      	str	r3, [r4, r2]
 800518e:	e7c9      	b.n	8005124 <_malloc_r+0x20>
 8005190:	4622      	mov	r2, r4
 8005192:	6864      	ldr	r4, [r4, #4]
 8005194:	e7cc      	b.n	8005130 <_malloc_r+0x2c>
 8005196:	1cc4      	adds	r4, r0, #3
 8005198:	f024 0403 	bic.w	r4, r4, #3
 800519c:	42a0      	cmp	r0, r4
 800519e:	d0e3      	beq.n	8005168 <_malloc_r+0x64>
 80051a0:	1a21      	subs	r1, r4, r0
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 f82e 	bl	8005204 <_sbrk_r>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d1dd      	bne.n	8005168 <_malloc_r+0x64>
 80051ac:	e7cf      	b.n	800514e <_malloc_r+0x4a>
 80051ae:	bf00      	nop
 80051b0:	20000228 	.word	0x20000228
 80051b4:	2000022c 	.word	0x2000022c

080051b8 <_realloc_r>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	4607      	mov	r7, r0
 80051bc:	4614      	mov	r4, r2
 80051be:	460e      	mov	r6, r1
 80051c0:	b921      	cbnz	r1, 80051cc <_realloc_r+0x14>
 80051c2:	4611      	mov	r1, r2
 80051c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051c8:	f7ff bf9c 	b.w	8005104 <_malloc_r>
 80051cc:	b922      	cbnz	r2, 80051d8 <_realloc_r+0x20>
 80051ce:	f7ff ff4d 	bl	800506c <_free_r>
 80051d2:	4625      	mov	r5, r4
 80051d4:	4628      	mov	r0, r5
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d8:	f000 f830 	bl	800523c <_malloc_usable_size_r>
 80051dc:	42a0      	cmp	r0, r4
 80051de:	d20f      	bcs.n	8005200 <_realloc_r+0x48>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4638      	mov	r0, r7
 80051e4:	f7ff ff8e 	bl	8005104 <_malloc_r>
 80051e8:	4605      	mov	r5, r0
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d0f2      	beq.n	80051d4 <_realloc_r+0x1c>
 80051ee:	4631      	mov	r1, r6
 80051f0:	4622      	mov	r2, r4
 80051f2:	f7ff ff13 	bl	800501c <memcpy>
 80051f6:	4631      	mov	r1, r6
 80051f8:	4638      	mov	r0, r7
 80051fa:	f7ff ff37 	bl	800506c <_free_r>
 80051fe:	e7e9      	b.n	80051d4 <_realloc_r+0x1c>
 8005200:	4635      	mov	r5, r6
 8005202:	e7e7      	b.n	80051d4 <_realloc_r+0x1c>

08005204 <_sbrk_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	2300      	movs	r3, #0
 8005208:	4d05      	ldr	r5, [pc, #20]	; (8005220 <_sbrk_r+0x1c>)
 800520a:	4604      	mov	r4, r0
 800520c:	4608      	mov	r0, r1
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	f7fc fdd2 	bl	8001db8 <_sbrk>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d102      	bne.n	800521e <_sbrk_r+0x1a>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	b103      	cbz	r3, 800521e <_sbrk_r+0x1a>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	20000318 	.word	0x20000318

08005224 <__malloc_lock>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__malloc_lock+0x8>)
 8005226:	f000 b811 	b.w	800524c <__retarget_lock_acquire_recursive>
 800522a:	bf00      	nop
 800522c:	20000320 	.word	0x20000320

08005230 <__malloc_unlock>:
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <__malloc_unlock+0x8>)
 8005232:	f000 b80c 	b.w	800524e <__retarget_lock_release_recursive>
 8005236:	bf00      	nop
 8005238:	20000320 	.word	0x20000320

0800523c <_malloc_usable_size_r>:
 800523c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005240:	1f18      	subs	r0, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	bfbc      	itt	lt
 8005246:	580b      	ldrlt	r3, [r1, r0]
 8005248:	18c0      	addlt	r0, r0, r3
 800524a:	4770      	bx	lr

0800524c <__retarget_lock_acquire_recursive>:
 800524c:	4770      	bx	lr

0800524e <__retarget_lock_release_recursive>:
 800524e:	4770      	bx	lr

08005250 <_init>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr

0800525c <_fini>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	bf00      	nop
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr
