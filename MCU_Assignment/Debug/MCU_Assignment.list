
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c0  080036c0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080036c0  080036c0  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036c0  080036c0  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080036c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000003c  08003704  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003704  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c9  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228f  00000000  00000000  0002ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017656  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1ee  00000000  00000000  00047796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848e2  00000000  00000000  00054984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  000d92bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003684 	.word	0x08003684

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08003684 	.word	0x08003684

0800014c <fsm_automatic_run>:
 *      Author: olkmphy
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4ba2      	ldr	r3, [pc, #648]	; (80003dc <fsm_automatic_run+0x290>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b17      	cmp	r3, #23
 8000158:	f200 8138 	bhi.w	80003cc <fsm_automatic_run+0x280>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	080001c5 	.word	0x080001c5
 8000168:	080003cd 	.word	0x080003cd
 800016c:	080003cd 	.word	0x080003cd
 8000170:	080003cd 	.word	0x080003cd
 8000174:	080003cd 	.word	0x080003cd
 8000178:	080003cd 	.word	0x080003cd
 800017c:	080003cd 	.word	0x080003cd
 8000180:	080003cd 	.word	0x080003cd
 8000184:	080003cd 	.word	0x080003cd
 8000188:	080003cd 	.word	0x080003cd
 800018c:	080003cd 	.word	0x080003cd
 8000190:	080003cd 	.word	0x080003cd
 8000194:	080003cd 	.word	0x080003cd
 8000198:	080003cd 	.word	0x080003cd
 800019c:	080003cd 	.word	0x080003cd
 80001a0:	080003cd 	.word	0x080003cd
 80001a4:	080003cd 	.word	0x080003cd
 80001a8:	080003cd 	.word	0x080003cd
 80001ac:	080003cd 	.word	0x080003cd
 80001b0:	080003cd 	.word	0x080003cd
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	0800024f 	.word	0x0800024f
 80001bc:	080002d9 	.word	0x080002d9
 80001c0:	08000345 	.word	0x08000345
	case INIT:
		//TODO
		status = RED_GREEN;
 80001c4:	4b85      	ldr	r3, [pc, #532]	; (80003dc <fsm_automatic_run+0x290>)
 80001c6:	2215      	movs	r2, #21
 80001c8:	601a      	str	r2, [r3, #0]
		setTimer(0, durationGREEN);
 80001ca:	4b85      	ldr	r3, [pc, #532]	; (80003e0 <fsm_automatic_run+0x294>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4619      	mov	r1, r3
 80001d0:	2000      	movs	r0, #0
 80001d2:	f001 fa2f 	bl	8001634 <setTimer>
		setTimerSecond(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f001 fa0f 	bl	80015fc <setTimerSecond>
		break;
 80001de:	e110      	b.n	8000402 <fsm_automatic_run+0x2b6>
	case RED_GREEN:
		//TODO
		Traffic_setColor(1, AUTO_RED);
 80001e0:	2102      	movs	r1, #2
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 fc58 	bl	8000a98 <Traffic_setColor>
		Traffic_setColor(2, AUTO_GREEN);
 80001e8:	2103      	movs	r1, #3
 80001ea:	2002      	movs	r0, #2
 80001ec:	f000 fc54 	bl	8000a98 <Traffic_setColor>
		if (timerSecond == 1){
 80001f0:	4b7c      	ldr	r3, [pc, #496]	; (80003e4 <fsm_automatic_run+0x298>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d11b      	bne.n	8000230 <fsm_automatic_run+0xe4>
			setTimerSecond(1000);
 80001f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fc:	f001 f9fe 	bl	80015fc <setTimerSecond>
			timerTraffic1--;
 8000200:	4b79      	ldr	r3, [pc, #484]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	4a78      	ldr	r2, [pc, #480]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000208:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800020a:	4b78      	ldr	r3, [pc, #480]	; (80003ec <fsm_automatic_run+0x2a0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3b01      	subs	r3, #1
 8000210:	4a76      	ldr	r2, [pc, #472]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000212:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationYELLOW / 1000;
 8000214:	4b75      	ldr	r3, [pc, #468]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	dc09      	bgt.n	8000230 <fsm_automatic_run+0xe4>
 800021c:	4b74      	ldr	r3, [pc, #464]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a74      	ldr	r2, [pc, #464]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000222:	fb82 1203 	smull	r1, r2, r2, r3
 8000226:	1192      	asrs	r2, r2, #6
 8000228:	17db      	asrs	r3, r3, #31
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	4a6f      	ldr	r2, [pc, #444]	; (80003ec <fsm_automatic_run+0x2a0>)
 800022e:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 8000230:	4b71      	ldr	r3, [pc, #452]	; (80003f8 <fsm_automatic_run+0x2ac>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	f040 80cb 	bne.w	80003d0 <fsm_automatic_run+0x284>
			setTimer(0, durationYELLOW);
 800023a:	4b6d      	ldr	r3, [pc, #436]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2000      	movs	r0, #0
 8000242:	f001 f9f7 	bl	8001634 <setTimer>
			status = RED_YELLOW;
 8000246:	4b65      	ldr	r3, [pc, #404]	; (80003dc <fsm_automatic_run+0x290>)
 8000248:	2216      	movs	r2, #22
 800024a:	601a      	str	r2, [r3, #0]
		}
		break;
 800024c:	e0c0      	b.n	80003d0 <fsm_automatic_run+0x284>
	case RED_YELLOW:
		//TODO
		Traffic_setColor(1, AUTO_RED);
 800024e:	2102      	movs	r1, #2
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fc21 	bl	8000a98 <Traffic_setColor>
		Traffic_setColor(2, AUTO_YELLOW);
 8000256:	2104      	movs	r1, #4
 8000258:	2002      	movs	r0, #2
 800025a:	f000 fc1d 	bl	8000a98 <Traffic_setColor>
		if (timerSecond == 1){
 800025e:	4b61      	ldr	r3, [pc, #388]	; (80003e4 <fsm_automatic_run+0x298>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d129      	bne.n	80002ba <fsm_automatic_run+0x16e>
			setTimerSecond(1000);
 8000266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026a:	f001 f9c7 	bl	80015fc <setTimerSecond>
			timerTraffic1--;
 800026e:	4b5e      	ldr	r3, [pc, #376]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a5c      	ldr	r2, [pc, #368]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000276:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationGREEN / 1000;
 8000278:	4b5b      	ldr	r3, [pc, #364]	; (80003e8 <fsm_automatic_run+0x29c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	dc09      	bgt.n	8000294 <fsm_automatic_run+0x148>
 8000280:	4b57      	ldr	r3, [pc, #348]	; (80003e0 <fsm_automatic_run+0x294>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a5b      	ldr	r2, [pc, #364]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000286:	fb82 1203 	smull	r1, r2, r2, r3
 800028a:	1192      	asrs	r2, r2, #6
 800028c:	17db      	asrs	r3, r3, #31
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	4a55      	ldr	r2, [pc, #340]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000292:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 8000294:	4b55      	ldr	r3, [pc, #340]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3b01      	subs	r3, #1
 800029a:	4a54      	ldr	r2, [pc, #336]	; (80003ec <fsm_automatic_run+0x2a0>)
 800029c:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationRED / 1000;
 800029e:	4b53      	ldr	r3, [pc, #332]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	dc09      	bgt.n	80002ba <fsm_automatic_run+0x16e>
 80002a6:	4b55      	ldr	r3, [pc, #340]	; (80003fc <fsm_automatic_run+0x2b0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a52      	ldr	r2, [pc, #328]	; (80003f4 <fsm_automatic_run+0x2a8>)
 80002ac:	fb82 1203 	smull	r1, r2, r2, r3
 80002b0:	1192      	asrs	r2, r2, #6
 80002b2:	17db      	asrs	r3, r3, #31
 80002b4:	1ad3      	subs	r3, r2, r3
 80002b6:	4a4d      	ldr	r2, [pc, #308]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002b8:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 80002ba:	4b4f      	ldr	r3, [pc, #316]	; (80003f8 <fsm_automatic_run+0x2ac>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	f040 8088 	bne.w	80003d4 <fsm_automatic_run+0x288>
			setTimer(0, durationGREEN);
 80002c4:	4b46      	ldr	r3, [pc, #280]	; (80003e0 <fsm_automatic_run+0x294>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f001 f9b2 	bl	8001634 <setTimer>
			status = GREEN_RED;
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <fsm_automatic_run+0x290>)
 80002d2:	2217      	movs	r2, #23
 80002d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80002d6:	e07d      	b.n	80003d4 <fsm_automatic_run+0x288>
	case GREEN_RED:
		Traffic_setColor(1, AUTO_GREEN);
 80002d8:	2103      	movs	r1, #3
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 fbdc 	bl	8000a98 <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 80002e0:	2102      	movs	r1, #2
 80002e2:	2002      	movs	r0, #2
 80002e4:	f000 fbd8 	bl	8000a98 <Traffic_setColor>
		if (timerSecond == 1){
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <fsm_automatic_run+0x298>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d11b      	bne.n	8000328 <fsm_automatic_run+0x1dc>
			setTimerSecond(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f001 f982 	bl	80015fc <setTimerSecond>
			timerTraffic1--;
 80002f8:	4b3b      	ldr	r3, [pc, #236]	; (80003e8 <fsm_automatic_run+0x29c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	4a3a      	ldr	r2, [pc, #232]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000300:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationYELLOW / 1000;
 8000302:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	dc09      	bgt.n	800031e <fsm_automatic_run+0x1d2>
 800030a:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000310:	fb82 1203 	smull	r1, r2, r2, r3
 8000314:	1192      	asrs	r2, r2, #6
 8000316:	17db      	asrs	r3, r3, #31
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	4a33      	ldr	r2, [pc, #204]	; (80003e8 <fsm_automatic_run+0x29c>)
 800031c:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800031e:	4b33      	ldr	r3, [pc, #204]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	3b01      	subs	r3, #1
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000326:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 8000328:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <fsm_automatic_run+0x2ac>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d153      	bne.n	80003d8 <fsm_automatic_run+0x28c>
			setTimer(0, durationYELLOW);
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <fsm_automatic_run+0x2a4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4619      	mov	r1, r3
 8000336:	2000      	movs	r0, #0
 8000338:	f001 f97c 	bl	8001634 <setTimer>
			status = YELLOW_RED;
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <fsm_automatic_run+0x290>)
 800033e:	2218      	movs	r2, #24
 8000340:	601a      	str	r2, [r3, #0]
		}
		break;
 8000342:	e049      	b.n	80003d8 <fsm_automatic_run+0x28c>
	case YELLOW_RED:
		Traffic_setColor(1, AUTO_YELLOW);
 8000344:	2104      	movs	r1, #4
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fba6 	bl	8000a98 <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 800034c:	2102      	movs	r1, #2
 800034e:	2002      	movs	r0, #2
 8000350:	f000 fba2 	bl	8000a98 <Traffic_setColor>
		if (timerSecond == 1){
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <fsm_automatic_run+0x298>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d129      	bne.n	80003b0 <fsm_automatic_run+0x264>
			setTimerSecond(1000);
 800035c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000360:	f001 f94c 	bl	80015fc <setTimerSecond>
			timerTraffic1--;
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3b01      	subs	r3, #1
 800036a:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <fsm_automatic_run+0x29c>)
 800036c:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationRED / 1000;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	dc09      	bgt.n	800038a <fsm_automatic_run+0x23e>
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <fsm_automatic_run+0x2b0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <fsm_automatic_run+0x2a8>)
 800037c:	fb82 1203 	smull	r1, r2, r2, r3
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	17db      	asrs	r3, r3, #31
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000388:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <fsm_automatic_run+0x2a0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3b01      	subs	r3, #1
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000392:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationGREEN / 1000;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	dc09      	bgt.n	80003b0 <fsm_automatic_run+0x264>
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <fsm_automatic_run+0x294>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <fsm_automatic_run+0x2a8>)
 80003a2:	fb82 1203 	smull	r1, r2, r2, r3
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	17db      	asrs	r3, r3, #31
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <fsm_automatic_run+0x2a0>)
 80003ae:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <fsm_automatic_run+0x2ac>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d123      	bne.n	8000400 <fsm_automatic_run+0x2b4>
			setTimer(0, durationGREEN);
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <fsm_automatic_run+0x294>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	2000      	movs	r0, #0
 80003c0:	f001 f938 	bl	8001634 <setTimer>
			status = RED_GREEN;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <fsm_automatic_run+0x290>)
 80003c6:	2215      	movs	r2, #21
 80003c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80003ca:	e019      	b.n	8000400 <fsm_automatic_run+0x2b4>
	default:
		break;
 80003cc:	bf00      	nop
 80003ce:	e018      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d0:	bf00      	nop
 80003d2:	e016      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d4:	bf00      	nop
 80003d6:	e014      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d8:	bf00      	nop
 80003da:	e012      	b.n	8000402 <fsm_automatic_run+0x2b6>
 80003dc:	20000004 	.word	0x20000004
 80003e0:	20000010 	.word	0x20000010
 80003e4:	20000188 	.word	0x20000188
 80003e8:	20000060 	.word	0x20000060
 80003ec:	20000064 	.word	0x20000064
 80003f0:	2000000c 	.word	0x2000000c
 80003f4:	10624dd3 	.word	0x10624dd3
 80003f8:	20000190 	.word	0x20000190
 80003fc:	20000008 	.word	0x20000008
		break;
 8000400:	bf00      	nop
	}
	// MODE BUTTON
	if(isButtonPressed(1) == 1){
 8000402:	2001      	movs	r0, #1
 8000404:	f000 fcea 	bl	8000ddc <isButtonPressed>
 8000408:	4603      	mov	r3, r0
 800040a:	2b01      	cmp	r3, #1
 800040c:	d148      	bne.n	80004a0 <fsm_automatic_run+0x354>
		if(status == RED_GREEN || status == RED_YELLOW || status == GREEN_RED || status == YELLOW_RED){
 800040e:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <fsm_automatic_run+0x374>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b15      	cmp	r3, #21
 8000414:	d00b      	beq.n	800042e <fsm_automatic_run+0x2e2>
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <fsm_automatic_run+0x374>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b16      	cmp	r3, #22
 800041c:	d007      	beq.n	800042e <fsm_automatic_run+0x2e2>
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <fsm_automatic_run+0x374>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b17      	cmp	r3, #23
 8000424:	d003      	beq.n	800042e <fsm_automatic_run+0x2e2>
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <fsm_automatic_run+0x374>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b18      	cmp	r3, #24
 800042c:	d134      	bne.n	8000498 <fsm_automatic_run+0x34c>
			status = MOD_RED;
 800042e:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <fsm_automatic_run+0x374>)
 8000430:	220b      	movs	r2, #11
 8000432:	601a      	str	r2, [r3, #0]
			setTimer(1, 10); // timer for blinky
 8000434:	210a      	movs	r1, #10
 8000436:	2001      	movs	r0, #1
 8000438:	f001 f8fc 	bl	8001634 <setTimer>
			Traffic_setColor(1, AUTO_RED);
 800043c:	2102      	movs	r1, #2
 800043e:	2001      	movs	r0, #1
 8000440:	f000 fb2a 	bl	8000a98 <Traffic_setColor>
			Traffic_setColor(2, AUTO_RED);
 8000444:	2102      	movs	r1, #2
 8000446:	2002      	movs	r0, #2
 8000448:	f000 fb26 	bl	8000a98 <Traffic_setColor>
			RED_sec = durationRED / 1000;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <fsm_automatic_run+0x378>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <fsm_automatic_run+0x37c>)
 8000452:	fb82 1203 	smull	r1, r2, r2, r3
 8000456:	1192      	asrs	r2, r2, #6
 8000458:	17db      	asrs	r3, r3, #31
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <fsm_automatic_run+0x380>)
 800045e:	6013      	str	r3, [r2, #0]
			YELLOW_sec = durationYELLOW / 1000;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <fsm_automatic_run+0x384>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <fsm_automatic_run+0x37c>)
 8000466:	fb82 1203 	smull	r1, r2, r2, r3
 800046a:	1192      	asrs	r2, r2, #6
 800046c:	17db      	asrs	r3, r3, #31
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <fsm_automatic_run+0x388>)
 8000472:	6013      	str	r3, [r2, #0]
			GREEN_sec = durationGREEN / 1000;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <fsm_automatic_run+0x38c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <fsm_automatic_run+0x37c>)
 800047a:	fb82 1203 	smull	r1, r2, r2, r3
 800047e:	1192      	asrs	r2, r2, #6
 8000480:	17db      	asrs	r3, r3, #31
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	4a15      	ldr	r2, [pc, #84]	; (80004dc <fsm_automatic_run+0x390>)
 8000486:	6013      	str	r3, [r2, #0]
			timerTraffic1 = RED_sec;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <fsm_automatic_run+0x380>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <fsm_automatic_run+0x394>)
 800048e:	6013      	str	r3, [r2, #0]
			timerTraffic2 = 2;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <fsm_automatic_run+0x398>)
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
		pedestrianFlag = 1;
		// Set timer for off pedestrian light...
		setTimer(2, 15000); // 15 secs
	}

}
 8000496:	e011      	b.n	80004bc <fsm_automatic_run+0x370>
		else setBackButtonFlag(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f000 fcc1 	bl	8000e20 <setBackButtonFlag>
}
 800049e:	e00d      	b.n	80004bc <fsm_automatic_run+0x370>
	else if(isButtonPressed(0) == 1){
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fc9b 	bl	8000ddc <isButtonPressed>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d107      	bne.n	80004bc <fsm_automatic_run+0x370>
		pedestrianFlag = 1;
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <fsm_automatic_run+0x39c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	601a      	str	r2, [r3, #0]
		setTimer(2, 15000); // 15 secs
 80004b2:	f643 2198 	movw	r1, #15000	; 0x3a98
 80004b6:	2002      	movs	r0, #2
 80004b8:	f001 f8bc 	bl	8001634 <setTimer>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000004 	.word	0x20000004
 80004c4:	20000008 	.word	0x20000008
 80004c8:	10624dd3 	.word	0x10624dd3
 80004cc:	200001c0 	.word	0x200001c0
 80004d0:	2000000c 	.word	0x2000000c
 80004d4:	200001bc 	.word	0x200001bc
 80004d8:	20000010 	.word	0x20000010
 80004dc:	200001b8 	.word	0x200001b8
 80004e0:	20000060 	.word	0x20000060
 80004e4:	20000064 	.word	0x20000064
 80004e8:	20000058 	.word	0x20000058

080004ec <fsm_manual_run>:
 *  Created on: Nov 29, 2023
 *      Author: olkmphy
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	switch(status){
 80004f2:	4ba4      	ldr	r3, [pc, #656]	; (8000784 <fsm_manual_run+0x298>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b0d      	cmp	r3, #13
 80004f8:	f000 80be 	beq.w	8000678 <fsm_manual_run+0x18c>
 80004fc:	2b0d      	cmp	r3, #13
 80004fe:	f300 8135 	bgt.w	800076c <fsm_manual_run+0x280>
 8000502:	2b0b      	cmp	r3, #11
 8000504:	d002      	beq.n	800050c <fsm_manual_run+0x20>
 8000506:	2b0c      	cmp	r3, #12
 8000508:	d055      	beq.n	80005b6 <fsm_manual_run+0xca>
				setTimerSecond(1000);
				led_index = 0;
			}
			break;
		default:
			break;
 800050a:	e12f      	b.n	800076c <fsm_manual_run+0x280>
			if(timerFlag[1] == 1){
 800050c:	4b9e      	ldr	r3, [pc, #632]	; (8000788 <fsm_manual_run+0x29c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d10b      	bne.n	800052c <fsm_manual_run+0x40>
				setTimer(1, 250); // blink every 0.25s
 8000514:	21fa      	movs	r1, #250	; 0xfa
 8000516:	2001      	movs	r0, #1
 8000518:	f001 f88c 	bl	8001634 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_RED);
 800051c:	2102      	movs	r1, #2
 800051e:	2007      	movs	r0, #7
 8000520:	f000 fa28 	bl	8000974 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_RED);
 8000524:	2102      	movs	r1, #2
 8000526:	2008      	movs	r0, #8
 8000528:	f000 fa24 	bl	8000974 <blinkLEDs>
			if(isButtonPressed(2) == 1){
 800052c:	2002      	movs	r0, #2
 800052e:	f000 fc55 	bl	8000ddc <isButtonPressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b01      	cmp	r3, #1
 8000536:	d114      	bne.n	8000562 <fsm_manual_run+0x76>
				RED_sec++;
 8000538:	4b94      	ldr	r3, [pc, #592]	; (800078c <fsm_manual_run+0x2a0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a93      	ldr	r2, [pc, #588]	; (800078c <fsm_manual_run+0x2a0>)
 8000540:	6013      	str	r3, [r2, #0]
				if(RED_sec >= 100) {
 8000542:	4b92      	ldr	r3, [pc, #584]	; (800078c <fsm_manual_run+0x2a0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b63      	cmp	r3, #99	; 0x63
 8000548:	dd06      	ble.n	8000558 <fsm_manual_run+0x6c>
					RED_sec = 1;
 800054a:	4b90      	ldr	r3, [pc, #576]	; (800078c <fsm_manual_run+0x2a0>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 8000550:	4b8f      	ldr	r3, [pc, #572]	; (8000790 <fsm_manual_run+0x2a4>)
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	e004      	b.n	8000562 <fsm_manual_run+0x76>
				else timerTraffic1++;
 8000558:	4b8d      	ldr	r3, [pc, #564]	; (8000790 <fsm_manual_run+0x2a4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a8c      	ldr	r2, [pc, #560]	; (8000790 <fsm_manual_run+0x2a4>)
 8000560:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1) durationRED = RED_sec * 1000;
 8000562:	2003      	movs	r0, #3
 8000564:	f000 fc3a 	bl	8000ddc <isButtonPressed>
 8000568:	4603      	mov	r3, r0
 800056a:	2b01      	cmp	r3, #1
 800056c:	d107      	bne.n	800057e <fsm_manual_run+0x92>
 800056e:	4b87      	ldr	r3, [pc, #540]	; (800078c <fsm_manual_run+0x2a0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000576:	fb02 f303 	mul.w	r3, r2, r3
 800057a:	4a86      	ldr	r2, [pc, #536]	; (8000794 <fsm_manual_run+0x2a8>)
 800057c:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fc2c 	bl	8000ddc <isButtonPressed>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	f040 80f2 	bne.w	8000770 <fsm_manual_run+0x284>
				setTimer(1, 10);
 800058c:	210a      	movs	r1, #10
 800058e:	2001      	movs	r0, #1
 8000590:	f001 f850 	bl	8001634 <setTimer>
				status = MOD_YELLOW;
 8000594:	4b7b      	ldr	r3, [pc, #492]	; (8000784 <fsm_manual_run+0x298>)
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationYELLOW / 1000;
 800059a:	4b7f      	ldr	r3, [pc, #508]	; (8000798 <fsm_manual_run+0x2ac>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a7f      	ldr	r2, [pc, #508]	; (800079c <fsm_manual_run+0x2b0>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	1192      	asrs	r2, r2, #6
 80005a6:	17db      	asrs	r3, r3, #31
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4a79      	ldr	r2, [pc, #484]	; (8000790 <fsm_manual_run+0x2a4>)
 80005ac:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 3;
 80005ae:	4b7c      	ldr	r3, [pc, #496]	; (80007a0 <fsm_manual_run+0x2b4>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	601a      	str	r2, [r3, #0]
			break;
 80005b4:	e0dc      	b.n	8000770 <fsm_manual_run+0x284>
			if(timerFlag[1] == 1){
 80005b6:	4b74      	ldr	r3, [pc, #464]	; (8000788 <fsm_manual_run+0x29c>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d10b      	bne.n	80005d6 <fsm_manual_run+0xea>
				setTimer(1, 250); // blink every 0.25s
 80005be:	21fa      	movs	r1, #250	; 0xfa
 80005c0:	2001      	movs	r0, #1
 80005c2:	f001 f837 	bl	8001634 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_YELLOW);
 80005c6:	2104      	movs	r1, #4
 80005c8:	2007      	movs	r0, #7
 80005ca:	f000 f9d3 	bl	8000974 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_YELLOW);
 80005ce:	2104      	movs	r1, #4
 80005d0:	2008      	movs	r0, #8
 80005d2:	f000 f9cf 	bl	8000974 <blinkLEDs>
			if(isButtonPressed(2) == 1){
 80005d6:	2002      	movs	r0, #2
 80005d8:	f000 fc00 	bl	8000ddc <isButtonPressed>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d114      	bne.n	800060c <fsm_manual_run+0x120>
				YELLOW_sec++;
 80005e2:	4b70      	ldr	r3, [pc, #448]	; (80007a4 <fsm_manual_run+0x2b8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a6e      	ldr	r2, [pc, #440]	; (80007a4 <fsm_manual_run+0x2b8>)
 80005ea:	6013      	str	r3, [r2, #0]
				if(YELLOW_sec >= 100) {
 80005ec:	4b6d      	ldr	r3, [pc, #436]	; (80007a4 <fsm_manual_run+0x2b8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b63      	cmp	r3, #99	; 0x63
 80005f2:	dd06      	ble.n	8000602 <fsm_manual_run+0x116>
					YELLOW_sec = 1;
 80005f4:	4b6b      	ldr	r3, [pc, #428]	; (80007a4 <fsm_manual_run+0x2b8>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 80005fa:	4b65      	ldr	r3, [pc, #404]	; (8000790 <fsm_manual_run+0x2a4>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	e004      	b.n	800060c <fsm_manual_run+0x120>
				else timerTraffic1++;
 8000602:	4b63      	ldr	r3, [pc, #396]	; (8000790 <fsm_manual_run+0x2a4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a61      	ldr	r2, [pc, #388]	; (8000790 <fsm_manual_run+0x2a4>)
 800060a:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 800060c:	2003      	movs	r0, #3
 800060e:	f000 fbe5 	bl	8000ddc <isButtonPressed>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d113      	bne.n	8000640 <fsm_manual_run+0x154>
				int prevDurationYELLOW = durationYELLOW;
 8000618:	4b5f      	ldr	r3, [pc, #380]	; (8000798 <fsm_manual_run+0x2ac>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	607b      	str	r3, [r7, #4]
				durationYELLOW = YELLOW_sec * 1000;
 800061e:	4b61      	ldr	r3, [pc, #388]	; (80007a4 <fsm_manual_run+0x2b8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	4a5b      	ldr	r2, [pc, #364]	; (8000798 <fsm_manual_run+0x2ac>)
 800062c:	6013      	str	r3, [r2, #0]
				if(durationYELLOW > durationRED) durationYELLOW = prevDurationYELLOW; // Check the logic
 800062e:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <fsm_manual_run+0x2ac>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b58      	ldr	r3, [pc, #352]	; (8000794 <fsm_manual_run+0x2a8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	dd02      	ble.n	8000640 <fsm_manual_run+0x154>
 800063a:	4a57      	ldr	r2, [pc, #348]	; (8000798 <fsm_manual_run+0x2ac>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fbcb 	bl	8000ddc <isButtonPressed>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	f040 8093 	bne.w	8000774 <fsm_manual_run+0x288>
				setTimer(1, 10);
 800064e:	210a      	movs	r1, #10
 8000650:	2001      	movs	r0, #1
 8000652:	f000 ffef 	bl	8001634 <setTimer>
				status = MOD_GREEN;
 8000656:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <fsm_manual_run+0x298>)
 8000658:	220d      	movs	r2, #13
 800065a:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationGREEN / 1000;
 800065c:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <fsm_manual_run+0x2bc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a4e      	ldr	r2, [pc, #312]	; (800079c <fsm_manual_run+0x2b0>)
 8000662:	fb82 1203 	smull	r1, r2, r2, r3
 8000666:	1192      	asrs	r2, r2, #6
 8000668:	17db      	asrs	r3, r3, #31
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	4a48      	ldr	r2, [pc, #288]	; (8000790 <fsm_manual_run+0x2a4>)
 800066e:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 4;
 8000670:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <fsm_manual_run+0x2b4>)
 8000672:	2204      	movs	r2, #4
 8000674:	601a      	str	r2, [r3, #0]
			break;
 8000676:	e07d      	b.n	8000774 <fsm_manual_run+0x288>
			if(timerFlag[1] == 1){
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <fsm_manual_run+0x29c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10b      	bne.n	8000698 <fsm_manual_run+0x1ac>
				setTimer(1, 250); // blink every 0.25s
 8000680:	21fa      	movs	r1, #250	; 0xfa
 8000682:	2001      	movs	r0, #1
 8000684:	f000 ffd6 	bl	8001634 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_GREEN);
 8000688:	2103      	movs	r1, #3
 800068a:	2007      	movs	r0, #7
 800068c:	f000 f972 	bl	8000974 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_GREEN);
 8000690:	2103      	movs	r1, #3
 8000692:	2008      	movs	r0, #8
 8000694:	f000 f96e 	bl	8000974 <blinkLEDs>
			if(isButtonPressed(2) == 1){
 8000698:	2002      	movs	r0, #2
 800069a:	f000 fb9f 	bl	8000ddc <isButtonPressed>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d114      	bne.n	80006ce <fsm_manual_run+0x1e2>
				GREEN_sec++;
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <fsm_manual_run+0x2c0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a40      	ldr	r2, [pc, #256]	; (80007ac <fsm_manual_run+0x2c0>)
 80006ac:	6013      	str	r3, [r2, #0]
				if(GREEN_sec >= 100){
 80006ae:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <fsm_manual_run+0x2c0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b63      	cmp	r3, #99	; 0x63
 80006b4:	dd06      	ble.n	80006c4 <fsm_manual_run+0x1d8>
					GREEN_sec = 1;
 80006b6:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <fsm_manual_run+0x2c0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <fsm_manual_run+0x2a4>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e004      	b.n	80006ce <fsm_manual_run+0x1e2>
				else timerTraffic1++;
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <fsm_manual_run+0x2a4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a31      	ldr	r2, [pc, #196]	; (8000790 <fsm_manual_run+0x2a4>)
 80006cc:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 fb84 	bl	8000ddc <isButtonPressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d114      	bne.n	8000704 <fsm_manual_run+0x218>
				durationGREEN = GREEN_sec * 1000;
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <fsm_manual_run+0x2c0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <fsm_manual_run+0x2bc>)
 80006e8:	6013      	str	r3, [r2, #0]
				if(durationGREEN < durationRED) durationYELLOW = durationRED - durationGREEN;
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <fsm_manual_run+0x2bc>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <fsm_manual_run+0x2a8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	da06      	bge.n	8000704 <fsm_manual_run+0x218>
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <fsm_manual_run+0x2a8>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <fsm_manual_run+0x2bc>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	4a25      	ldr	r2, [pc, #148]	; (8000798 <fsm_manual_run+0x2ac>)
 8000702:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(1) == 1){
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fb69 	bl	8000ddc <isButtonPressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d133      	bne.n	8000778 <fsm_manual_run+0x28c>
				status = RED_GREEN;
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <fsm_manual_run+0x298>)
 8000712:	2215      	movs	r2, #21
 8000714:	601a      	str	r2, [r3, #0]
				durationGREEN = durationRED - durationYELLOW;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <fsm_manual_run+0x2a8>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <fsm_manual_run+0x2ac>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <fsm_manual_run+0x2bc>)
 8000722:	6013      	str	r3, [r2, #0]
				timerTraffic1 = durationRED / 1000;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <fsm_manual_run+0x2a8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1c      	ldr	r2, [pc, #112]	; (800079c <fsm_manual_run+0x2b0>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	1192      	asrs	r2, r2, #6
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <fsm_manual_run+0x2a4>)
 8000736:	6013      	str	r3, [r2, #0]
				timerTraffic2 = durationGREEN / 1000;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <fsm_manual_run+0x2bc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <fsm_manual_run+0x2b0>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1192      	asrs	r2, r2, #6
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <fsm_manual_run+0x2b4>)
 800074a:	6013      	str	r3, [r2, #0]
				updateBuffer();
 800074c:	f000 fa74 	bl	8000c38 <updateBuffer>
				setTimer(0, durationGREEN);
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <fsm_manual_run+0x2bc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 ff6c 	bl	8001634 <setTimer>
				setTimerSecond(1000);
 800075c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000760:	f000 ff4c 	bl	80015fc <setTimerSecond>
				led_index = 0;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <fsm_manual_run+0x2c4>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
			break;
 800076a:	e005      	b.n	8000778 <fsm_manual_run+0x28c>
			break;
 800076c:	bf00      	nop
 800076e:	e004      	b.n	800077a <fsm_manual_run+0x28e>
			break;
 8000770:	bf00      	nop
 8000772:	e002      	b.n	800077a <fsm_manual_run+0x28e>
			break;
 8000774:	bf00      	nop
 8000776:	e000      	b.n	800077a <fsm_manual_run+0x28e>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000004 	.word	0x20000004
 8000788:	20000190 	.word	0x20000190
 800078c:	200001c0 	.word	0x200001c0
 8000790:	20000060 	.word	0x20000060
 8000794:	20000008 	.word	0x20000008
 8000798:	2000000c 	.word	0x2000000c
 800079c:	10624dd3 	.word	0x10624dd3
 80007a0:	20000064 	.word	0x20000064
 80007a4:	200001bc 	.word	0x200001bc
 80007a8:	20000010 	.word	0x20000010
 80007ac:	200001b8 	.word	0x200001b8
 80007b0:	20000068 	.word	0x20000068

080007b4 <buzzerProcess>:
int pedestrianFlag = 0;
int pedestrianStatus = INIT;
int flagBuzzer = 0;

// Function to handle the buzzer process
void buzzerProcess(int value) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    buzzer_value = value;
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <buzzerProcess+0x1c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
    buzzer();
 80007c2:	f001 f8a1 	bl	8001908 <buzzer>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000007c 	.word	0x2000007c

080007d4 <fsm_pedestrian_run>:

void fsm_pedestrian_run() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
    switch (pedestrianStatus) {
 80007da:	4b5e      	ldr	r3, [pc, #376]	; (8000954 <fsm_pedestrian_run+0x180>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d031      	beq.n	8000846 <fsm_pedestrian_run+0x72>
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	f300 80aa 	bgt.w	800093c <fsm_pedestrian_run+0x168>
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d003      	beq.n	80007f4 <fsm_pedestrian_run+0x20>
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	f000 8088 	beq.w	8000902 <fsm_pedestrian_run+0x12e>
                pedestrianStatus = AUTO_GREEN;
            }
            break;

        default:
            break;
 80007f2:	e0a3      	b.n	800093c <fsm_pedestrian_run+0x168>
            buzzerProcess(0);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ffdd 	bl	80007b4 <buzzerProcess>
            flagBuzzer = 0;
 80007fa:	4b57      	ldr	r3, [pc, #348]	; (8000958 <fsm_pedestrian_run+0x184>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
            Pedestrian_setColor(OFF_LED);
 8000800:	2005      	movs	r0, #5
 8000802:	f000 f9dd 	bl	8000bc0 <Pedestrian_setColor>
            if (pedestrianFlag == 1) {
 8000806:	4b55      	ldr	r3, [pc, #340]	; (800095c <fsm_pedestrian_run+0x188>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	f040 8098 	bne.w	8000940 <fsm_pedestrian_run+0x16c>
                if (status == RED_GREEN || status == RED_YELLOW) {
 8000810:	4b53      	ldr	r3, [pc, #332]	; (8000960 <fsm_pedestrian_run+0x18c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b15      	cmp	r3, #21
 8000816:	d003      	beq.n	8000820 <fsm_pedestrian_run+0x4c>
 8000818:	4b51      	ldr	r3, [pc, #324]	; (8000960 <fsm_pedestrian_run+0x18c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b16      	cmp	r3, #22
 800081e:	d103      	bne.n	8000828 <fsm_pedestrian_run+0x54>
                    pedestrianStatus = AUTO_GREEN;
 8000820:	4b4c      	ldr	r3, [pc, #304]	; (8000954 <fsm_pedestrian_run+0x180>)
 8000822:	2203      	movs	r2, #3
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e00a      	b.n	800083e <fsm_pedestrian_run+0x6a>
                } else if (status == YELLOW_RED || status == GREEN_RED) {
 8000828:	4b4d      	ldr	r3, [pc, #308]	; (8000960 <fsm_pedestrian_run+0x18c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b18      	cmp	r3, #24
 800082e:	d003      	beq.n	8000838 <fsm_pedestrian_run+0x64>
 8000830:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <fsm_pedestrian_run+0x18c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b17      	cmp	r3, #23
 8000836:	d102      	bne.n	800083e <fsm_pedestrian_run+0x6a>
                    pedestrianStatus = AUTO_RED;
 8000838:	4b46      	ldr	r3, [pc, #280]	; (8000954 <fsm_pedestrian_run+0x180>)
 800083a:	2202      	movs	r2, #2
 800083c:	601a      	str	r2, [r3, #0]
                pedestrianFlag = 0;  // Reset pedestrian flag
 800083e:	4b47      	ldr	r3, [pc, #284]	; (800095c <fsm_pedestrian_run+0x188>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
            break;
 8000844:	e07c      	b.n	8000940 <fsm_pedestrian_run+0x16c>
            Pedestrian_setColor(AUTO_GREEN);
 8000846:	2003      	movs	r0, #3
 8000848:	f000 f9ba 	bl	8000bc0 <Pedestrian_setColor>
            if (timerFlag[2] == 1 ){
 800084c:	4b45      	ldr	r3, [pc, #276]	; (8000964 <fsm_pedestrian_run+0x190>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d103      	bne.n	800085c <fsm_pedestrian_run+0x88>
            	pedestrianStatus = INIT;
 8000854:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <fsm_pedestrian_run+0x180>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e00a      	b.n	8000872 <fsm_pedestrian_run+0x9e>
            else if(status == YELLOW_RED || status == GREEN_RED) {
 800085c:	4b40      	ldr	r3, [pc, #256]	; (8000960 <fsm_pedestrian_run+0x18c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b18      	cmp	r3, #24
 8000862:	d003      	beq.n	800086c <fsm_pedestrian_run+0x98>
 8000864:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <fsm_pedestrian_run+0x18c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b17      	cmp	r3, #23
 800086a:	d102      	bne.n	8000872 <fsm_pedestrian_run+0x9e>
                pedestrianStatus = AUTO_RED;
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <fsm_pedestrian_run+0x180>)
 800086e:	2202      	movs	r2, #2
 8000870:	601a      	str	r2, [r3, #0]
            if (durationYELLOW < 5000) {
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <fsm_pedestrian_run+0x194>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f241 3287 	movw	r2, #4999	; 0x1387
 800087a:	4293      	cmp	r3, r2
 800087c:	dc2a      	bgt.n	80008d4 <fsm_pedestrian_run+0x100>
                int needMore = 5 - (durationYELLOW / 1000);
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <fsm_pedestrian_run+0x194>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a3a      	ldr	r2, [pc, #232]	; (800096c <fsm_pedestrian_run+0x198>)
 8000884:	fb82 1203 	smull	r1, r2, r2, r3
 8000888:	1192      	asrs	r2, r2, #6
 800088a:	17db      	asrs	r3, r3, #31
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	3305      	adds	r3, #5
 8000890:	607b      	str	r3, [r7, #4]
                if(timerTraffic2 <= needMore && status == RED_GREEN) flagBuzzer = 1;
 8000892:	4b37      	ldr	r3, [pc, #220]	; (8000970 <fsm_pedestrian_run+0x19c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	db06      	blt.n	80008aa <fsm_pedestrian_run+0xd6>
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <fsm_pedestrian_run+0x18c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b15      	cmp	r3, #21
 80008a2:	d102      	bne.n	80008aa <fsm_pedestrian_run+0xd6>
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <fsm_pedestrian_run+0x184>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
                if(flagBuzzer) buzzerProcess(512* (6 - (durationYELLOW / 1000) - timerTraffic2));
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <fsm_pedestrian_run+0x184>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d048      	beq.n	8000944 <fsm_pedestrian_run+0x170>
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <fsm_pedestrian_run+0x194>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a2d      	ldr	r2, [pc, #180]	; (800096c <fsm_pedestrian_run+0x198>)
 80008b8:	fb82 1203 	smull	r1, r2, r2, r3
 80008bc:	1192      	asrs	r2, r2, #6
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	1d9a      	adds	r2, r3, #6
 80008c4:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <fsm_pedestrian_run+0x19c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	025b      	lsls	r3, r3, #9
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff71 	bl	80007b4 <buzzerProcess>
            break;
 80008d2:	e037      	b.n	8000944 <fsm_pedestrian_run+0x170>
            } else if (durationYELLOW >= 5000 && status == RED_YELLOW && timerTraffic2 <= 5) {
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <fsm_pedestrian_run+0x194>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80008dc:	4293      	cmp	r3, r2
 80008de:	dd31      	ble.n	8000944 <fsm_pedestrian_run+0x170>
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <fsm_pedestrian_run+0x18c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b16      	cmp	r3, #22
 80008e6:	d12d      	bne.n	8000944 <fsm_pedestrian_run+0x170>
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <fsm_pedestrian_run+0x19c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b05      	cmp	r3, #5
 80008ee:	dc29      	bgt.n	8000944 <fsm_pedestrian_run+0x170>
                buzzerProcess(512 * (6 - timerTraffic2));
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <fsm_pedestrian_run+0x19c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1c3 0306 	rsb	r3, r3, #6
 80008f8:	025b      	lsls	r3, r3, #9
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff5a 	bl	80007b4 <buzzerProcess>
            break;
 8000900:	e020      	b.n	8000944 <fsm_pedestrian_run+0x170>
            buzzerProcess(0);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ff56 	bl	80007b4 <buzzerProcess>
            flagBuzzer = 0;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <fsm_pedestrian_run+0x184>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
            Pedestrian_setColor(AUTO_RED);
 800090e:	2002      	movs	r0, #2
 8000910:	f000 f956 	bl	8000bc0 <Pedestrian_setColor>
            if (timerFlag[2] == 1 ){
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <fsm_pedestrian_run+0x190>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d103      	bne.n	8000924 <fsm_pedestrian_run+0x150>
            	pedestrianStatus = INIT;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <fsm_pedestrian_run+0x180>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]
            break;
 8000922:	e011      	b.n	8000948 <fsm_pedestrian_run+0x174>
            else if(status == RED_GREEN || status == RED_YELLOW) {
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <fsm_pedestrian_run+0x18c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b15      	cmp	r3, #21
 800092a:	d003      	beq.n	8000934 <fsm_pedestrian_run+0x160>
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <fsm_pedestrian_run+0x18c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b16      	cmp	r3, #22
 8000932:	d109      	bne.n	8000948 <fsm_pedestrian_run+0x174>
                pedestrianStatus = AUTO_GREEN;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <fsm_pedestrian_run+0x180>)
 8000936:	2203      	movs	r2, #3
 8000938:	601a      	str	r2, [r3, #0]
            break;
 800093a:	e005      	b.n	8000948 <fsm_pedestrian_run+0x174>
            break;
 800093c:	bf00      	nop
 800093e:	e004      	b.n	800094a <fsm_pedestrian_run+0x176>
            break;
 8000940:	bf00      	nop
 8000942:	e002      	b.n	800094a <fsm_pedestrian_run+0x176>
            break;
 8000944:	bf00      	nop
 8000946:	e000      	b.n	800094a <fsm_pedestrian_run+0x176>
            break;
 8000948:	bf00      	nop
    }
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000000 	.word	0x20000000
 8000958:	2000005c 	.word	0x2000005c
 800095c:	20000058 	.word	0x20000058
 8000960:	20000004 	.word	0x20000004
 8000964:	20000190 	.word	0x20000190
 8000968:	2000000c 	.word	0x2000000c
 800096c:	10624dd3 	.word	0x10624dd3
 8000970:	20000064 	.word	0x20000064

08000974 <blinkLEDs>:
 */
#include "handle_leds.h"
int blinkFlag1 = 0;
int blinkFlag2 = 0;

void blinkLEDs(int traffic, int color){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	// set flag for blinking
	if(traffic == TRAFFIC_1){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b07      	cmp	r3, #7
 8000982:	d13c      	bne.n	80009fe <blinkLEDs+0x8a>
		blinkFlag1 = 1 - blinkFlag1;
 8000984:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <blinkLEDs+0x11c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f1c3 0301 	rsb	r3, r3, #1
 800098c:	4a40      	ldr	r2, [pc, #256]	; (8000a90 <blinkLEDs+0x11c>)
 800098e:	6013      	str	r3, [r2, #0]
		switch(color){
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b04      	cmp	r3, #4
 8000994:	d017      	beq.n	80009c6 <blinkLEDs+0x52>
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	2b04      	cmp	r3, #4
 800099a:	dc70      	bgt.n	8000a7e <blinkLEDs+0x10a>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d003      	beq.n	80009aa <blinkLEDs+0x36>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d01c      	beq.n	80009e2 <blinkLEDs+0x6e>
			case AUTO_GREEN:
				if(blinkFlag1) Traffic_setColor(1, AUTO_GREEN);
				else Traffic_setColor(1, OFF_LED);
				break;
			default:
				break;
 80009a8:	e069      	b.n	8000a7e <blinkLEDs+0x10a>
				if(blinkFlag1) Traffic_setColor(1, AUTO_RED);
 80009aa:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <blinkLEDs+0x11c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d004      	beq.n	80009bc <blinkLEDs+0x48>
 80009b2:	2102      	movs	r1, #2
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 f86f 	bl	8000a98 <Traffic_setColor>
				break;
 80009ba:	e065      	b.n	8000a88 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 80009bc:	2105      	movs	r1, #5
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 f86a 	bl	8000a98 <Traffic_setColor>
				break;
 80009c4:	e060      	b.n	8000a88 <blinkLEDs+0x114>
				if(blinkFlag1) Traffic_setColor(1, AUTO_YELLOW);
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <blinkLEDs+0x11c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d004      	beq.n	80009d8 <blinkLEDs+0x64>
 80009ce:	2104      	movs	r1, #4
 80009d0:	2001      	movs	r0, #1
 80009d2:	f000 f861 	bl	8000a98 <Traffic_setColor>
				break;
 80009d6:	e057      	b.n	8000a88 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 80009d8:	2105      	movs	r1, #5
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 f85c 	bl	8000a98 <Traffic_setColor>
				break;
 80009e0:	e052      	b.n	8000a88 <blinkLEDs+0x114>
				if(blinkFlag1) Traffic_setColor(1, AUTO_GREEN);
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <blinkLEDs+0x11c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d004      	beq.n	80009f4 <blinkLEDs+0x80>
 80009ea:	2103      	movs	r1, #3
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 f853 	bl	8000a98 <Traffic_setColor>
				break;
 80009f2:	e049      	b.n	8000a88 <blinkLEDs+0x114>
				else Traffic_setColor(1, OFF_LED);
 80009f4:	2105      	movs	r1, #5
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 f84e 	bl	8000a98 <Traffic_setColor>
				break;
 80009fc:	e044      	b.n	8000a88 <blinkLEDs+0x114>
		}
	}
	else if(traffic == TRAFFIC_2){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b08      	cmp	r3, #8
 8000a02:	d13e      	bne.n	8000a82 <blinkLEDs+0x10e>
		blinkFlag2 = 1 - blinkFlag2;
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <blinkLEDs+0x120>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1c3 0301 	rsb	r3, r3, #1
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <blinkLEDs+0x120>)
 8000a0e:	6013      	str	r3, [r2, #0]
		switch(color){
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d017      	beq.n	8000a46 <blinkLEDs+0xd2>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	dc34      	bgt.n	8000a86 <blinkLEDs+0x112>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d003      	beq.n	8000a2a <blinkLEDs+0xb6>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d01c      	beq.n	8000a62 <blinkLEDs+0xee>
			case AUTO_GREEN:
				if(blinkFlag2) Traffic_setColor(2, AUTO_GREEN);
				else Traffic_setColor(2, OFF_LED);
				break;
			default:
				break;
 8000a28:	e02d      	b.n	8000a86 <blinkLEDs+0x112>
				if(blinkFlag2) Traffic_setColor(2, AUTO_RED);
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <blinkLEDs+0x120>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <blinkLEDs+0xc8>
 8000a32:	2102      	movs	r1, #2
 8000a34:	2002      	movs	r0, #2
 8000a36:	f000 f82f 	bl	8000a98 <Traffic_setColor>
				break;
 8000a3a:	e025      	b.n	8000a88 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f000 f82a 	bl	8000a98 <Traffic_setColor>
				break;
 8000a44:	e020      	b.n	8000a88 <blinkLEDs+0x114>
				if(blinkFlag2) Traffic_setColor(2, AUTO_YELLOW);
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <blinkLEDs+0x120>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <blinkLEDs+0xe4>
 8000a4e:	2104      	movs	r1, #4
 8000a50:	2002      	movs	r0, #2
 8000a52:	f000 f821 	bl	8000a98 <Traffic_setColor>
				break;
 8000a56:	e017      	b.n	8000a88 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000a58:	2105      	movs	r1, #5
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f000 f81c 	bl	8000a98 <Traffic_setColor>
				break;
 8000a60:	e012      	b.n	8000a88 <blinkLEDs+0x114>
				if(blinkFlag2) Traffic_setColor(2, AUTO_GREEN);
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <blinkLEDs+0x120>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <blinkLEDs+0x100>
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f000 f813 	bl	8000a98 <Traffic_setColor>
				break;
 8000a72:	e009      	b.n	8000a88 <blinkLEDs+0x114>
				else Traffic_setColor(2, OFF_LED);
 8000a74:	2105      	movs	r1, #5
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 f80e 	bl	8000a98 <Traffic_setColor>
				break;
 8000a7c:	e004      	b.n	8000a88 <blinkLEDs+0x114>
				break;
 8000a7e:	bf00      	nop
 8000a80:	e002      	b.n	8000a88 <blinkLEDs+0x114>
		}
	}
 8000a82:	bf00      	nop
 8000a84:	e000      	b.n	8000a88 <blinkLEDs+0x114>
				break;
 8000a86:	bf00      	nop
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000080 	.word	0x20000080
 8000a94:	20000084 	.word	0x20000084

08000a98 <Traffic_setColor>:

void Traffic_setColor(int option, int color){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	if(option == 1){
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d13f      	bne.n	8000b28 <Traffic_setColor+0x90>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	3b02      	subs	r3, #2
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d879      	bhi.n	8000ba4 <Traffic_setColor+0x10c>
 8000ab0:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <Traffic_setColor+0x20>)
 8000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000ac9 	.word	0x08000ac9
 8000abc:	08000af9 	.word	0x08000af9
 8000ac0:	08000ae1 	.word	0x08000ae1
 8000ac4:	08000b11 	.word	0x08000b11
		switch(color){
			case AUTO_RED:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ac8:	2210      	movs	r2, #16
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	483a      	ldr	r0, [pc, #232]	; (8000bb8 <Traffic_setColor+0x120>)
 8000ad0:	f001 fa51 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4838      	ldr	r0, [pc, #224]	; (8000bbc <Traffic_setColor+0x124>)
 8000ada:	f001 fa4c 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000ade:	e066      	b.n	8000bae <Traffic_setColor+0x116>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ae0:	2210      	movs	r2, #16
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	4834      	ldr	r0, [pc, #208]	; (8000bb8 <Traffic_setColor+0x120>)
 8000ae8:	f001 fa45 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000aec:	2210      	movs	r2, #16
 8000aee:	2108      	movs	r1, #8
 8000af0:	4832      	ldr	r0, [pc, #200]	; (8000bbc <Traffic_setColor+0x124>)
 8000af2:	f001 fa40 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000af6:	e05a      	b.n	8000bae <Traffic_setColor+0x116>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afe:	482e      	ldr	r0, [pc, #184]	; (8000bb8 <Traffic_setColor+0x120>)
 8000b00:	f001 fa39 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b04:	2210      	movs	r2, #16
 8000b06:	2108      	movs	r1, #8
 8000b08:	482c      	ldr	r0, [pc, #176]	; (8000bbc <Traffic_setColor+0x124>)
 8000b0a:	f001 fa34 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000b0e:	e04e      	b.n	8000bae <Traffic_setColor+0x116>
			case OFF_LED:
				HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	4828      	ldr	r0, [pc, #160]	; (8000bb8 <Traffic_setColor+0x120>)
 8000b18:	f001 fa2d 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4826      	ldr	r0, [pc, #152]	; (8000bbc <Traffic_setColor+0x124>)
 8000b22:	f001 fa28 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000b26:	e042      	b.n	8000bae <Traffic_setColor+0x116>
			default:
				break;
		}
	}
	else if(option == 2){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d13c      	bne.n	8000ba8 <Traffic_setColor+0x110>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	3b02      	subs	r3, #2
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d83a      	bhi.n	8000bac <Traffic_setColor+0x114>
 8000b36:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <Traffic_setColor+0xa4>)
 8000b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3c:	08000b4d 	.word	0x08000b4d
 8000b40:	08000b79 	.word	0x08000b79
 8000b44:	08000b63 	.word	0x08000b63
 8000b48:	08000b8f 	.word	0x08000b8f
		switch(color){
			case AUTO_RED:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	2120      	movs	r1, #32
 8000b50:	481a      	ldr	r0, [pc, #104]	; (8000bbc <Traffic_setColor+0x124>)
 8000b52:	f001 fa10 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2110      	movs	r1, #16
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <Traffic_setColor+0x124>)
 8000b5c:	f001 fa0b 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000b60:	e025      	b.n	8000bae <Traffic_setColor+0x116>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b62:	2210      	movs	r2, #16
 8000b64:	2120      	movs	r1, #32
 8000b66:	4815      	ldr	r0, [pc, #84]	; (8000bbc <Traffic_setColor+0x124>)
 8000b68:	f001 fa05 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	2110      	movs	r1, #16
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <Traffic_setColor+0x124>)
 8000b72:	f001 fa00 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000b76:	e01a      	b.n	8000bae <Traffic_setColor+0x116>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	480f      	ldr	r0, [pc, #60]	; (8000bbc <Traffic_setColor+0x124>)
 8000b7e:	f001 f9fa 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000b82:	2210      	movs	r2, #16
 8000b84:	2110      	movs	r1, #16
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <Traffic_setColor+0x124>)
 8000b88:	f001 f9f5 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000b8c:	e00f      	b.n	8000bae <Traffic_setColor+0x116>
			case OFF_LED:
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2120      	movs	r1, #32
 8000b92:	480a      	ldr	r0, [pc, #40]	; (8000bbc <Traffic_setColor+0x124>)
 8000b94:	f001 f9ef 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <Traffic_setColor+0x124>)
 8000b9e:	f001 f9ea 	bl	8001f76 <HAL_GPIO_WritePin>
				break;
 8000ba2:	e004      	b.n	8000bae <Traffic_setColor+0x116>
				break;
 8000ba4:	bf00      	nop
 8000ba6:	e002      	b.n	8000bae <Traffic_setColor+0x116>
			default:
				break;
		}
	}
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <Traffic_setColor+0x116>
				break;
 8000bac:	bf00      	nop
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <Pedestrian_setColor>:

void Pedestrian_setColor(int color){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if(color == AUTO_RED){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d10c      	bne.n	8000be8 <Pedestrian_setColor+0x28>
		// RED LED
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000bce:	2210      	movs	r2, #16
 8000bd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd4:	4816      	ldr	r0, [pc, #88]	; (8000c30 <Pedestrian_setColor+0x70>)
 8000bd6:	f001 f9ce 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <Pedestrian_setColor+0x74>)
 8000be2:	f001 f9c8 	bl	8001f76 <HAL_GPIO_WritePin>
	else if(color == OFF_LED){
		// OFF LED
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
	}
}
 8000be6:	e01e      	b.n	8000c26 <Pedestrian_setColor+0x66>
	else if(color == AUTO_GREEN){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d10c      	bne.n	8000c08 <Pedestrian_setColor+0x48>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf4:	480e      	ldr	r0, [pc, #56]	; (8000c30 <Pedestrian_setColor+0x70>)
 8000bf6:	f001 f9be 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <Pedestrian_setColor+0x74>)
 8000c02:	f001 f9b8 	bl	8001f76 <HAL_GPIO_WritePin>
}
 8000c06:	e00e      	b.n	8000c26 <Pedestrian_setColor+0x66>
	else if(color == OFF_LED){
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d10b      	bne.n	8000c26 <Pedestrian_setColor+0x66>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <Pedestrian_setColor+0x70>)
 8000c16:	f001 f9ae 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <Pedestrian_setColor+0x74>)
 8000c22:	f001 f9a8 	bl	8001f76 <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	40010800 	.word	0x40010800

08000c38 <updateBuffer>:

void updateBuffer(){
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	led_buffer[0] = timerTraffic1 / 10;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <updateBuffer+0x70>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <updateBuffer+0x74>)
 8000c42:	fb82 1203 	smull	r1, r2, r2, r3
 8000c46:	1092      	asrs	r2, r2, #2
 8000c48:	17db      	asrs	r3, r3, #31
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <updateBuffer+0x78>)
 8000c4e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timerTraffic1 % 10;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <updateBuffer+0x70>)
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <updateBuffer+0x74>)
 8000c56:	fb83 2301 	smull	r2, r3, r3, r1
 8000c5a:	109a      	asrs	r2, r3, #2
 8000c5c:	17cb      	asrs	r3, r1, #31
 8000c5e:	1ad2      	subs	r2, r2, r3
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	1aca      	subs	r2, r1, r3
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <updateBuffer+0x78>)
 8000c6c:	605a      	str	r2, [r3, #4]
	led_buffer[2] = timerTraffic2 / 10;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <updateBuffer+0x7c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <updateBuffer+0x74>)
 8000c74:	fb82 1203 	smull	r1, r2, r2, r3
 8000c78:	1092      	asrs	r2, r2, #2
 8000c7a:	17db      	asrs	r3, r3, #31
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <updateBuffer+0x78>)
 8000c80:	6093      	str	r3, [r2, #8]
	led_buffer[3] = timerTraffic2 % 10;;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <updateBuffer+0x7c>)
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <updateBuffer+0x74>)
 8000c88:	fb83 2301 	smull	r2, r3, r3, r1
 8000c8c:	109a      	asrs	r2, r3, #2
 8000c8e:	17cb      	asrs	r3, r1, #31
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	1aca      	subs	r2, r1, r3
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <updateBuffer+0x78>)
 8000c9e:	60da      	str	r2, [r3, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000060 	.word	0x20000060
 8000cac:	66666667 	.word	0x66666667
 8000cb0:	2000006c 	.word	0x2000006c
 8000cb4:	20000064 	.word	0x20000064

08000cb8 <button_reading>:
int buttonTimeOut[NO_OF_BUTTONS] = {0};

uint16_t pins[NO_OF_BUTTONS] = {A0_Pin, A1_Pin, A2_Pin, A3_Pin};
GPIO_TypeDef* ports[NO_OF_BUTTONS] = {A0_GPIO_Port, A1_GPIO_Port, A2_GPIO_Port, A3_GPIO_Port};

void button_reading(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	e073      	b.n	8000dac <button_reading+0xf4>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000cc4:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <button_reading+0x104>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	7819      	ldrb	r1, [r3, #0]
 8000ccc:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <button_reading+0x108>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000cd6:	4a3b      	ldr	r2, [pc, #236]	; (8000dc4 <button_reading+0x10c>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	7819      	ldrb	r1, [r3, #0]
 8000cde:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <button_reading+0x104>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(ports[i], pins[i]);
 8000ce8:	4a37      	ldr	r2, [pc, #220]	; (8000dc8 <button_reading+0x110>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cf0:	4936      	ldr	r1, [pc, #216]	; (8000dcc <button_reading+0x114>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	f001 f924 	bl	8001f48 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <button_reading+0x10c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	460a      	mov	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 8000d0e:	4a2c      	ldr	r2, [pc, #176]	; (8000dc0 <button_reading+0x108>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	4929      	ldr	r1, [pc, #164]	; (8000dbc <button_reading+0x104>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d141      	bne.n	8000da6 <button_reading+0xee>
 8000d22:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <button_reading+0x104>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4926      	ldr	r1, [pc, #152]	; (8000dc4 <button_reading+0x10c>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	440b      	add	r3, r1
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d137      	bne.n	8000da6 <button_reading+0xee>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <button_reading+0x10c>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4924      	ldr	r1, [pc, #144]	; (8000dd0 <button_reading+0x118>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	440b      	add	r3, r1
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d019      	beq.n	8000d7e <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <button_reading+0x10c>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	7819      	ldrb	r1, [r3, #0]
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <button_reading+0x118>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	460a      	mov	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000d5c:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <button_reading+0x118>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d11e      	bne.n	8000da6 <button_reading+0xee>
					buttonFlag[i] = 1;
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <button_reading+0x11c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonTimeOut[i] = 100;
 8000d72:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <button_reading+0x120>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2164      	movs	r1, #100	; 0x64
 8000d78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d7c:	e013      	b.n	8000da6 <button_reading+0xee>
				}
			}
			else{
				buttonTimeOut[i]--;
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <button_reading+0x120>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	1e5a      	subs	r2, r3, #1
 8000d88:	4913      	ldr	r1, [pc, #76]	; (8000dd8 <button_reading+0x120>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <button_reading+0x120>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dc04      	bgt.n	8000da6 <button_reading+0xee>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <button_reading+0x118>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3301      	adds	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	dd88      	ble.n	8000cc4 <button_reading+0xc>
				}
			}
		}
	}
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000008c 	.word	0x2000008c
 8000dc0:	20000090 	.word	0x20000090
 8000dc4:	20000088 	.word	0x20000088
 8000dc8:	20000020 	.word	0x20000020
 8000dcc:	20000018 	.word	0x20000018
 8000dd0:	20000014 	.word	0x20000014
 8000dd4:	20000094 	.word	0x20000094
 8000dd8:	200000a4 	.word	0x200000a4

08000ddc <isButtonPressed>:

int isButtonPressed(int button_index){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	if(button_index >= NO_OF_BUTTONS || button_index < 0) return 0;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	dc02      	bgt.n	8000df0 <isButtonPressed+0x14>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da01      	bge.n	8000df4 <isButtonPressed+0x18>
 8000df0:	2300      	movs	r3, #0
 8000df2:	e00d      	b.n	8000e10 <isButtonPressed+0x34>
	if(buttonFlag[button_index] == 1){
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <isButtonPressed+0x40>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d106      	bne.n	8000e0e <isButtonPressed+0x32>
		buttonFlag[button_index] = 0;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <isButtonPressed+0x40>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2100      	movs	r1, #0
 8000e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <isButtonPressed+0x34>
	}
	return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000094 	.word	0x20000094

08000e20 <setBackButtonFlag>:

void setBackButtonFlag(int index){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	buttonFlag[index] = 1;
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <setBackButtonFlag+0x1c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000094 	.word	0x20000094

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fd8c 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f84e 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f950 	bl	80010f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e50:	f000 f88c 	bl	8000f6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e54:	f000 f8d6 	bl	8001004 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e58:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <main+0x80>)
 8000e5a:	f001 fcd1 	bl	8002800 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <main+0x84>)
 8000e62:	f001 fd77 	bl	8002954 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   SCH_Init();
 8000e66:	f000 f9c1 	bl	80011ec <SCH_Init>
   //blinkLEDs(TRAFFIC_1, AUTO_RED);
   SCH_Add_Task(timerRun, 0, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <main+0x88>)
 8000e70:	f000 fa22 	bl	80012b8 <SCH_Add_Task>
   SCH_Add_Task(timerRunSecond, 0, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2100      	movs	r1, #0
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <main+0x8c>)
 8000e7a:	f000 fa1d 	bl	80012b8 <SCH_Add_Task>
   SCH_Add_Task(timerRun7SEG, 0, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2100      	movs	r1, #0
 8000e82:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <main+0x90>)
 8000e84:	f000 fa18 	bl	80012b8 <SCH_Add_Task>
   SCH_Add_Task(button_reading, 0, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <main+0x94>)
 8000e8e:	f000 fa13 	bl	80012b8 <SCH_Add_Task>
   //SCH_Add_Task(update7SEG, 1, 25);
   SCH_Add_Task(updateBuffer, 1,10);
 8000e92:	220a      	movs	r2, #10
 8000e94:	2101      	movs	r1, #1
 8000e96:	4810      	ldr	r0, [pc, #64]	; (8000ed8 <main+0x98>)
 8000e98:	f000 fa0e 	bl	80012b8 <SCH_Add_Task>
   SCH_Add_Task(fsm_automatic_run, 0, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <main+0x9c>)
 8000ea2:	f000 fa09 	bl	80012b8 <SCH_Add_Task>
   SCH_Add_Task(fsm_manual_run, 0, 1);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <main+0xa0>)
 8000eac:	f000 fa04 	bl	80012b8 <SCH_Add_Task>
   SCH_Add_Task(fsm_pedestrian_run, 0, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <main+0xa4>)
 8000eb6:	f000 f9ff 	bl	80012b8 <SCH_Add_Task>
   while (1)
   {
    /* USER CODE END WHILE */
	   SCH_Dispatch_Tasks();
 8000eba:	f000 fb67 	bl	800158c <SCH_Dispatch_Tasks>
 8000ebe:	e7fc      	b.n	8000eba <main+0x7a>
 8000ec0:	2000020c 	.word	0x2000020c
 8000ec4:	200001c4 	.word	0x200001c4
 8000ec8:	08001675 	.word	0x08001675
 8000ecc:	080016d5 	.word	0x080016d5
 8000ed0:	08001709 	.word	0x08001709
 8000ed4:	08000cb9 	.word	0x08000cb9
 8000ed8:	08000c39 	.word	0x08000c39
 8000edc:	0800014d 	.word	0x0800014d
 8000ee0:	080004ed 	.word	0x080004ed
 8000ee4:	080007d5 	.word	0x080007d5

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b090      	sub	sp, #64	; 0x40
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	2228      	movs	r2, #40	; 0x28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fbbc 	bl	8003674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f12:	2310      	movs	r3, #16
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f1e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 f83d 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f34:	f000 f954 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f38:	230f      	movs	r3, #15
 8000f3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 faa8 	bl	80024a8 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f5e:	f000 f93f 	bl	80011e0 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3740      	adds	r7, #64	; 0x40
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f92:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa0:	2263      	movs	r2, #99	; 0x63
 8000fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fb2:	f001 fbd5 	bl	8002760 <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fbc:	f000 f910 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fce:	f001 ff2d 	bl	8002e2c <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f000 f902 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fea:	f002 faaf 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f000 f8f4 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000020c 	.word	0x2000020c

08001004 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	; 0x38
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	615a      	str	r2, [r3, #20]
 8001032:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_TIM3_Init+0xe4>)
 8001036:	4a2d      	ldr	r2, [pc, #180]	; (80010ec <MX_TIM3_Init+0xe8>)
 8001038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_TIM3_Init+0xe4>)
 800103c:	223f      	movs	r2, #63	; 0x3f
 800103e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_TIM3_Init+0xe4>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_TIM3_Init+0xe4>)
 8001048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800104c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_TIM3_Init+0xe4>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_TIM3_Init+0xe4>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <MX_TIM3_Init+0xe4>)
 800105c:	f001 fb80 	bl	8002760 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001066:	f000 f8bb 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001074:	4619      	mov	r1, r3
 8001076:	481c      	ldr	r0, [pc, #112]	; (80010e8 <MX_TIM3_Init+0xe4>)
 8001078:	f001 fed8 	bl	8002e2c <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001082:	f000 f8ad 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <MX_TIM3_Init+0xe4>)
 8001088:	f001 fc0c 	bl	80028a4 <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001092:	f000 f8a5 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <MX_TIM3_Init+0xe4>)
 80010a6:	f002 fa51 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010b0:	f000 f896 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <MX_TIM3_Init+0xe4>)
 80010cc:	f001 fdec 	bl	8002ca8 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010d6:	f000 f883 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <MX_TIM3_Init+0xe4>)
 80010dc:	f000 fba0 	bl	8001820 <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3738      	adds	r7, #56	; 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200001c4 	.word	0x200001c4
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <MX_GPIO_Init+0xd0>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_GPIO_Init+0xd0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MX_GPIO_Init+0xd0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800113a:	4822      	ldr	r0, [pc, #136]	; (80011c4 <MX_GPIO_Init+0xd4>)
 800113c:	f000 ff1b 	bl	8001f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001146:	4820      	ldr	r0, [pc, #128]	; (80011c8 <MX_GPIO_Init+0xd8>)
 8001148:	f000 ff15 	bl	8001f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 800114c:	2313      	movs	r3, #19
 800114e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <MX_GPIO_Init+0xd8>)
 8001160:	f000 fd6e 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001164:	2301      	movs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4619      	mov	r1, r3
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <MX_GPIO_Init+0xd4>)
 8001178:	f000 fd62 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800117c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2302      	movs	r3, #2
 800118c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_GPIO_Init+0xd4>)
 8001196:	f000 fd53 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 800119a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	4619      	mov	r1, r3
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_GPIO_Init+0xd8>)
 80011b4:	f000 fd44 	bl	8001c40 <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40010800 	.word	0x40010800

080011cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
//	timerRun();
//	timerRun7SEG();
//	timerRunSecond();
//	button_reading();
	SCH_Update();
 80011d4:	f000 f850 	bl	8001278 <SCH_Update>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <SCH_Init>:
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	e034      	b.n	8001262 <SCH_Init+0x76>
 80011f8:	491e      	ldr	r1, [pc, #120]	; (8001274 <SCH_Init+0x88>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	491a      	ldr	r1, [pc, #104]	; (8001274 <SCH_Init+0x88>)
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3304      	adds	r3, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	4915      	ldr	r1, [pc, #84]	; (8001274 <SCH_Init+0x88>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3308      	adds	r3, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	4910      	ldr	r1, [pc, #64]	; (8001274 <SCH_Init+0x88>)
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	330c      	adds	r3, #12
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	490b      	ldr	r1, [pc, #44]	; (8001274 <SCH_Init+0x88>)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	3310      	adds	r3, #16
 8001256:	f04f 32ff 	mov.w	r2, #4294967295
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b09      	cmp	r3, #9
 8001266:	ddc7      	ble.n	80011f8 <SCH_Init+0xc>
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	200000b4 	.word	0x200000b4

08001278 <SCH_Update>:
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <SCH_Update+0x3c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <SCH_Update+0x34>
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <SCH_Update+0x3c>)
 8001286:	7b1b      	ldrb	r3, [r3, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10f      	bne.n	80012ac <SCH_Update+0x34>
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <SCH_Update+0x3c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <SCH_Update+0x26>
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <SCH_Update+0x3c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	3b01      	subs	r3, #1
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <SCH_Update+0x3c>)
 800129c:	6053      	str	r3, [r2, #4]
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SCH_Update+0x3c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <SCH_Update+0x34>
 80012a6:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <SCH_Update+0x3c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	731a      	strb	r2, [r3, #12]
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	200000b4 	.word	0x200000b4

080012b8 <SCH_Add_Task>:
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	b093      	sub	sp, #76	; 0x4c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
 80012ce:	2300      	movs	r3, #0
 80012d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80012d8:	e0d5      	b.n	8001486 <SCH_Add_Task+0x1ce>
 80012da:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80012de:	496e      	ldr	r1, [pc, #440]	; (8001498 <SCH_Add_Task+0x1e0>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3304      	adds	r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012f0:	4413      	add	r3, r2
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
 80012f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d979      	bls.n	80013f0 <SCH_Add_Task+0x138>
 80012fc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001300:	4965      	ldr	r1, [pc, #404]	; (8001498 <SCH_Add_Task+0x1e0>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	3304      	adds	r3, #4
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
 800131a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800131e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1ac9      	subs	r1, r1, r3
 8001324:	485c      	ldr	r0, [pc, #368]	; (8001498 <SCH_Add_Task+0x1e0>)
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4403      	add	r3, r0
 8001330:	3304      	adds	r3, #4
 8001332:	6019      	str	r1, [r3, #0]
 8001334:	2309      	movs	r3, #9
 8001336:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800133a:	e01b      	b.n	8001374 <SCH_Add_Task+0xbc>
 800133c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001346:	4854      	ldr	r0, [pc, #336]	; (8001498 <SCH_Add_Task+0x1e0>)
 8001348:	460b      	mov	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4418      	add	r0, r3
 8001352:	4951      	ldr	r1, [pc, #324]	; (8001498 <SCH_Add_Task+0x1e0>)
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	4604      	mov	r4, r0
 8001360:	461d      	mov	r5, r3
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	6023      	str	r3, [r4, #0]
 800136a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800136e:	3b01      	subs	r3, #1
 8001370:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001374:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001378:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800137c:	429a      	cmp	r2, r3
 800137e:	d8dd      	bhi.n	800133c <SCH_Add_Task+0x84>
 8001380:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8001384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461d      	mov	r5, r3
 8001392:	f000 f923 	bl	80015dc <Get_New_Task_ID>
 8001396:	4601      	mov	r1, r0
 8001398:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <SCH_Add_Task+0x1e0>)
 800139a:	4623      	mov	r3, r4
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4423      	add	r3, r4
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4a3b      	ldr	r2, [pc, #236]	; (8001498 <SCH_Add_Task+0x1e0>)
 80013aa:	4623      	mov	r3, r4
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4423      	add	r3, r4
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3304      	adds	r3, #4
 80013b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	4a37      	ldr	r2, [pc, #220]	; (8001498 <SCH_Add_Task+0x1e0>)
 80013bc:	4623      	mov	r3, r4
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4423      	add	r3, r4
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3308      	adds	r3, #8
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4a32      	ldr	r2, [pc, #200]	; (8001498 <SCH_Add_Task+0x1e0>)
 80013ce:	4623      	mov	r3, r4
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4423      	add	r3, r4
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	330c      	adds	r3, #12
 80013da:	462a      	mov	r2, r5
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <SCH_Add_Task+0x1e0>)
 80013e0:	4623      	mov	r3, r4
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4423      	add	r3, r4
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3310      	adds	r3, #16
 80013ec:	6019      	str	r1, [r3, #0]
 80013ee:	e04f      	b.n	8001490 <SCH_Add_Task+0x1d8>
 80013f0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80013f4:	4928      	ldr	r1, [pc, #160]	; (8001498 <SCH_Add_Task+0x1e0>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d13a      	bne.n	800147c <SCH_Add_Task+0x1c4>
 8001406:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800140e:	1ad5      	subs	r5, r2, r3
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001414:	429a      	cmp	r2, r3
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461e      	mov	r6, r3
 8001420:	f000 f8dc 	bl	80015dc <Get_New_Task_ID>
 8001424:	4601      	mov	r1, r0
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <SCH_Add_Task+0x1e0>)
 8001428:	4623      	mov	r3, r4
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4423      	add	r3, r4
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <SCH_Add_Task+0x1e0>)
 8001438:	4623      	mov	r3, r4
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4423      	add	r3, r4
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3304      	adds	r3, #4
 8001444:	601d      	str	r5, [r3, #0]
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <SCH_Add_Task+0x1e0>)
 8001448:	4623      	mov	r3, r4
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4423      	add	r3, r4
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3308      	adds	r3, #8
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <SCH_Add_Task+0x1e0>)
 800145a:	4623      	mov	r3, r4
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4423      	add	r3, r4
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	330c      	adds	r3, #12
 8001466:	4632      	mov	r2, r6
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <SCH_Add_Task+0x1e0>)
 800146c:	4623      	mov	r3, r4
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4423      	add	r3, r4
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3310      	adds	r3, #16
 8001478:	6019      	str	r1, [r3, #0]
 800147a:	e009      	b.n	8001490 <SCH_Add_Task+0x1d8>
 800147c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001480:	3301      	adds	r3, #1
 8001482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001486:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800148a:	2b09      	cmp	r3, #9
 800148c:	f67f af25 	bls.w	80012da <SCH_Add_Task+0x22>
 8001490:	374c      	adds	r7, #76	; 0x4c
 8001492:	46bd      	mov	sp, r7
 8001494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001496:	bf00      	nop
 8001498:	200000b4 	.word	0x200000b4

0800149c <SCH_Delete_Task>:
 800149c:	b4b0      	push	{r4, r5, r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d068      	beq.n	800157c <SCH_Delete_Task+0xe0>
 80014aa:	2300      	movs	r3, #0
 80014ac:	77fb      	strb	r3, [r7, #31]
 80014ae:	e061      	b.n	8001574 <SCH_Delete_Task+0xd8>
 80014b0:	7ffa      	ldrb	r2, [r7, #31]
 80014b2:	4935      	ldr	r1, [pc, #212]	; (8001588 <SCH_Delete_Task+0xec>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3310      	adds	r3, #16
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d152      	bne.n	800156e <SCH_Delete_Task+0xd2>
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d828      	bhi.n	8001520 <SCH_Delete_Task+0x84>
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	492d      	ldr	r1, [pc, #180]	; (8001588 <SCH_Delete_Task+0xec>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01d      	beq.n	8001520 <SCH_Delete_Task+0x84>
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	4927      	ldr	r1, [pc, #156]	; (8001588 <SCH_Delete_Task+0xec>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3304      	adds	r3, #4
 80014f6:	6819      	ldr	r1, [r3, #0]
 80014f8:	7ffa      	ldrb	r2, [r7, #31]
 80014fa:	4823      	ldr	r0, [pc, #140]	; (8001588 <SCH_Delete_Task+0xec>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4403      	add	r3, r0
 8001506:	3304      	adds	r3, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	7ffa      	ldrb	r2, [r7, #31]
 800150c:	3201      	adds	r2, #1
 800150e:	4419      	add	r1, r3
 8001510:	481d      	ldr	r0, [pc, #116]	; (8001588 <SCH_Delete_Task+0xec>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4403      	add	r3, r0
 800151c:	3304      	adds	r3, #4
 800151e:	6019      	str	r1, [r3, #0]
 8001520:	7ffb      	ldrb	r3, [r7, #31]
 8001522:	77bb      	strb	r3, [r7, #30]
 8001524:	e017      	b.n	8001556 <SCH_Delete_Task+0xba>
 8001526:	7fbb      	ldrb	r3, [r7, #30]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	7fb9      	ldrb	r1, [r7, #30]
 800152c:	4816      	ldr	r0, [pc, #88]	; (8001588 <SCH_Delete_Task+0xec>)
 800152e:	460b      	mov	r3, r1
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4418      	add	r0, r3
 8001538:	4913      	ldr	r1, [pc, #76]	; (8001588 <SCH_Delete_Task+0xec>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	4604      	mov	r4, r0
 8001546:	461d      	mov	r5, r3
 8001548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	6023      	str	r3, [r4, #0]
 8001550:	7fbb      	ldrb	r3, [r7, #30]
 8001552:	3301      	adds	r3, #1
 8001554:	77bb      	strb	r3, [r7, #30]
 8001556:	7fbb      	ldrb	r3, [r7, #30]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d9e4      	bls.n	8001526 <SCH_Delete_Task+0x8a>
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <SCH_Delete_Task+0xec>)
 800155e:	33b4      	adds	r3, #180	; 0xb4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	e007      	b.n	800157e <SCH_Delete_Task+0xe2>
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	3301      	adds	r3, #1
 8001572:	77fb      	strb	r3, [r7, #31]
 8001574:	7ffb      	ldrb	r3, [r7, #31]
 8001576:	2b09      	cmp	r3, #9
 8001578:	d99a      	bls.n	80014b0 <SCH_Delete_Task+0x14>
 800157a:	e000      	b.n	800157e <SCH_Delete_Task+0xe2>
 800157c:	bf00      	nop
 800157e:	3724      	adds	r7, #36	; 0x24
 8001580:	46bd      	mov	sp, r7
 8001582:	bcb0      	pop	{r4, r5, r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200000b4 	.word	0x200000b4

0800158c <SCH_Dispatch_Tasks>:
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <SCH_Dispatch_Tasks+0x4c>)
 8001594:	7b1b      	ldrb	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d019      	beq.n	80015ce <SCH_Dispatch_Tasks+0x42>
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <SCH_Dispatch_Tasks+0x4c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4798      	blx	r3
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <SCH_Dispatch_Tasks+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	731a      	strb	r2, [r3, #12]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <SCH_Dispatch_Tasks+0x4c>)
 80015a8:	1d3c      	adds	r4, r7, #4
 80015aa:	461d      	mov	r5, r3
 80015ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	6023      	str	r3, [r4, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff70 	bl	800149c <SCH_Delete_Task>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <SCH_Dispatch_Tasks+0x42>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe75 	bl	80012b8 <SCH_Add_Task>
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000b4 	.word	0x200000b4

080015dc <Get_New_Task_ID>:
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <Get_New_Task_ID+0x1c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <Get_New_Task_ID+0x1c>)
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <Get_New_Task_ID+0x1c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000017c 	.word	0x2000017c

080015fc <setTimerSecond>:
void setTimer7SEG(int duration){
	counter7SEG = duration/PERIOD;
	timer7SEG = 0;
}

void setTimerSecond(int duration){
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	counterSecond = duration/PERIOD;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <setTimerSecond+0x2c>)
 8001608:	fb82 1203 	smull	r1, r2, r2, r3
 800160c:	1092      	asrs	r2, r2, #2
 800160e:	17db      	asrs	r3, r3, #31
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <setTimerSecond+0x30>)
 8001614:	6013      	str	r3, [r2, #0]
	timerSecond = 0;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <setTimerSecond+0x34>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	66666667 	.word	0x66666667
 800162c:	2000018c 	.word	0x2000018c
 8001630:	20000188 	.word	0x20000188

08001634 <setTimer>:

void setTimer(int index, int duration){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	counter[index] = duration/PERIOD;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	4a09      	ldr	r2, [pc, #36]	; (8001668 <setTimer+0x34>)
 8001642:	fb82 1203 	smull	r1, r2, r2, r3
 8001646:	1092      	asrs	r2, r2, #2
 8001648:	17db      	asrs	r3, r3, #31
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <setTimer+0x38>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index] = 0;
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <setTimer+0x3c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2100      	movs	r1, #0
 800165a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	66666667 	.word	0x66666667
 800166c:	200001a4 	.word	0x200001a4
 8001670:	20000190 	.word	0x20000190

08001674 <timerRun>:

void timerRun(){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	e01c      	b.n	80016ba <timerRun+0x46>
		if (counter[i] > 0){
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <timerRun+0x58>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd13      	ble.n	80016b4 <timerRun+0x40>
			counter[i]--;
 800168c:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <timerRun+0x58>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <timerRun+0x58>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (counter[i] <= 0){
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <timerRun+0x58>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc04      	bgt.n	80016b4 <timerRun+0x40>
				timerFlag[i] = 1;
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <timerRun+0x5c>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2101      	movs	r1, #1
 80016b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	dddf      	ble.n	8001680 <timerRun+0xc>
			}
		}
	}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	200001a4 	.word	0x200001a4
 80016d0:	20000190 	.word	0x20000190

080016d4 <timerRunSecond>:

void timerRunSecond(){
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	if (counterSecond > 0){
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <timerRunSecond+0x2c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	dd0b      	ble.n	80016f8 <timerRunSecond+0x24>
		counterSecond--;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <timerRunSecond+0x2c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4a06      	ldr	r2, [pc, #24]	; (8001700 <timerRunSecond+0x2c>)
 80016e8:	6013      	str	r3, [r2, #0]
		if (counterSecond <= 0){
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <timerRunSecond+0x2c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dc02      	bgt.n	80016f8 <timerRunSecond+0x24>
			timerSecond = 1;
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <timerRunSecond+0x30>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	2000018c 	.word	0x2000018c
 8001704:	20000188 	.word	0x20000188

08001708 <timerRun7SEG>:

void timerRun7SEG(){
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	if (counter7SEG > 0){
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <timerRun7SEG+0x2c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	dd0b      	ble.n	800172c <timerRun7SEG+0x24>
		counter7SEG--;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <timerRun7SEG+0x2c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <timerRun7SEG+0x2c>)
 800171c:	6013      	str	r3, [r2, #0]
		if (counter7SEG <= 0){
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <timerRun7SEG+0x2c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	dc02      	bgt.n	800172c <timerRun7SEG+0x24>
			timer7SEG = 1;
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <timerRun7SEG+0x30>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000184 	.word	0x20000184
 8001738:	20000180 	.word	0x20000180

0800173c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <HAL_MspInit+0x5c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_MspInit+0x5c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_MspInit+0x60>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_MspInit+0x60>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000

080017a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b0:	d114      	bne.n	80017dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	201c      	movs	r0, #28
 80017d0:	f000 f9ff 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d4:	201c      	movs	r0, #28
 80017d6:	f000 fa18 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017da:	e018      	b.n	800180e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_TIM_Base_MspInit+0x7c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d113      	bne.n	800180e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	201d      	movs	r0, #29
 8001804:	f000 f9e5 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001808:	201d      	movs	r0, #29
 800180a:	f000 f9fe 	bl	8001c0a <HAL_NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40000400 	.word	0x40000400

08001820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_TIM_MspPostInit+0x58>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d117      	bne.n	8001870 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_TIM_MspPostInit+0x5c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_TIM_MspPostInit+0x5c>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_TIM_MspPostInit+0x5c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001858:	2340      	movs	r3, #64	; 0x40
 800185a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2302      	movs	r3, #2
 8001862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <HAL_TIM_MspPostInit+0x60>)
 800186c:	f000 f9e8 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40000400 	.word	0x40000400
 800187c:	40021000 	.word	0x40021000
 8001880:	40010800 	.word	0x40010800

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ca:	f000 f88f 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <TIM2_IRQHandler+0x10>)
 80018da:	f001 f8dd 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000020c 	.word	0x2000020c

080018e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM3_IRQHandler+0x10>)
 80018ee:	f001 f8d3 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200001c4 	.word	0x200001c4

080018fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <buzzer>:
 *
 *  Created on: Nov 29, 2023
 *      Author: olkmphy
 */

void buzzer(){
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	// Implement buzzer here...
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001914:	f7ff fff2 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800191a:	490c      	ldr	r1, [pc, #48]	; (800194c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <LoopFillZerobss+0x16>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001930:	4c09      	ldr	r4, [pc, #36]	; (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f001 fe75 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001942:	f7ff fa7d 	bl	8000e40 <main>
  bx lr
 8001946:	4770      	bx	lr
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001950:	080036c8 	.word	0x080036c8
  ldr r2, =_sbss
 8001954:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001958:	20000258 	.word	0x20000258

0800195c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_Init+0x28>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_Init+0x28>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f923 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	200f      	movs	r0, #15
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff fede 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f93b 	bl	8001c26 <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 f903 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000030 	.word	0x20000030
 80019e4:	20000038 	.word	0x20000038
 80019e8:	20000034 	.word	0x20000034

080019ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x1c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_IncTick+0x20>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000038 	.word	0x20000038
 8001a0c:	20000254 	.word	0x20000254

08001a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_GetTick+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000254 	.word	0x20000254

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4906      	ldr	r1, [pc, #24]	; (8001abc <__NVIC_EnableIRQ+0x34>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff90 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff2d 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff42 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff90 	bl	8001b14 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5f 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff35 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e169      	b.n	8001f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c54:	2201      	movs	r2, #1
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8158 	bne.w	8001f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a9a      	ldr	r2, [pc, #616]	; (8001ee0 <HAL_GPIO_Init+0x2a0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d05e      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c7c:	4a98      	ldr	r2, [pc, #608]	; (8001ee0 <HAL_GPIO_Init+0x2a0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d875      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c82:	4a98      	ldr	r2, [pc, #608]	; (8001ee4 <HAL_GPIO_Init+0x2a4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d058      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c88:	4a96      	ldr	r2, [pc, #600]	; (8001ee4 <HAL_GPIO_Init+0x2a4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d86f      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c8e:	4a96      	ldr	r2, [pc, #600]	; (8001ee8 <HAL_GPIO_Init+0x2a8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d052      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c94:	4a94      	ldr	r2, [pc, #592]	; (8001ee8 <HAL_GPIO_Init+0x2a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d869      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c9a:	4a94      	ldr	r2, [pc, #592]	; (8001eec <HAL_GPIO_Init+0x2ac>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04c      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001ca0:	4a92      	ldr	r2, [pc, #584]	; (8001eec <HAL_GPIO_Init+0x2ac>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d863      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001ca6:	4a92      	ldr	r2, [pc, #584]	; (8001ef0 <HAL_GPIO_Init+0x2b0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d046      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001cac:	4a90      	ldr	r2, [pc, #576]	; (8001ef0 <HAL_GPIO_Init+0x2b0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d85d      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cb2:	2b12      	cmp	r3, #18
 8001cb4:	d82a      	bhi.n	8001d0c <HAL_GPIO_Init+0xcc>
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d859      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <HAL_GPIO_Init+0x80>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d15 	.word	0x08001d15
 8001cc8:	08001d27 	.word	0x08001d27
 8001ccc:	08001d69 	.word	0x08001d69
 8001cd0:	08001d6f 	.word	0x08001d6f
 8001cd4:	08001d6f 	.word	0x08001d6f
 8001cd8:	08001d6f 	.word	0x08001d6f
 8001cdc:	08001d6f 	.word	0x08001d6f
 8001ce0:	08001d6f 	.word	0x08001d6f
 8001ce4:	08001d6f 	.word	0x08001d6f
 8001ce8:	08001d6f 	.word	0x08001d6f
 8001cec:	08001d6f 	.word	0x08001d6f
 8001cf0:	08001d6f 	.word	0x08001d6f
 8001cf4:	08001d6f 	.word	0x08001d6f
 8001cf8:	08001d6f 	.word	0x08001d6f
 8001cfc:	08001d6f 	.word	0x08001d6f
 8001d00:	08001d6f 	.word	0x08001d6f
 8001d04:	08001d1d 	.word	0x08001d1d
 8001d08:	08001d31 	.word	0x08001d31
 8001d0c:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_GPIO_Init+0x2b4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d12:	e02c      	b.n	8001d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e029      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e024      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e01f      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	330c      	adds	r3, #12
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e01a      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d42:	2304      	movs	r3, #4
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e013      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d50:	2308      	movs	r3, #8
 8001d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	611a      	str	r2, [r3, #16]
          break;
 8001d5a:	e009      	b.n	8001d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	615a      	str	r2, [r3, #20]
          break;
 8001d66:	e003      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          break;
 8001d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2bff      	cmp	r3, #255	; 0xff
 8001d74:	d801      	bhi.n	8001d7a <HAL_GPIO_Init+0x13a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	e001      	b.n	8001d7e <HAL_GPIO_Init+0x13e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d802      	bhi.n	8001d8c <HAL_GPIO_Init+0x14c>
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x152>
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3b08      	subs	r3, #8
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	210f      	movs	r1, #15
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	6a39      	ldr	r1, [r7, #32]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80b1 	beq.w	8001f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc0:	4b4d      	ldr	r3, [pc, #308]	; (8001ef8 <HAL_GPIO_Init+0x2b8>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a4c      	ldr	r2, [pc, #304]	; (8001ef8 <HAL_GPIO_Init+0x2b8>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x2b8>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd8:	4a48      	ldr	r2, [pc, #288]	; (8001efc <HAL_GPIO_Init+0x2bc>)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_GPIO_Init+0x1ec>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00d      	beq.n	8001e28 <HAL_GPIO_Init+0x1e8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3e      	ldr	r2, [pc, #248]	; (8001f08 <HAL_GPIO_Init+0x2c8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d007      	beq.n	8001e24 <HAL_GPIO_Init+0x1e4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3d      	ldr	r2, [pc, #244]	; (8001f0c <HAL_GPIO_Init+0x2cc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_GPIO_Init+0x1e0>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e006      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e004      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	f002 0203 	and.w	r2, r2, #3
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	4093      	lsls	r3, r2
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e3e:	492f      	ldr	r1, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x2bc>)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	492c      	ldr	r1, [pc, #176]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4928      	ldr	r1, [pc, #160]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	491e      	ldr	r1, [pc, #120]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4918      	ldr	r1, [pc, #96]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4914      	ldr	r1, [pc, #80]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d021      	beq.n	8001f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	490e      	ldr	r1, [pc, #56]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e021      	b.n	8001f22 <HAL_GPIO_Init+0x2e2>
 8001ede:	bf00      	nop
 8001ee0:	10320000 	.word	0x10320000
 8001ee4:	10310000 	.word	0x10310000
 8001ee8:	10220000 	.word	0x10220000
 8001eec:	10210000 	.word	0x10210000
 8001ef0:	10120000 	.word	0x10120000
 8001ef4:	10110000 	.word	0x10110000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40010800 	.word	0x40010800
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40011000 	.word	0x40011000
 8001f0c:	40011400 	.word	0x40011400
 8001f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	4909      	ldr	r1, [pc, #36]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f ae8e 	bne.w	8001c54 <HAL_GPIO_Init+0x14>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	372c      	adds	r7, #44	; 0x2c
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e001      	b.n	8001f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f86:	787b      	ldrb	r3, [r7, #1]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8c:	887a      	ldrh	r2, [r7, #2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f92:	e003      	b.n	8001f9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	041a      	lsls	r2, r3, #16
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	611a      	str	r2, [r3, #16]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e26c      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	4b92      	ldr	r3, [pc, #584]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00c      	beq.n	8001fee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd4:	4b8f      	ldr	r3, [pc, #572]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d112      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
 8001fe0:	4b8c      	ldr	r3, [pc, #560]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fee:	4b89      	ldr	r3, [pc, #548]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x12c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d168      	bne.n	80020d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e246      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x76>
 8002010:	4b80      	ldr	r3, [pc, #512]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a7f      	ldr	r2, [pc, #508]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e02e      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x98>
 8002026:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7a      	ldr	r2, [pc, #488]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b78      	ldr	r3, [pc, #480]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a77      	ldr	r2, [pc, #476]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0xbc>
 800204a:	4b72      	ldr	r3, [pc, #456]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a71      	ldr	r2, [pc, #452]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b6f      	ldr	r3, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002064:	4b6b      	ldr	r3, [pc, #428]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6a      	ldr	r2, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a67      	ldr	r2, [pc, #412]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fcc4 	bl	8001a10 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff fcc0 	bl	8001a10 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1fa      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xe4>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fcb0 	bl	8001a10 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fcac 	bl	8001a10 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1e6      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x10c>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d063      	beq.n	80021aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ee:	4b49      	ldr	r3, [pc, #292]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1ba      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4939      	ldr	r1, [pc, #228]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	e03a      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCC_OscConfig+0x270>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff fc65 	bl	8001a10 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff fc61 	bl	8001a10 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e19b      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4927      	ldr	r1, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_RCC_OscConfig+0x270>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fc44 	bl	8001a10 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff fc40 	bl	8001a10 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e17a      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03a      	beq.n	800222c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d019      	beq.n	80021f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7ff fc24 	bl	8001a10 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff fc20 	bl	8001a10 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e15a      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 fa9a 	bl	8002724 <RCC_Delay>
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff fc0a 	bl	8001a10 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fe:	e00f      	b.n	8002220 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff fc06 	bl	8001a10 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d908      	bls.n	8002220 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e140      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	42420000 	.word	0x42420000
 800221c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b9e      	ldr	r3, [pc, #632]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e9      	bne.n	8002200 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a6 	beq.w	8002386 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b97      	ldr	r3, [pc, #604]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b94      	ldr	r3, [pc, #592]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a93      	ldr	r2, [pc, #588]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b91      	ldr	r3, [pc, #580]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b8e      	ldr	r3, [pc, #568]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002272:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a8a      	ldr	r2, [pc, #552]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227e:	f7ff fbc7 	bl	8001a10 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7ff fbc3 	bl	8001a10 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0fd      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x312>
 80022ac:	4b7b      	ldr	r3, [pc, #492]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a7a      	ldr	r2, [pc, #488]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e02d      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x334>
 80022c2:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a75      	ldr	r2, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a72      	ldr	r2, [pc, #456]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	e01c      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d10c      	bne.n	80022fe <HAL_RCC_OscConfig+0x356>
 80022e4:	4b6d      	ldr	r3, [pc, #436]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a6c      	ldr	r2, [pc, #432]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	e00b      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a66      	ldr	r2, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4b64      	ldr	r3, [pc, #400]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a63      	ldr	r2, [pc, #396]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d015      	beq.n	800234a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff fb77 	bl	8001a10 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7ff fb73 	bl	8001a10 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0ab      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ee      	beq.n	8002326 <HAL_RCC_OscConfig+0x37e>
 8002348:	e014      	b.n	8002374 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7ff fb61 	bl	8001a10 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7ff fb5d 	bl	8001a10 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e095      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ee      	bne.n	8002352 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d105      	bne.n	8002386 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237a:	4b48      	ldr	r3, [pc, #288]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a47      	ldr	r2, [pc, #284]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002384:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8081 	beq.w	8002492 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d061      	beq.n	8002460 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d146      	bne.n	8002432 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_OscConfig+0x4fc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fb31 	bl	8001a10 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7ff fb2d 	bl	8001a10 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e067      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	492d      	ldr	r1, [pc, #180]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a19      	ldr	r1, [r3, #32]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	430b      	orrs	r3, r1
 80023fe:	4927      	ldr	r1, [pc, #156]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_RCC_OscConfig+0x4fc>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fb01 	bl	8001a10 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff fafd 	bl	8001a10 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e037      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x46a>
 8002430:	e02f      	b.n	8002492 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_RCC_OscConfig+0x4fc>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff faea 	bl	8001a10 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff fae6 	bl	8001a10 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e020      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x498>
 800245e:	e018      	b.n	8002492 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e013      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	429a      	cmp	r2, r3
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
 80024a4:	42420060 	.word	0x42420060

080024a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0d0      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d910      	bls.n	80024ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	4965      	ldr	r1, [pc, #404]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0b8      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002504:	4b59      	ldr	r3, [pc, #356]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800250e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002526:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	494d      	ldr	r1, [pc, #308]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d040      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d115      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07f      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e073      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06b      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4936      	ldr	r1, [pc, #216]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7ff fa3a 	bl	8001a10 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7ff fa36 	bl	8001a10 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e053      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d210      	bcs.n	80025f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4922      	ldr	r1, [pc, #136]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e032      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4916      	ldr	r1, [pc, #88]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	490e      	ldr	r1, [pc, #56]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002636:	f000 f821 	bl	800267c <HAL_RCC_GetSysClockFreq>
 800263a:	4602      	mov	r2, r0
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	490a      	ldr	r1, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1cc>)
 8002650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1d0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f998 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40022000 	.word	0x40022000
 800266c:	40021000 	.word	0x40021000
 8002670:	0800369c 	.word	0x0800369c
 8002674:	20000030 	.word	0x20000030
 8002678:	20000034 	.word	0x20000034

0800267c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_RCC_GetSysClockFreq+0x94>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x30>
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x36>
 80026aa:	e027      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ae:	613b      	str	r3, [r7, #16]
      break;
 80026b0:	e027      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0c9b      	lsrs	r3, r3, #18
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d010      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_GetSysClockFreq+0x94>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0c5b      	lsrs	r3, r3, #17
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_RCC_GetSysClockFreq+0x98>)
 80026de:	fb02 f203 	mul.w	r2, r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e004      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	613b      	str	r3, [r7, #16]
      break;
 80026fa:	e002      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fe:	613b      	str	r3, [r7, #16]
      break;
 8002700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002702:	693b      	ldr	r3, [r7, #16]
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	007a1200 	.word	0x007a1200
 8002718:	080036ac 	.word	0x080036ac
 800271c:	080036bc 	.word	0x080036bc
 8002720:	003d0900 	.word	0x003d0900

08002724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <RCC_Delay+0x34>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <RCC_Delay+0x38>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0a5b      	lsrs	r3, r3, #9
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002740:	bf00      	nop
  }
  while (Delay --);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f9      	bne.n	8002740 <RCC_Delay+0x1c>
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000030 	.word	0x20000030
 800275c:	10624dd3 	.word	0x10624dd3

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff f80a 	bl	80017a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 fc30 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e03a      	b.n	800288e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_TIM_Base_Start_IT+0x98>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d009      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_TIM_Base_Start_IT+0x9c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d111      	bne.n	800287c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b06      	cmp	r3, #6
 8002868:	d010      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	e007      	b.n	800288c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800

080028a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f839 	bl	8002942 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fb8e 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_TIM_PWM_Start+0x24>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e022      	b.n	80029be <HAL_TIM_PWM_Start+0x6a>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b04      	cmp	r3, #4
 800297c:	d109      	bne.n	8002992 <HAL_TIM_PWM_Start+0x3e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e015      	b.n	80029be <HAL_TIM_PWM_Start+0x6a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d109      	bne.n	80029ac <HAL_TIM_PWM_Start+0x58>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e008      	b.n	80029be <HAL_TIM_PWM_Start+0x6a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e05e      	b.n	8002a84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_PWM_Start+0x82>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d4:	e013      	b.n	80029fe <HAL_TIM_PWM_Start+0xaa>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_PWM_Start+0x92>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e4:	e00b      	b.n	80029fe <HAL_TIM_PWM_Start+0xaa>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start+0xa2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f4:	e003      	b.n	80029fe <HAL_TIM_PWM_Start+0xaa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fd7c 	bl	8003504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_TIM_PWM_Start+0x138>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d107      	bne.n	8002a26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIM_PWM_Start+0x138>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_TIM_PWM_Start+0xfa>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_PWM_Start+0xfa>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_TIM_PWM_Start+0x13c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_PWM_Start+0xfa>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <HAL_TIM_PWM_Start+0x140>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d010      	beq.n	8002a82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	e007      	b.n	8002a82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0202 	mvn.w	r2, #2
 8002ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa76 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa69 	bl	8002fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fa78 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0204 	mvn.w	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa4c 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa3f 	bl	8002fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fa4e 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fa22 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa15 	bl	8002fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa24 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9f8 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9eb 	bl	8002fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f9fa 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0201 	mvn.w	r2, #1
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe fad8 	bl	80011cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fce9 	bl	800361a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f9be 	bl	8002ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0220 	mvn.w	r2, #32
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fcb4 	bl	8003608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e0ae      	b.n	8002e24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	f200 809f 	bhi.w	8002e14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002e15 	.word	0x08002e15
 8002ce4:	08002e15 	.word	0x08002e15
 8002ce8:	08002e15 	.word	0x08002e15
 8002cec:	08002d51 	.word	0x08002d51
 8002cf0:	08002e15 	.word	0x08002e15
 8002cf4:	08002e15 	.word	0x08002e15
 8002cf8:	08002e15 	.word	0x08002e15
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002e15 	.word	0x08002e15
 8002d04:	08002e15 	.word	0x08002e15
 8002d08:	08002e15 	.word	0x08002e15
 8002d0c:	08002dd3 	.word	0x08002dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f9d6 	bl	80030c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6999      	ldr	r1, [r3, #24]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	619a      	str	r2, [r3, #24]
      break;
 8002d4e:	e064      	b.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa1c 	bl	8003194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	021a      	lsls	r2, r3, #8
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	619a      	str	r2, [r3, #24]
      break;
 8002d90:	e043      	b.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fa65 	bl	8003268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0208 	orr.w	r2, r2, #8
 8002dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0204 	bic.w	r2, r2, #4
 8002dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69d9      	ldr	r1, [r3, #28]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	61da      	str	r2, [r3, #28]
      break;
 8002dd0:	e023      	b.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 faaf 	bl	800333c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	021a      	lsls	r2, r3, #8
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	61da      	str	r2, [r3, #28]
      break;
 8002e12:	e002      	b.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	75fb      	strb	r3, [r7, #23]
      break;
 8002e18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIM_ConfigClockSource+0x1c>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0b4      	b.n	8002fb2 <HAL_TIM_ConfigClockSource+0x186>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e80:	d03e      	beq.n	8002f00 <HAL_TIM_ConfigClockSource+0xd4>
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	f200 8087 	bhi.w	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8e:	f000 8086 	beq.w	8002f9e <HAL_TIM_ConfigClockSource+0x172>
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	d87f      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b70      	cmp	r3, #112	; 0x70
 8002e9a:	d01a      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0xa6>
 8002e9c:	2b70      	cmp	r3, #112	; 0x70
 8002e9e:	d87b      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b60      	cmp	r3, #96	; 0x60
 8002ea2:	d050      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x11a>
 8002ea4:	2b60      	cmp	r3, #96	; 0x60
 8002ea6:	d877      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b50      	cmp	r3, #80	; 0x50
 8002eaa:	d03c      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0xfa>
 8002eac:	2b50      	cmp	r3, #80	; 0x50
 8002eae:	d873      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d058      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x13a>
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d86f      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b30      	cmp	r3, #48	; 0x30
 8002eba:	d064      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x15a>
 8002ebc:	2b30      	cmp	r3, #48	; 0x30
 8002ebe:	d86b      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d060      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x15a>
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d867      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05c      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x15a>
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d05a      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x15a>
 8002ed0:	e062      	b.n	8002f98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6899      	ldr	r1, [r3, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f000 faf0 	bl	80034c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	609a      	str	r2, [r3, #8]
      break;
 8002efe:	e04f      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f000 fad9 	bl	80034c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f22:	609a      	str	r2, [r3, #8]
      break;
 8002f24:	e03c      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fa50 	bl	80033d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2150      	movs	r1, #80	; 0x50
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 faa7 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e02c      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fa6e 	bl	8003434 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2160      	movs	r1, #96	; 0x60
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa97 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e01c      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 fa30 	bl	80033d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa87 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e00c      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f000 fa7e 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 8002f96:	e003      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e000      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
	...

08003004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a29      	ldr	r2, [pc, #164]	; (80030bc <TIM_Base_SetConfig+0xb8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00b      	beq.n	8003034 <TIM_Base_SetConfig+0x30>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003022:	d007      	beq.n	8003034 <TIM_Base_SetConfig+0x30>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <TIM_Base_SetConfig+0xbc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0x30>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <TIM_Base_SetConfig+0xc0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d108      	bne.n	8003046 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <TIM_Base_SetConfig+0xb8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00b      	beq.n	8003066 <TIM_Base_SetConfig+0x62>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d007      	beq.n	8003066 <TIM_Base_SetConfig+0x62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <TIM_Base_SetConfig+0xbc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_Base_SetConfig+0x62>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <TIM_Base_SetConfig+0xc0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d108      	bne.n	8003078 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a07      	ldr	r2, [pc, #28]	; (80030bc <TIM_Base_SetConfig+0xb8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d103      	bne.n	80030ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	615a      	str	r2, [r3, #20]
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800

080030c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f023 0201 	bic.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <TIM_OC1_SetConfig+0xc8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10c      	bne.n	800313e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0308 	bic.w	r3, r3, #8
 800312a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a13      	ldr	r2, [pc, #76]	; (8003190 <TIM_OC1_SetConfig+0xc8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d111      	bne.n	800316a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800314c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40012c00 	.word	0x40012c00

08003194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 0210 	bic.w	r2, r3, #16
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0320 	bic.w	r3, r3, #32
 80031de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <TIM_OC2_SetConfig+0xd0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d10d      	bne.n	8003210 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a14      	ldr	r2, [pc, #80]	; (8003264 <TIM_OC2_SetConfig+0xd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d113      	bne.n	8003240 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800321e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40012c00 	.word	0x40012c00

08003268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <TIM_OC3_SetConfig+0xd0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10d      	bne.n	80032e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <TIM_OC3_SetConfig+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d113      	bne.n	8003312 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40012c00 	.word	0x40012c00

0800333c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	031b      	lsls	r3, r3, #12
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <TIM_OC4_SetConfig+0x98>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d109      	bne.n	80033b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	019b      	lsls	r3, r3, #6
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40012c00 	.word	0x40012c00

080033d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0201 	bic.w	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 030a 	bic.w	r3, r3, #10
 8003414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0210 	bic.w	r2, r3, #16
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800345e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	031b      	lsls	r3, r3, #12
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003470:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f043 0307 	orr.w	r3, r3, #7
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b087      	sub	sp, #28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	021a      	lsls	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	609a      	str	r2, [r3, #8]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003560:	2302      	movs	r3, #2
 8003562:	e046      	b.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a16      	ldr	r2, [pc, #88]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00e      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d009      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a10      	ldr	r2, [pc, #64]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10c      	bne.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800

08003608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	2600      	movs	r6, #0
 8003630:	4d0c      	ldr	r5, [pc, #48]	; (8003664 <__libc_init_array+0x38>)
 8003632:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003634:	1b64      	subs	r4, r4, r5
 8003636:	10a4      	asrs	r4, r4, #2
 8003638:	42a6      	cmp	r6, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	f000 f822 	bl	8003684 <_init>
 8003640:	2600      	movs	r6, #0
 8003642:	4d0a      	ldr	r5, [pc, #40]	; (800366c <__libc_init_array+0x40>)
 8003644:	4c0a      	ldr	r4, [pc, #40]	; (8003670 <__libc_init_array+0x44>)
 8003646:	1b64      	subs	r4, r4, r5
 8003648:	10a4      	asrs	r4, r4, #2
 800364a:	42a6      	cmp	r6, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f855 3b04 	ldr.w	r3, [r5], #4
 8003654:	4798      	blx	r3
 8003656:	3601      	adds	r6, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f855 3b04 	ldr.w	r3, [r5], #4
 800365e:	4798      	blx	r3
 8003660:	3601      	adds	r6, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	080036c0 	.word	0x080036c0
 8003668:	080036c0 	.word	0x080036c0
 800366c:	080036c0 	.word	0x080036c0
 8003670:	080036c4 	.word	0x080036c4

08003674 <memset>:
 8003674:	4603      	mov	r3, r0
 8003676:	4402      	add	r2, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <_init>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr

08003690 <_fini>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr
